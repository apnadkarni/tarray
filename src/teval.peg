# Much of this based on Phillippe Segaude's example C grammar
# from https://github.com/PhilippeSigaud/Pegged/blob/master/pegged/examples/c.d
PEG TEval (Program)
    # A Program is a sequence of statements
    Program <- WS (Statement (WS Separator WS Statement)*)? WS EOF;
void:  EOF <- !.;

    # A Statement is a function call or an assignment. In particular
    # an arbitrary expression that is not a function call is not allowed.
    Statement <- Assignment / MultiAssignment / Expression / Empty ;
void:    Empty <- WS ;

    # Assignment to a single LValue
    Assignment <- LValue WS AssignOp WS Expression;


    # Assigns multiple variables from a list / tarray. Expression here
    # will be checked at run time to provide multiple values.
    MultiAssignment <- LValue (WS ',' WS LValue)+ WS '=' Expression;

    # Any term that can be assigned to. Note only range based slices
    # are allowed so cannot use VarSlice here.
    LValue <- Identifier (WS '[' WS (Range / Expression) WS ']')? ;

    # Expressions in ascending precedence order
    Expression <- LogicalOrExpr ;
    LogicalOrExpr <- LogicalAndExpr ( WS LogicalOrOp WS LogicalOrExpr)* ;
    LogicalAndExpr <- RangeExpr (WS  LogicalAndOp WS LogicalAndExpr)* ;
    RangeExpr  <- BitOrExpr WS ':' WS BitOrExpr / BitOrExpr ;
    BitOrExpr <- BitXorExpr (WS BitOrOp WS BitOrExpr)* ;
    BitXorExpr <- BitAndExpr (WS BitXorOp WS BitXorExpr)* ;
    BitAndExpr <- RelExpr (WS BitAndOp WS BitAndExpr)* ;
    RelExpr <- AddExpr (WS RelOp WS RelExpr)* ;
    AddExpr  <- MulExpr (WS AddOp WS AddExpr)* ;
    MulExpr <- UnaryExpr (WS MulOp WS MulExpr)* ;
    UnaryExpr <- PostfixExpr / UnaryOp WS UnaryExpr ;
    PostfixExpr  <- PrimaryExpr (WS PostfixOp)* ;

    # Basic terms
    PrimaryExpr  <- BuiltinIdentifier / Identifier / Number / String / Sequence / '(' Expression ')' ;

    # Postfix operators
    PostfixOp <-   Selector / FunctionCall / Column / Columns ;
    Selector <- '[' WS ('end' / Expression) WS ']' ;
    FunctionCall <- '(' WS ArgumentExprList? WS ')' ;
    ArgumentExprList <- Expression WS (WS ',' WS Expression)* ;
    Column <- '.' WS ColumnIdentifier ;
    Columns <- '.' WS '(' WS ColumnList? WS ')' ;
    ColumnList <- ColumnIdentifier WS (WS ',' WS ColumnIdentifier)* ;

    # Syntax based definitions

leaf: BuiltinIdentifier <- [$] Identifier ;
ColumnIdentifier <- BuiltinIdentifier '.' Identifier / Identifier / Number;
leaf: Identifier <- ('_' / '::' / <alpha>) ('_' / '::' / <alnum>)* ;
leaf: Number <- <ddigit> + ('.' <ddigit> + )? ( ('e' / 'E' ) ('+' / '-') ? <ddigit> + )?;
Sequence <- '{' WS (Expression (WS ',' WS Expression)*)? WS '}' ;
leaf: String <- Quote (!Quote Char)* Quote;
void: Char   <- BackSlash ( Quote 
                     / BackSlash
                     / [bfnrt]
                     / 'x' <xdigit> <xdigit> <xdigit>
                     / 'u' <xdigit> <xdigit> <xdigit> <xdigit>
                     / 'U' <xdigit> <xdigit> <xdigit> <xdigit> <xdigit> <xdigit> <xdigit> <xdigit>
                    )
           / . ;
void: Quote <- '"';
void: Backslash <- '\\';

void: Separator <- EOL / ';';

leaf: AssignOp <- '=' / '+=' / '-=' / '*=' / '/=' / '|=' / '&=';

leaf: Sign  <- [-+];
leaf: MulOp       <- '*' / '/'                                    ;
leaf: AddOp       <- '+' / '-'                                    ;
leaf: PowOp       <- '**'                                         ;

leaf: RelOp <- '==' / '!=' / '<=' / '>=' /
               '<' / '>' / '=^' / '!^' / '=~' / '!~' / '=^~' /
               '!^~' / '=*' / '!*' / '=^*' / '!^*';
leaf: UnaryOp <- [-+~!] ;
leaf: BitAndOp <- '&' ;
leaf: BitOrOp <- '|' ;
leaf: BitXorOp <- '^' ;
leaf: LogicalAndOp <- '&&' ;
leaf: LogicalOrOp <- '||' ;


void: WS    <- (('\\' EOL) / (!EOL <space>))*;
void: WSob  <- (('\\' EOL) / (!EOL <space>))+;






END;
