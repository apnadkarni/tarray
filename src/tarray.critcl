#
# Copyright (c) 2012-2013, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license
#

package require critcl 3.1

critcl::license "Ashok P. Nadkarni" license.terms
critcl::summary "Tcl Typed Array Extension"
critcl::description {
    Implements the tarray::column and tarray::table commands providing 
    accessed to typed array values. This extension is targeted towards
    Tcl applications dealing with a large number of data items.
}

critcl::clean_cache
critcl::tcl 8.5
if {[string match "*-gcc" [critcl::targetconfig]] ||
    [string match "linux-*-\\*" [critcl::targetconfig]] ||
    [string match  "mingw*" [critcl::targetconfig]]} {
    # Flags required for gcc
    critcl::cflags -std=gnu99 -Winline
}

critcl::csources tarray.c table.c tasearch.c bitarray.c tasort.c timsort.c timsort_r.c
critcl::tsources tarray.tcl
critcl::cheaders tarray.h timsort-impl.h

critcl::ccode {
#include "tarray.h"
    typedef Tcl_Obj *TArrayObjPtr;

    /* Must match order of TA_FORMAT_* in tarray.h */
    static const char *gFormatOptions[] = {
        "-tarray",
        "-list",
        "-dict",
        NULL
    };

    /*
     * If status is success, sets ip result to ores. Always returns status.
     * ores might be deallocated unless caller makes sure it is holding a 
     * ref count. Primary purpose of this trivial routine is to deal
     * with returning an object that might have been either allocated
     * or be an existing object passed in the objv[] array to a command.
     */
    TA_INLINE TCL_RESULT ta_return_result(Tcl_Interp *ip, TCL_RESULT status, Tcl_Obj *ores)
    {
        Tcl_IncrRefCount(ores);
        if (status == TCL_OK)
            Tcl_SetObjResult(ip, ores);
        Tcl_DecrRefCount(ores);
        return status;
    }

    /*
     * Sets the value of the variable given by ovarname to ovalue and sets the
     * the interp result to the resulting value of the variable (which may be
     * different from ovalue because of traces).
     * 
     * IMPORTANT: Caller should NOT access ovalue again unless it has protected
     * it by bumping its ref count.
     */
    TCL_RESULT ta_set_var_result(Tcl_Interp *ip, TCL_RESULT status, Tcl_Obj *ovarname, Tcl_Obj *ovalue)
    {
        Tcl_Obj *oresult;
        Tcl_IncrRefCount(ovalue);
        if (status == TCL_OK) {
            oresult = Tcl_ObjSetVar2(ip, ovarname, NULL, ovalue, TCL_LEAVE_ERR_MSG);
            if (oresult)
                Tcl_SetObjResult(ip, oresult);
            else
                status = TCL_ERROR;
        }
        Tcl_DecrRefCount(ovalue);

        return status;
    }

}

critcl::cinit {
    TA_ASSERT(ba_sanity_check() == 0);
    g_tcl_list_type_ptr = Tcl_GetObjType("list");
} {
}

critcl::argtype TArrayObjPtr {
    if (tcol_convert(interp, @@) != TCL_OK)
        return TCL_ERROR;
    @A = @@;
}

critcl::argtype thdr_t* {
    if (tcol_convert(interp, @@) != TCL_OK)
        return TCL_ERROR;
    @A = TARRAYHDR(@@);
}

critcl::ccommand tarray::column::create {} {
    int init_size;
    int tatype;
    Tcl_Obj **elems;
    int nelems;
    thdr_t *thdrP;

    if (objc < 2 || objc > 4) {
        Tcl_WrongNumArgs(interp, 1, objv, "TYPE ?INITVAL? ?INITSIZE?");
        return TCL_ERROR;
    }

    if (Tcl_GetIndexFromObj(interp, objv[1], g_type_tokens, "TArrayType",
                            TCL_EXACT, &tatype) != TCL_OK) {
	return TCL_ERROR;
    }

    init_size = 0;
    nelems = 0;
    elems = NULL;
    if (objc > 2) {
        if (Tcl_ListObjGetElements(interp, objv[2], &nelems, &elems) != TCL_OK)
            return TCL_ERROR;
        if (objc > 3) {
            if (Tcl_GetIntFromObj(interp, objv[3], &init_size) != TCL_OK)
                return TCL_ERROR;
        }
    }

    thdrP = thdr_alloc_and_init(interp, tatype, nelems, elems, init_size);
    if (thdrP == NULL)
        return TCL_ERROR;

    Tcl_SetObjResult(interp, tcol_new(thdrP));
    return TCL_OK;
}


critcl::ccommand tarray::column::delete {} {
    Tcl_Obj *tcol;
    int status;

    if (objc != 3 && objc != 4) {
	Tcl_WrongNumArgs(interp, 1, objv, "TARRAY (INDEXLIST | LOW ?HIGH?)");
	return TCL_ERROR;
    }
    
    tcol = objv[1];
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(objv[1]);

    status = tcol_delete(interp, tcol, objv[2], objc == 4 ? objv[3] : NULL);
    return ta_return_result(interp, status, tcol);
}

critcl::ccommand tarray::column::vdelete {} {
    Tcl_Obj *tcol;
    int status;

    if (objc != 3 && objc != 4) {
	Tcl_WrongNumArgs(interp, 1, objv, "TARRAYVAR (INDEXLIST | LOW ?HIGH?)");
	return TCL_ERROR;
    }
    
    tcol = Tcl_ObjGetVar2(interp, objv[1], NULL, TCL_LEAVE_ERR_MSG);
    if (tcol == NULL)
        return TCL_ERROR;
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(tcol);

    status = tcol_delete(interp, tcol, objv[2], objc == 4 ? objv[3] : NULL);
    return ta_set_var_result(interp, status, objv[1], tcol);
}

critcl::cproc tarray::column::size {Tcl_Interp* interp TArrayObjPtr tcol} int {
    return tcol_occupancy(tcol);
}

critcl::cproc tarray::column::type {Tcl_Interp* interp TArrayObjPtr tcol} "const char*" {
    return ta_type_string(tcol_type(tcol));
}

critcl::cproc tarray::column::index {Tcl_Interp* interp TArrayObjPtr COLUMN Tcl_Obj* INDEX} ok {
    int ix;
    Tcl_Obj *o;
    if (ta_convert_index(interp, INDEX, &ix, tcol_occupancy(COLUMN)-1, 0, tcol_occupancy(COLUMN)-1) != TCL_OK)
        return TCL_ERROR;
    
    o = tcol_index(interp, COLUMN, ix);
    if (o) {
        Tcl_SetObjResult(interp, o);
        return TCL_OK;
    } else
        return TCL_ERROR;
}

critcl::ccommand tarray::column::get {} {
    Tcl_Obj *tcol;
    int low, count;
    int status;
    int fmt = TA_FORMAT_TARRAY;
    int ta_arg;
    thdr_t *pindices;

    if (objc < 3)
        goto badargs;
    
    /*
     * Parsing is ambiguous. We do not want check if objv[1] is an option
     * directly because it might shimmer a huge tarray into a string.
     * So check for options only if not a tarray. Note it is possible that
     * objv[1] is a tarray even though it's type does not indicate as much.
     * In that the string rep will anyways exist and question of shimmering
     * does not arise.
     */
    if (tcol_affirm(objv[1])) {
        ta_arg = 1;
    } else {
        /* OK, see if it is an option */
        status = Tcl_GetIndexFromObj(NULL, objv[1], gFormatOptions,
                                     "FORMAT", TCL_EXACT, &fmt);
        if (status == TCL_OK)
            ta_arg = 2;
        else
            ta_arg = 1;
        if ((status = tcol_convert(interp, objv[ta_arg])) != TCL_OK)
            return status;
    }
       
    if ((objc - ta_arg) < 2 || (objc - ta_arg) > 3)
        goto badargs;

    switch (objc - ta_arg - 1) {
    case 1:
        switch (ta_obj_to_indices(interp, objv[ta_arg+1], 0, 0, &pindices, NULL)) {
        case TA_INDEX_TYPE_ERROR:
            return TCL_ERROR;
        case TA_INDEX_TYPE_INT:
            Tcl_Panic("ta_obj_to_indices returned TA_INDEX_TYPE_INT when passed NULL pointer");
            break;
        case TA_INDEX_TYPE_THDR:
            tcol = tcol_get(interp, objv[ta_arg], pindices, fmt);
            thdr_decr_refs(pindices);
            break;
        }
        break;
    case 2:
        /* Range LOW HIGH */
        /* TBD - reuse the thdr_t if not shared */
        status = ta_fix_range_bounds(interp, tcol_occupancy(objv[ta_arg]),
                                         objv[ta_arg+1], objv[ta_arg+2],
                                         &low, &count);
        if (status != TCL_OK)
            return TCL_ERROR;
        tcol = tcol_range(interp, objv[ta_arg], low, count, fmt);
        break;
    default:
        goto badargs;
    }

    if (tcol) {
        Tcl_SetObjResult(interp, tcol);
        return TCL_OK;
    } else
        return TCL_ERROR;

badargs:
    Tcl_WrongNumArgs(interp, 1, objv, "?OPTIONS? TCOLUMN (LOW ?HIGH? | INDEXLIST)");
    return TCL_ERROR;

}

critcl::ccommand tarray::column::sort {} {
    int flags, status;
    Tcl_Obj *tcol;
    Tcl_Obj *otarget = NULL;

    if (objc < 2) {
	Tcl_WrongNumArgs(interp, 1, objv, "?options? tarray");
	return TCL_ERROR;
    }

    if ((status = tcol_parse_sort_options(interp, objc, objv, &flags, &otarget)) != TCL_OK)
        return status;

    tcol = objv[objc-1];
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(tcol);

    if (flags & TA_SORT_INDIRECT) {
        TA_ASSERT(otarget != NULL);
        status = tcol_sort_indirect(interp, tcol, otarget, flags);
    } else
        status = tcol_sort(interp, tcol, flags);

    return ta_return_result(interp, status, tcol);
}

critcl::ccommand tarray::column::vsort {} {
    Tcl_Obj *tcol;
    int status;
    int flags;
    Tcl_Obj *otarget = NULL;

    if (objc < 2) {
    	Tcl_WrongNumArgs(interp, 1, objv, "?options? COLUMNVAR");
        return TCL_ERROR;
    }

    if ((status = tcol_parse_sort_options(interp, objc, objv, &flags, &otarget)) != TCL_OK)
        return status;

    if (flags & TA_SORT_INDICES) {
        Tcl_SetResult(interp, "Invalid option -indices", TCL_STATIC);
        return TCL_ERROR;
    }

    tcol = Tcl_ObjGetVar2(interp, objv[objc-1], NULL, TCL_LEAVE_ERR_MSG);
    if (tcol == NULL)
        return TCL_ERROR;
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(tcol);

    if (flags & TA_SORT_INDIRECT) {
        TA_ASSERT(otarget != NULL);
        status = tcol_sort_indirect(interp, tcol, otarget, flags);
    } else {
        status = tcol_sort(interp, tcol, flags);
    }

    return ta_set_var_result(interp, status, objv[objc-1], tcol);
}

critcl::cproc tarray::column::bitsset {Tcl_Interp* interp TArrayObjPtr tcol} ok {
    thdr_t *thdrP = TARRAYHDR(tcol);
    if (thdrP->type != TA_BOOLEAN) {
        Tcl_SetResult(interp, "tarray type is not boolean", TCL_STATIC);
        return TCL_ERROR;
    }
        
    Tcl_SetObjResult(
        interp,
        Tcl_NewIntObj(ba_count_ones(THDRELEMPTR(thdrP, ba_t, 0), 0, thdrP->used)));
    return TCL_OK;
}

critcl::ccommand tarray::column::search tcol_search_cmd

critcl::ccommand tarray::column::insert {} {
    Tcl_Obj *tcol;
    int status;

    if (objc != 4 && objc != 5) {
    	Tcl_WrongNumArgs(interp, 1, objv, "COLUMN (VALUES POSITION | VALUE POSITION COUNT)");
	return TCL_ERROR;
    }
    
    tcol = objv[1];
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(tcol);
    status = tcol_insert_obj(interp, tcol, objv[2], objv[3], objc == 4 ? NULL : objv[4]);
    return ta_return_result(interp, status, tcol);
}

critcl::ccommand tarray::column::vinsert {} {
    Tcl_Obj *tcol;
    int status;

    if (objc != 4 && objc != 5) {
    	Tcl_WrongNumArgs(interp, 1, objv, "COLUMNVAR (VALUES POSITION | VALUE POSITION COUNT)");
	return TCL_ERROR;
    }
    
    tcol = Tcl_ObjGetVar2(interp, objv[1], NULL, TCL_LEAVE_ERR_MSG);
    if (tcol == NULL)
        return TCL_ERROR;
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(tcol);
    status = tcol_insert_obj(interp, tcol, objv[2], objv[3], objc == 4 ? NULL : objv[4]);
    return ta_set_var_result(interp, status, objv[1], tcol);
}

critcl::cproc tarray::column::put {Tcl_Interp* interp Tcl_Obj* COLUMN Tcl_Obj* VALUES Tcl_Obj* {FIRST 0}} ok {
    Tcl_Obj *tcol;
    int status;

    tcol = COLUMN;
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(tcol);

    /* Values may be given as a list or a tarray */
    if (tcol_convert(NULL, VALUES) == TCL_OK) {
        /* It is a tarray. Verify the right type */
        status = tcol_copy_thdr(interp, tcol, TARRAYHDR(VALUES), FIRST, 0);
    } else {
        status = tcol_put_objs(interp, tcol, VALUES, FIRST, 0);
    }

    return ta_return_result(interp, status, tcol);
}

critcl::cproc tarray::column::vput {Tcl_Interp* interp Tcl_Obj* COLUMNVAR Tcl_Obj* VALUES Tcl_Obj* {FIRST 0}} ok {
    Tcl_Obj *tcol;
    int status;

    tcol = Tcl_ObjGetVar2(interp, COLUMNVAR, NULL, TCL_LEAVE_ERR_MSG);
    if (tcol == NULL)
        return TCL_ERROR;
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(tcol);

    /* Values may be given as a list or a tarray */
    if (tcol_convert(NULL, VALUES) == TCL_OK) {
        /* It is a tarray */
        status = tcol_copy_thdr(interp, tcol, TARRAYHDR(VALUES), FIRST, 0);
    } else {
        status = tcol_put_objs(interp, tcol, VALUES, FIRST, 0);
    }
    return ta_set_var_result(interp, status, COLUMNVAR, tcol);
}

critcl::cproc tarray::column::place {Tcl_Interp* interp Tcl_Obj* COLUMN Tcl_Obj* VALUES Tcl_Obj* INDICES} ok {
    int status;

    if (Tcl_IsShared(COLUMN))
        COLUMN = Tcl_DuplicateObj(COLUMN);

    if (tcol_convert(NULL, VALUES) == TCL_OK)
        status = tcol_place_indices(interp, COLUMN, VALUES, INDICES);
    else
        status = tcol_place_objs(interp, COLUMN, VALUES, INDICES);
    return ta_return_result(interp, status, COLUMN);
}

critcl::cproc tarray::column::vplace {Tcl_Interp* interp Tcl_Obj* COLUMNVAR Tcl_Obj* VALUES Tcl_Obj* INDICES} ok {
    Tcl_Obj *tcol;
    int status;

    tcol = Tcl_ObjGetVar2(interp, COLUMNVAR, NULL, TCL_LEAVE_ERR_MSG);
    if (tcol == NULL)
        return TCL_ERROR;
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(tcol);
    
    if (tcol_convert(NULL, VALUES) == TCL_OK)
        status = tcol_place_indices(interp, tcol, VALUES, INDICES);
    else
        status = tcol_place_objs(interp, tcol, VALUES, INDICES);

    return ta_set_var_result(interp, status, COLUMNVAR, tcol);
}

critcl::ccommand tarray::column::fill {} {
    Tcl_Obj *tcol;
    int status;

    if (objc != 4 && objc != 5) {
	Tcl_WrongNumArgs(interp, 1, objv, "COLUMN VALUE (INDEXLIST | LOW ?HIGH?)");
	return TCL_ERROR;
    }

    tcol = objv[1];
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(tcol);

    status = tcol_fill_obj(interp, tcol, objv[2], objv[3],
                               objc == 5 ? objv[4] : NULL);
    return ta_return_result(interp, status, tcol);
}

critcl::ccommand tarray::column::vfill {} {
    Tcl_Obj *tcol;
    int status;

    if (objc != 4 && objc != 5) {
	Tcl_WrongNumArgs(interp, 1, objv, "TCOLUMNVAR VALUE (INDEXLIST | LOW ?HIGH?)");
	return TCL_ERROR;
    }
    
    tcol = Tcl_ObjGetVar2(interp, objv[1], NULL, TCL_LEAVE_ERR_MSG);
    if (tcol == NULL)
        return TCL_ERROR;
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(tcol);

    status = tcol_fill_obj(interp, tcol, objv[2], objv[3], objc == 5 ? objv[4] : NULL);
    return ta_set_var_result(interp, status, objv[1], tcol);
}

critcl::cproc tarray::column::reverse {Tcl_Interp* interp Tcl_Obj* tcol} ok {
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(tcol);
    return ta_return_result(interp, tcol_reverse(interp, tcol), tcol);
}
    
critcl::cproc tarray::column::vreverse {Tcl_Interp* interp Tcl_Obj* ovar} ok {
    Tcl_Obj *tcol;

    tcol = Tcl_ObjGetVar2(interp, ovar, NULL, TCL_LEAVE_ERR_MSG);
    if (tcol == NULL)
        return TCL_ERROR;
    if (Tcl_IsShared(tcol))
        tcol = Tcl_DuplicateObj(tcol);

    return ta_set_var_result(interp, tcol_reverse(interp, tcol), ovar, tcol);
}

critcl::ccommand tarray::column::intersect3 {} {
    Tcl_Obj *acol, *bcol;
    thdr_t *athdr, *bthdr;
    thdr_t *aintersectb=NULL, *aminusb=NULL, *bminusa=NULL;
    int atype;
    unsigned char order, a_current_order, b_current_order;
    int free_acol = 0, free_bcol = 0;
    TCL_RESULT status = TCL_ERROR;
    int sort_flags, nmin, nocase = 0;
    Tcl_Obj *results[3];

    if (objc != 3 && objc != 4) {
	Tcl_WrongNumArgs(interp, 1, objv, "?-nocase? COLUMNA COLUMNB");
	return TCL_ERROR;
    }

    if (objc == 4) {
        if (! ta_strequal(Tcl_GetString(objv[1]), "-nocase"))
            return ta_invalid_opt_error(interp, "-nocase");
        nocase = 1;
    }

    acol = objv[objc-2];
    bcol = objv[objc-1];

    athdr = TARRAYHDR(acol);
    atype = athdr->type;
    bthdr = TARRAYHDR(bcol);

    if (athdr == bthdr) {
        /* TBD - also special case when either column is zero size */
        /* Optimize same object. Dunno how common this might be but ... */
        results[0] = acol;
        aminusb = thdr_alloc(interp, atype, 0);
        if (aminusb == NULL)
            goto vamoose;
        results[1] = tcol_new(aminusb);
        results[2] = results[1];
        Tcl_SetObjResult(interp, Tcl_NewListObj(3, results));
        return TCL_OK;
    }

    if (atype != bthdr->type)
        return ta_mismatched_types_error(interp, atype, bthdr->type);

    a_current_order = athdr->sort_order;
    b_current_order = bthdr->sort_order;

    /* Ensure both columns are in same sort order */
    order = THDR_UNSORTED;
    if (atype == TA_ANY) {
        /* TA_ANY separated because we have to deal with nocase */
        if (a_current_order == b_current_order) {
            /* If unsorted or sorted with different case-sensitivity, resort */
            if ((nocase && SORT_ORDER_IS_NOCASE(a_current_order)) ||
                (!nocase && SORT_ORDER_IS_CASE(a_current_order))) {
                /* Both sorted appropriately. Lucky us, nought to do */
                order = a_current_order;
            } else {
                /* Either unsorted or wrong case sensitivity. We have to
                   sort/resort but try to make it as close to current
                   order for efficiency
                */
                if (SORT_ORDER_IS_DESCENDING(a_current_order))
                    order = nocase ? THDR_SORTED_DESCENDING_NOCASE : THDR_SORTED_DESCENDING;
                else
                    order = nocase ? THDR_SORTED_ASCENDING_NOCASE : THDR_SORTED_ASCENDING;
            }
        } else {
            /* Sort state is different for a and b */
            if ((nocase && SORT_ORDER_IS_NOCASE(a_current_order)) ||
                (!nocase && SORT_ORDER_IS_CASE(a_current_order))) {
                /* a is sorted appropriately. */
                if ((nocase && SORT_ORDER_IS_NOCASE(b_current_order)) ||
                    (!nocase && SORT_ORDER_IS_CASE(b_current_order))) {
                    /* b is also sorted appropriately but different from a, choose to sort smaller one.*/
                    order = athdr->used < bthdr->used ? b_current_order : a_current_order;
                } else
                    order = a_current_order; /* Only b needs sorting */
            } else {
                /* a is not sorted appropriately. */
                if ((nocase && SORT_ORDER_IS_NOCASE(b_current_order)) ||
                    (!nocase && SORT_ORDER_IS_CASE(b_current_order))) {
                    /* But b is so use its order */
                    order = b_current_order; /* sort a as b */
                } else {
                    /* Neither is sorted appropriately. Both will have to
                       be sorted. Still try to optimize by picking
                       something closer to the bigger column.
                    */
                    if (athdr->used >= bthdr->used) {
                        if (SORT_ORDER_IS_DESCENDING(a_current_order))
                            order = nocase ? THDR_SORTED_DESCENDING_NOCASE : THDR_SORTED_DESCENDING;
                        else if (SORT_ORDER_IS_ASCENDING(a_current_order))
                            order = nocase ? THDR_SORTED_ASCENDING_NOCASE : THDR_SORTED_ASCENDING;
                    }  
                    if (order == 0) {
                        if (SORT_ORDER_IS_DESCENDING(b_current_order))
                            order = nocase ? THDR_SORTED_DESCENDING_NOCASE : THDR_SORTED_DESCENDING;
                        else
                            order = nocase ? THDR_SORTED_ASCENDING_NOCASE : THDR_SORTED_ASCENDING;
                    }
                }
            }
        }
    } else if (atype != TA_BOOLEAN) {
        if (a_current_order == b_current_order) {
            if (a_current_order == THDR_UNSORTED)
                order = THDR_SORTED_ASCENDING;/* Both need sorting */
            else
                order = a_current_order;
        }
        else {
            /* a and b not sorted the same */
            if (a_current_order == THDR_UNSORTED)
                order = b_current_order; /* Sort a same as b */
            else if (bthdr->sort_order == THDR_UNSORTED)
                order = a_current_order; /* Sort b same as a */
            else {
                /* Both are sorted but not in same order. Resort the smaller */
                if (athdr->used < bthdr->used)
                    order = b_current_order;
                else
                    order = a_current_order;
            }
        }
    }
    
    if (atype != TA_BOOLEAN) {
        switch (order) {
        case THDR_SORTED_ASCENDING:         sort_flags = 0; break;
        case THDR_SORTED_DESCENDING:        sort_flags = TA_SORT_DECREASING; break;
        case THDR_SORTED_ASCENDING_NOCASE:  sort_flags = TA_SORT_NOCASE; break;
        case THDR_SORTED_DESCENDING_NOCASE: sort_flags = TA_SORT_NOCASE | TA_SORT_DECREASING; break;
        default:
            Tcl_Panic("Unexpected sort order %d in function intersect", order);
        }
                                                                        
        if (a_current_order != order) {
            /* a needs to be sorted. Needs to be unshared to do so */
            if (Tcl_IsShared(acol)) {
                acol = Tcl_DuplicateObj(acol);
                free_acol = 1;
            }
            if (tcol_sort(interp, acol, sort_flags) != TCL_OK)
                goto vamoose;
            athdr = TARRAYHDR(acol);
        }

        if (b_current_order != order) {
            /* b needs to be sorted. Needs to be unshared to do so */
            if (Tcl_IsShared(bcol)) {
                bcol = Tcl_DuplicateObj(bcol);
                free_bcol = 1;
            }
            if (tcol_sort(interp, bcol, sort_flags) != TCL_OK)
                goto vamoose;
            bthdr = TARRAYHDR(bcol);
        }
    }

    /*
     * Create 3 arrays to hold the a intersect b, a-b, b-a.
     * Max num elems in intersect is smaller of two arrays.
     * Max num in a-b and b-a is num in a and b respectively.
     */
    nmin = athdr->used;
    if (nmin > bthdr->used)
        nmin = bthdr->used;

    aintersectb = thdr_alloc(interp, atype, nmin);
    aminusb = thdr_alloc(interp, atype, athdr->used);
    bminusa = thdr_alloc(interp, atype, bthdr->used);
    if (aintersectb == NULL || aminusb == NULL || bminusa == NULL)
        goto vamoose;

    /* IMPORTANT - INTERSECT must NOT error out else ref counts for
       type TA_ANY will be broken as they are updated later */
#define EQ(x_, y_) ((x_) == (y_))
#define LT(x_, y_) ((x_) < (y_))
#define INTERSECT(t_)                                                   \
    do {                                                                \
        t_ *pintersect = THDRELEMPTR(aintersectb, t_, 0);               \
        t_ *paminusb = THDRELEMPTR(aminusb, t_, 0);                     \
        t_ *pbminusa = THDRELEMPTR(bminusa, t_, 0);                     \
        t_ *a = THDRELEMPTR(athdr, t_, 0);                              \
        t_ *b = THDRELEMPTR(bthdr, t_, 0);                              \
        t_ *aend = a + athdr->used;                                     \
        t_ *bend = b + bthdr->used;                                     \
                                                                        \
        if (SORT_ORDER_IS_ASCENDING(order)) {                           \
            while (a < aend && b < bend) {                              \
                if (EQ(*a, *b)) {                                       \
                    *pintersect++ = *a;                                 \
                    ++a;                                                \
                    ++b;                                                \
                } else if (LT(*a, *b)) {                                \
                    *paminusb++ = *a++;                                 \
                } else {                                                \
                    *pbminusa++ = *b++;                                 \
                }                                                       \
            }                                                           \
        } else {                                                        \
            /* Sorted in descending order */                            \
            while (a < aend && b < bend) {                              \
                if (EQ(*a, *b)) {                                       \
                    *pintersect++ = *a;                                 \
                    ++a;                                                \
                    ++b;                                                \
                } else if (LT(*a, *b)) {                                \
                    *pbminusa++ = *b++;                                 \
                } else {                                                \
                    *paminusb++ = *a++;                                 \
                }                                                       \
            }                                                           \
        }                                                               \
                                                                        \
        /* Now copy left over elements */                               \
        while (a < aend) {                                              \
            *paminusb++ = *a++;                                         \
        }                                                               \
        while (b < bend) {                                              \
            *pbminusa++ = *b++;                                         \
        }                                                               \
                                                                        \
        aintersectb->used = pintersect - THDRELEMPTR(aintersectb, t_, 0); \
        aminusb->used = paminusb - THDRELEMPTR(aminusb, t_, 0);         \
        bminusa->used = pbminusa - THDRELEMPTR(bminusa, t_, 0);         \
    } while (0)

    switch (atype) {
    case TA_BOOLEAN:
       {
           int ones_in_a, ones_in_b, zeroes_in_a, zeroes_in_b;
           int ones, zeroes;
           ba_t *pbits;
           ones_in_a = ba_count_ones(THDRELEMPTR(athdr, ba_t, 0), 0, athdr->used);
           ones_in_b = ba_count_ones(THDRELEMPTR(bthdr, ba_t, 0), 0, bthdr->used);
           zeroes_in_a = athdr->used - ones_in_a;
           zeroes_in_b = bthdr->used - ones_in_b;
           ones = ones_in_a < ones_in_b ? ones_in_a : ones_in_b;
           zeroes = zeroes_in_a < zeroes_in_b ? zeroes_in_a : zeroes_in_b;
           pbits = THDRELEMPTR(aintersectb, ba_t, 0);
           ba_fill(pbits, 0, zeroes, 0);
           ba_fill(pbits, zeroes, ones, 1);
           aintersectb->used = ones + zeroes;
           pbits = THDRELEMPTR(aminusb, ba_t, 0);
           if (zeroes_in_a > zeroes) {
               aminusb->used = zeroes_in_a - zeroes;
               ba_fill(pbits, 0, aminusb->used, 0);
           }
           if (ones_in_a > ones) {
               ba_fill(pbits, aminusb->used, ones_in_a - ones, 1);
               aminusb->used += ones_in_a - ones;
           }
           pbits = THDRELEMPTR(bminusa, ba_t, 0);
           if (zeroes_in_b > zeroes) {
               bminusa->used = zeroes_in_b - zeroes;
               ba_fill(pbits, 0, bminusa->used, 0);
           }
           if (ones_in_b > ones) {
               ba_fill(pbits, bminusa->used, ones_in_b - ones, 1);
               bminusa->used += ones_in_b - ones;
           }
       }
        break;
    case TA_UINT:
        INTERSECT(unsigned int);
        break;
    case TA_INT:
        INTERSECT(int);
        break;
    case TA_WIDE:
        INTERSECT(Tcl_WideInt);
        break;
    case TA_DOUBLE:
        INTERSECT(double);
        break;
    case TA_BYTE:
        INTERSECT(unsigned char);
        break;
    case TA_ANY:
#undef EQ
#undef LT
#define EQ(x_, y_) (ta_obj_compare((x_), (y_), nocase) == 0)
#define LT(x_, y_) (ta_obj_compare((x_), (y_), nocase) < 0)
        INTERSECT(Tcl_Obj *);
        /* Need to update ref counts */
        thdr_incr_obj_refs(aintersectb, 0, aintersectb->used);
        thdr_incr_obj_refs(aminusb, 0, aminusb->used);
        thdr_incr_obj_refs(bminusa, 0, bminusa->used);
        break;
    }

    TA_ASSERT(aintersectb->used <= aintersectb->usable);
    TA_ASSERT(aminusb->used <= aminusb->usable);
    TA_ASSERT(bminusa->used <= bminusa->usable);
           
    /* TBD - shrink arrays if underutilized */

    results[0] = tcol_new(aintersectb);
    results[1] = tcol_new(aminusb);
    results[2] = tcol_new(bminusa);
    Tcl_SetObjResult(interp, Tcl_NewListObj(3, results));

    status = TCL_OK;

vamoose:
    if (free_acol)
        Tcl_DecrRefCount(acol);
    if (free_bcol)
        Tcl_DecrRefCount(bcol);
    if (status != TCL_OK) {
        if (aintersectb)
            thdr_decr_refs(aintersectb);
        if (aminusb)
            thdr_decr_refs(aminusb);
        if (bminusa)
            thdr_decr_refs(bminusa);
    }
    return status;
}

critcl::cproc tarray::table::put {Tcl_Interp* interp Tcl_Obj* GRID Tcl_Obj* VALUES Tcl_Obj* {FIRST 0}} ok {
    Tcl_Obj *table;
    int status;

    table = GRID;
    if (Tcl_IsShared(table))
        table = Tcl_DuplicateObj(table);

    /* Values may be given as a table or a Tcl list */
    if (table_convert(NULL, VALUES) == TCL_OK)
        status = table_copy(interp, table, VALUES, FIRST, 0);
    else
        status = table_put_objs(interp, table, VALUES, FIRST, 0);

    return ta_return_result(interp, status, table);
}

critcl::cproc tarray::table::vput {Tcl_Interp* interp Tcl_Obj* GRIDVAR Tcl_Obj* VALUES Tcl_Obj* {FIRST 0}} ok {
    Tcl_Obj *table;
    int status;

    table = Tcl_ObjGetVar2(interp, GRIDVAR, NULL, TCL_LEAVE_ERR_MSG);
    if (table == NULL)
        return TCL_ERROR;
    if (Tcl_IsShared(table))
        table = Tcl_DuplicateObj(table);

    /* Values may be given as a table or a Tcl list */
    if (table_convert(NULL, VALUES) == TCL_OK)
        status = table_copy(interp, table, VALUES, FIRST, 0);
    else
        status = table_put_objs(interp, table, VALUES, FIRST, 0);

    return ta_set_var_result(interp, status, GRIDVAR, table);
}

critcl::ccommand tarray::table::fill {} {
    Tcl_Obj *table;
    int status;

    if (objc != 4 && objc != 5) {
	Tcl_WrongNumArgs(interp, 1, objv, "GRID VALUES (INDEXLIST | LOW ?HIGH?");
	return TCL_ERROR;
    }

    table = objv[1];
    if (Tcl_IsShared(table))
        table = Tcl_DuplicateObj(table);

    status = table_fill_obj(interp, table, objv[2], objv[3], 
                            objc == 5 ? objv[4] : NULL, 0);

    return ta_return_result(interp, status, table);
}

critcl::ccommand tarray::table::vfill {} {
    int status;
    Tcl_Obj *table;

    if (objc != 4 && objc != 5) {
	Tcl_WrongNumArgs(interp, 1, objv, "GRIDVAR VALUES (INDEXLIST | LOW ?HIGH?");
	return TCL_ERROR;
    }

    table = Tcl_ObjGetVar2(interp, objv[1], NULL, TCL_LEAVE_ERR_MSG);
    if (table == NULL)
        return TCL_ERROR;
    if (Tcl_IsShared(table))
        table = Tcl_DuplicateObj(table);

    status = table_fill_obj(interp, table, objv[2], objv[3], 
                            objc == 5 ? objv[4] : NULL, 0);
    return ta_set_var_result(interp, status, objv[1], table);
}

critcl::ccommand tarray::table::delete {} {
    Tcl_Obj *table;
    int status;

    if (objc != 3 && objc != 4) {
	Tcl_WrongNumArgs(interp, 1, objv, "GRID (INDEXLIST | LOW ?HIGH?)");
	return TCL_ERROR;
    }
    
    table = objv[1];
    if (Tcl_IsShared(table))
        table = Tcl_DuplicateObj(table);
    status = table_delete(interp, table, objv[2], objc == 4 ? objv[3] : NULL);
    return ta_return_result(interp, status, table);
}


critcl::ccommand tarray::table::vdelete {} {
    Tcl_Obj *table;
    int status;

    if (objc != 3 && objc != 4) {
	Tcl_WrongNumArgs(interp, 1, objv, "GRIDVAR (INDEXLIST | LOW ?HIGH?)");
	return TCL_ERROR;
    }
    
    table = Tcl_ObjGetVar2(interp, objv[1], NULL, TCL_LEAVE_ERR_MSG);
    if (table == NULL)
        return TCL_ERROR;
    if (Tcl_IsShared(table))
        table = Tcl_DuplicateObj(table);
    status = table_delete(interp, table, objv[2], objc == 4 ? objv[3] : NULL);
    return ta_set_var_result(interp, status, objv[1], table);
}

critcl::ccommand tarray::table::get {} {
    Tcl_Obj *table;
    int low, count;
    int status;
    int fmt = TA_FORMAT_TARRAY;
    int ta_arg;
    thdr_t *pindices;

    if (objc < 3)
        goto badargs;
    
    /*
     * Parsing is ambiguous. We do not want check if objv[1] is an option
     * directly because it might shimmer a huge tarray into a string.
     * So check for options only if not a tarray. Note it is possible that
     * objv[1] is a tarray even though it's type does not indicate as much.
     * In that the string rep will anyways exist and question of shimmering
     * does not arise.
     */
    if (tcol_affirm(objv[1])) {
        /* Note we check for tcol_affirm, not table_affirm */
        ta_arg = 1;
    } else {
        /* OK, see if it is an option */
        status = Tcl_GetIndexFromObj(NULL, objv[1], gFormatOptions,
                                     "FORMAT", TCL_EXACT, &fmt);
        if (status == TCL_OK)
            ta_arg = 2;
        else
            ta_arg = 1;
    }
       
    if ((objc - ta_arg) < 2 || (objc - ta_arg) > 3)
        goto badargs;

    if ((status = table_convert(interp, objv[ta_arg])) != TCL_OK)
        return status;

    switch (objc - ta_arg - 1) {
    case 1:
        switch (ta_obj_to_indices(interp, objv[ta_arg+1], 0, 0, &pindices, NULL)) {
        case TA_INDEX_TYPE_ERROR:
            return TCL_ERROR;
        case TA_INDEX_TYPE_INT:
            Tcl_Panic("ta_obj_to_indices returned TA_INDEX_TYPE_INT when passed NULL pointer");
            break;
        case TA_INDEX_TYPE_THDR:
            table = table_get(interp, objv[ta_arg], pindices, fmt);
            thdr_decr_refs(pindices);
            break;
        }
        break;
    case 2:
        /* Range LOW HIGH */
        status = ta_fix_range_bounds(interp, table_length(objv[ta_arg]),
                                         objv[ta_arg+1], objv[ta_arg+2],
                                         &low, &count);
        if (status != TCL_OK)
            return status;
        table = table_range(interp, objv[ta_arg], low, count, fmt);
        break;
    default:
        goto badargs;
    }

    if (table) {
        Tcl_SetObjResult(interp, table);
        return TCL_OK;
    } else
        return TCL_ERROR;

badargs:
    Tcl_WrongNumArgs(interp, 1, objv, "?OPTIONS? TCOLUMN (LOW ?HIGH? | INDEXLIST)");
    return TCL_ERROR;

}

critcl::cproc tarray::table::index {Tcl_Interp* interp Tcl_Obj* GRID Tcl_Obj* INDEX} ok {
    int ix;
    Tcl_Obj *o;

    if (table_convert(interp, GRID) == TCL_OK) {
        int end = table_length(GRID) - 1;
	if (ta_convert_index(interp, INDEX, &ix, end, 0, end) == TCL_OK) {
            o = table_index(interp, GRID, ix);
            if (o) {
                Tcl_SetObjResult(interp, o);
                return TCL_OK;
            }
        }
    }
    return TCL_ERROR;
}


critcl::ccommand tarray::table::insert {} {
    Tcl_Obj *table;
    int status;

    if (objc != 4 && objc != 5) {
    	Tcl_WrongNumArgs(interp, 1, objv, "GRID (VALUES POSITION | VALUE POSITION COUNT)");
	return TCL_ERROR;
    }
    
    table = objv[1];
    if (Tcl_IsShared(table))
        table = Tcl_DuplicateObj(table);
    status = table_insert_obj(interp, table, objv[2], objv[3], objc == 4 ? NULL : objv[4]);
    return ta_return_result(interp, status, table);
}

critcl::ccommand tarray::table::vinsert {} {
    Tcl_Obj *table;
    int status;

    if (objc != 4 && objc != 5) {
    	Tcl_WrongNumArgs(interp, 1, objv, "COLUMNVAR (VALUES POSITION | VALUE POSITION COUNT)");
	return TCL_ERROR;
    }
    
    table = Tcl_ObjGetVar2(interp, objv[1], NULL, TCL_LEAVE_ERR_MSG);
    if (table == NULL)
        return TCL_ERROR;
    if (Tcl_IsShared(table))
        table = Tcl_DuplicateObj(table);
    status = table_insert_obj(interp, table, objv[2], objv[3], objc == 4 ? NULL : objv[4]);
    return ta_set_var_result(interp, status, objv[1], table);
}

critcl::cproc tarray::table::place {Tcl_Interp* interp Tcl_Obj* GRID Tcl_Obj* VALUES Tcl_Obj* INDICES} ok {
    int status;

    if (Tcl_IsShared(GRID))
        GRID = Tcl_DuplicateObj(GRID);

    if (table_convert(NULL, VALUES) == TCL_OK)
        status = table_place_indices(interp, GRID, VALUES, INDICES);
    else
        status = table_place_objs(interp, GRID, VALUES, INDICES);
    return ta_return_result(interp, status, GRID);
}

critcl::cproc tarray::table::vplace {Tcl_Interp* interp Tcl_Obj* GRIDVAR Tcl_Obj* VALUES Tcl_Obj* INDICES} ok {
    int status;
    Tcl_Obj *table;

    table = Tcl_ObjGetVar2(interp, GRIDVAR, NULL, TCL_LEAVE_ERR_MSG);
    if (table == NULL)
        return TCL_ERROR;
    if (Tcl_IsShared(table))
        table = Tcl_DuplicateObj(table);
    
    if (table_convert(NULL, VALUES) == TCL_OK)
        status = table_place_indices(interp, table, VALUES, INDICES);
    else
        status = table_place_objs(interp, table, VALUES, INDICES);
    return ta_set_var_result(interp, status, GRIDVAR, table);
}

critcl::cproc tarray::table::reverse {Tcl_Interp* interp Tcl_Obj* table} ok {
    if (Tcl_IsShared(table))
        table = Tcl_DuplicateObj(table);

    return ta_return_result(interp, table_reverse(interp, table), table);
}
    
critcl::cproc tarray::table::vreverse {Tcl_Interp* interp Tcl_Obj* ovar} ok {
    Tcl_Obj *table;

    table = Tcl_ObjGetVar2(interp, ovar, NULL, TCL_LEAVE_ERR_MSG);
    if (table == NULL)
        return TCL_ERROR;

    if (Tcl_IsShared(table))
        table = Tcl_DuplicateObj(table);

    return ta_set_var_result(interp, table_reverse(interp, table), ovar, table);
}

# TBD - document and test
critcl::cproc tarray::table::width {Tcl_Interp* interp Tcl_Obj* TABLE} ok {
    TCL_RESULT status;
    status = table_convert(interp, TABLE);
    if (status == TCL_OK)
        Tcl_SetObjResult(interp, Tcl_NewIntObj(table_width(TABLE)));
    return status;
}

critcl::cproc tarray::table::size {Tcl_Interp* interp Tcl_Obj* TABLE} ok {
    TCL_RESULT status;
    status = table_convert(interp, TABLE);
    if (status == TCL_OK)
        Tcl_SetObjResult(interp, Tcl_NewIntObj(table_length(TABLE)));
    return status;
}

package provide tarray 0.3

critcl::load
