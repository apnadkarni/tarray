#
# Copyright (c) 2012-2015, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license
#

proc win32_target {} {
    switch -glob -- [critcl::targetconfig] {
        win32-* -
        mingw* { return 1 }
        default { return 0 }
    }
}

################################################################
# Set up configuration options for the package
array set build_opts {}

# Enable compiling of unsupported functions
set build_opts(unsupported) 1

# Figure out whether parallelized operations are to be enabled.
# On Windows, parallelized operations are enabled via native Win32 calls.
# Other platforms depend on the presence of libdispatch.
if {[win32_target]} {
    set build_opts(mt_enable) 1
    set build_opts(use_libdispatch) 0
} else {
    if {[critcl::check {
        #include <dispatch/dispatch.h>
    }]} {
        set build_opts(mt_enable) 1
        set build_opts(use_libdispatch) 1
    } else {
        set build_opts(mt_enable) 0
        set build_opts(use_libdispatch) 0
    }
}


################################################################
# Standard critcl meta information

package require critcl 3.1
critcl::buildrequirement {
    package require critcl::class
}

critcl::license "Ashok P. Nadkarni"
critcl::summary "Tcl Typed Array Extension"
critcl::description {
    Implements the tarray::column and tarray::table commands providing 
    accessed to typed array values. This extension is targeted towards
    Tcl applications dealing with a large number of data items.
}

critcl::clean_cache
critcl::tcl 8.6

################################################################
# Compiler/platform specific flags
if {[string match "*-gcc" [critcl::targetconfig]] ||
    [string match "linux-*-\\*" [critcl::targetconfig]] ||
    [string match  "mingw*" [critcl::targetconfig]]} {
    # Flags required for gcc
    critcl::cflags -std=gnu99 -Winline
}

if {[win32_target]} {
   # Need XP at least
   critcl::cflags -D_WIN32_WINNT=0x0500
}

critcl::csources bitarray.c column.c errors.c parseargs.c \
    table.c tafold.c tajoin.c taloop.c \
    tamath.c tarandom.c tarbc.c tarray.c tasearch.c tasort.c tastring.c \
    timsort.c timsort_r.c pcg_basic.c \
    rbcStubLib.c

critcl::tsources tabulate.tcl tarray.tcl taprint.tcl tarbc.tcl dbimport.tcl taversion.tcl
critcl::cheaders tarray.h tamath.h bitarray.h timsort.h timsort-impl.h pcg_basic.h rbcDecls.h

critcl::ccode {
#include "tarray.h"
#include <math.h>
#include "pcg_basic.h"
}

if {$build_opts(mt_enable)} {

    if {! $build_opts(use_libdispatch)} {
        critcl::csources mt.c
    }

    critcl::cflags -DTA_MT_ENABLE
}

critcl::ccommand tarray::unsupported::config {} {
}

if {$build_opts(use_libdispatch)} {
    critcl::clibraries -ldispatch
    critcl::cflags -DTA_USE_LIBDISPATCH
}


################################################################
# Type conversions

# WARNING: do not use this where there are multiple parameters to avoid
# shimmering crashes
critcl::argtype TColObjPtr {
    if (tcol_convert(interp, @@) != TCL_OK)
        return TCL_ERROR;
    @A = @@;
}

# WARNING: do not use this where there are multiple parameters to avoid
# shimmering crashes
critcl::argtype TableObjPtr {
    if (table_convert(interp, @@) != TCL_OK)
        return TCL_ERROR;
    @A = @@;
}

################################################################
# Common functions

critcl::ccode {
    typedef Tcl_Obj *TColObjPtr;
    typedef Tcl_Obj *TableObjPtr;

}

################################################################
# Initialization

critcl::cinit {
    ta_real_init(interp);
} {
}

critcl::cdata tarray::unsupported::critcl_info [critcl::showconfig]
# Commented out because will not work when building from TEA
#critcl::cdata tarray::unsupported::hg_id       [exec hg identify]

package provide tarray [source [file join [file dirname [info script]] taversion.tcl]]

critcl::load

#
# Local Variables:
#  compile-command: "envset x64 && tclsh build.tcl extension -config ../src/tarray.cfg -keep -target win32-dev64"
# End:
