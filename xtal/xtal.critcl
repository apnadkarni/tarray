## -*- tcl -*-
##
## Critcl-based C/PARAM implementation of the parsing
## expression grammar
##
##	Xtal
##
## Generated from file	unknown
##            for user  unknown
##
# # ## ### ##### ######## ############# #####################
## Requirements

package require Tcl 8.4
package require critcl
# @sak notprovided xtal
package provide    xtal 0.7

# Note: The implementation of the PARAM virtual machine
#       underlying the C/PARAM code used below is inlined
#       into the generated parser, allowing for direct access
#       and manipulation of the RDE state, instead of having
#       to dispatch through the Tcl interpreter.

# # ## ### ##### ######## ############# #####################
##

namespace eval ::xtal {
    # # ## ### ##### ######## ############# #####################
    ## Supporting code for the main command.

    catch {
	#critcl::cflags -g
	#critcl::debug memory symbols
    }

    # # ## ### ###### ######## #############
    ## RDE runtime, inlined, and made static.

    # This is the C code for the RDE, i.e. the implementation
    # of pt::rde. Only the low-level engine is imported, the
    # Tcl interface layer is ignored.  This generated parser
    # provides its own layer for that.

    critcl::ccode {
	/* -*- c -*- */

	#include <string.h>
	#define SCOPE static

#line 1 "rde_critcl/util.h"

	#ifndef _RDE_UTIL_H
	#define _RDE_UTIL_H 1
	#ifndef SCOPE
	#define SCOPE
	#endif
	#define ALLOC(type)    (type *) ckalloc (sizeof (type))
	#define NALLOC(n,type) (type *) ckalloc ((n) * sizeof (type))
	#undef  RDE_DEBUG
	#define RDE_DEBUG 1
	#undef  RDE_TRACE
	#ifdef RDE_DEBUG
	#define STOPAFTER(x) { static int count = (x); count --; if (!count) { Tcl_Panic ("stop"); } }
	#define XSTR(x) #x
	#define STR(x) XSTR(x)
	#define RANGEOK(i,n) ((0 <= (i)) && (i < (n)))
	#define ASSERT(x,msg) if (!(x)) { Tcl_Panic (msg " (" #x "), in file " __FILE__ " @line " STR(__LINE__));}
	#define ASSERT_BOUNDS(i,n) ASSERT (RANGEOK(i,n),"array index out of bounds: " STR(i) " >= " STR(n))
	#else
	#define STOPAFTER(x)
	#define ASSERT(x,msg)
	#define ASSERT_BOUNDS(i,n)
	#endif
	#ifdef RDE_TRACE
	SCOPE void trace_enter (const char* fun);
	SCOPE void trace_return (const char *pat, ...);
	SCOPE void trace_printf (const char *pat, ...);
	#define ENTER(fun)          trace_enter (fun)
	#define RETURN(format,x)    trace_return (format,x) ; return x
	#define RETURNVOID          trace_return ("%s","(void)") ; return
	#define TRACE0(x)           trace_printf0 x
	#define TRACE(x)            trace_printf x
	#else
	#define ENTER(fun)
	#define RETURN(f,x) return x
	#define RETURNVOID  return
	#define TRACE0(x)
	#define TRACE(x)
	#endif
	#endif 
	

#line 1 "rde_critcl/stack.h"

	#ifndef _RDE_DS_STACK_H
	#define _RDE_DS_STACK_H 1
	typedef void (*RDE_STACK_CELL_FREE) (void* cell);
	typedef struct RDE_STACK_* RDE_STACK;
	static const int RDE_STACK_INITIAL_SIZE = 256;
	#endif 
	

#line 1 "rde_critcl/tc.h"

	#ifndef _RDE_DS_TC_H
	#define _RDE_DS_TC_H 1
	typedef struct RDE_TC_* RDE_TC;
	#endif 
	

#line 1 "rde_critcl/param.h"

	#ifndef _RDE_DS_PARAM_H
	#define _RDE_DS_PARAM_H 1
	typedef struct RDE_PARAM_* RDE_PARAM;
	typedef struct ERROR_STATE {
	    int       refCount;
	    long int  loc;
	    RDE_STACK msg; 
	} ERROR_STATE;
	typedef struct NC_STATE {
	    long int     CL;
	    long int     ST;
	    Tcl_Obj*     SV;
	    ERROR_STATE* ER;
	} NC_STATE;
	#endif 
	

#line 1 "rde_critcl/util.c"

	#ifdef RDE_TRACE
	typedef struct F_STACK {
	    const char*     str;
	    struct F_STACK* down;
	} F_STACK;
	static F_STACK* top   = 0;
	static int      level = 0;
	static void
	push (const char* str)
	{
	    F_STACK* new = ALLOC (F_STACK);
	    new->str = str;
	    new->down = top;
	    top = new;
	    level += 4;
	}
	static void
	pop (void)
	{
	    F_STACK* next = top->down;
	    level -= 4;
	    ckfree ((char*)top);
	    top = next;
	}
	static void
	indent (void)
	{
	    int i;
	    for (i = 0; i < level; i++) {
		fwrite(" ", 1, 1, stdout);
		fflush           (stdout);
	    }
	    if (top) {
		fwrite(top->str, 1, strlen(top->str), stdout);
		fflush                               (stdout);
	    }
	    fwrite(" ", 1, 1, stdout);
	    fflush           (stdout);
	}
	SCOPE void
	trace_enter (const char* fun)
	{
	    push (fun);
	    indent();
	    fwrite("ENTER\n", 1, 6, stdout);
	    fflush                 (stdout);
	}
	static char msg [1024*1024];
	SCOPE void
	trace_return (const char *pat, ...)
	{
	    int len;
	    va_list args;
	    indent();
	    fwrite("RETURN = ", 1, 9, stdout);
	    fflush                   (stdout);
	    va_start(args, pat);
	    len = vsprintf(msg, pat, args);
	    va_end(args);
	    msg[len++] = '\n';
	    msg[len] = '\0';
	    fwrite(msg, 1, len, stdout);
	    fflush             (stdout);
	    pop();
	}
	SCOPE void
	trace_printf (const char *pat, ...)
	{
	    int len;
	    va_list args;
	    indent();
	    va_start(args, pat);
	    len = vsprintf(msg, pat, args);
	    va_end(args);
	    msg[len++] = '\n';
	    msg[len] = '\0';
	    fwrite(msg, 1, len, stdout);
	    fflush             (stdout);
	}
	SCOPE void
	trace_printf0 (const char *pat, ...)
	{
	    int len;
	    va_list args;
	    va_start(args, pat);
	    len = vsprintf(msg, pat, args);
	    va_end(args);
	    msg[len++] = '\n';
	    msg[len] = '\0';
	    fwrite(msg, 1, len, stdout);
	    fflush             (stdout);
	}
	#endif
	

#line 1 "rde_critcl/stack.c"

	typedef struct RDE_STACK_ {
	    long int            max;   
	    long int            top;   
	    RDE_STACK_CELL_FREE freeCellProc; 
	    void**              cell;  
	} RDE_STACK_;
	
	SCOPE RDE_STACK
	rde_stack_new (RDE_STACK_CELL_FREE freeCellProc)
	{
	    RDE_STACK s = ALLOC (RDE_STACK_);
	    s->cell = NALLOC (RDE_STACK_INITIAL_SIZE, void*);
	    s->max  = RDE_STACK_INITIAL_SIZE;
	    s->top  = 0;
	    s->freeCellProc = freeCellProc;
	    return s;
	}
	SCOPE void
	rde_stack_del (RDE_STACK s)
	{
	    if (s->freeCellProc && s->top) {
		long int i;
		for (i=0; i < s->top; i++) {
		    ASSERT_BOUNDS(i,s->max);
		    s->freeCellProc ( s->cell [i] );
		}
	    }
	    ckfree ((char*) s->cell);
	    ckfree ((char*) s);
	}
	SCOPE void
	rde_stack_push (RDE_STACK s, void* item)
	{
	    if (s->top >= s->max) {
		long int new  = s->max ? (2 * s->max) : RDE_STACK_INITIAL_SIZE;
		void**   cell = (void**) ckrealloc ((char*) s->cell, new * sizeof(void*));
		ASSERT (cell,"Memory allocation failure for RDE stack");
		s->max  = new;
		s->cell = cell;
	    }
	    ASSERT_BOUNDS(s->top,s->max);
	    s->cell [s->top] = item;
	    s->top ++;
	}
	SCOPE void*
	rde_stack_top (RDE_STACK s)
	{
	    ASSERT_BOUNDS(s->top-1,s->max);
	    return s->cell [s->top - 1];
	}
	SCOPE void
	rde_stack_pop (RDE_STACK s, long int n)
	{
	    ASSERT (n >= 0, "Bad pop count");
	    if (n == 0) return;
	    if (s->freeCellProc) {
		while (n) {
		    s->top --;
		    ASSERT_BOUNDS(s->top,s->max);
		    s->freeCellProc ( s->cell [s->top] );
		    n --;
		}
	    } else {
		s->top -= n;
	    }
	}
	SCOPE void
	rde_stack_trim (RDE_STACK s, long int n)
	{
	    ASSERT (n >= 0, "Bad trimsize");
	    if (s->freeCellProc) {
		while (s->top > n) {
		    s->top --;
		    ASSERT_BOUNDS(s->top,s->max);
		    s->freeCellProc ( s->cell [s->top] );
		}
	    } else {
		s->top = n;
	    }
	}
	SCOPE void
	rde_stack_drop (RDE_STACK s, long int n)
	{
	    ASSERT (n >= 0, "Bad pop count");
	    if (n == 0) return;
	    s->top -= n;
	}
	SCOPE void
	rde_stack_move (RDE_STACK dst, RDE_STACK src)
	{
	    ASSERT (dst->freeCellProc == src->freeCellProc, "Ownership mismatch");
	    
	    while (src->top > 0) {
		src->top --;
		ASSERT_BOUNDS(src->top,src->max);
		rde_stack_push (dst, src->cell [src->top] );
	    }
	}
	SCOPE void
	rde_stack_get (RDE_STACK s, long int* cn, void*** cc)
	{
	    *cn = s->top;
	    *cc = s->cell;
	}
	SCOPE long int
	rde_stack_size (RDE_STACK s)
	{
	    return s->top;
	}
	

#line 1 "rde_critcl/tc.c"

	typedef struct RDE_TC_ {
	    int       max;   
	    int       num;   
	    char*     str;   
	    RDE_STACK off;   
	} RDE_TC_;
	
	SCOPE RDE_TC
	rde_tc_new (void)
	{
	    RDE_TC tc = ALLOC (RDE_TC_);
	    tc->max   = RDE_STACK_INITIAL_SIZE;
	    tc->num   = 0;
	    tc->str   = NALLOC (RDE_STACK_INITIAL_SIZE, char);
	    tc->off   = rde_stack_new (NULL);
	    return tc;
	}
	SCOPE void
	rde_tc_del (RDE_TC tc)
	{
	    rde_stack_del (tc->off);
	    ckfree (tc->str);
	    ckfree ((char*) tc);
	}
	SCOPE long int
	rde_tc_size (RDE_TC tc)
	{
	    return rde_stack_size (tc->off);
	}
	SCOPE void
	rde_tc_clear (RDE_TC tc)
	{
	    tc->num   = 0;
	    rde_stack_trim (tc->off,  0);
	}
	SCOPE char*
	rde_tc_append (RDE_TC tc, char* string, long int len)
	{
	    long int base = tc->num;
	    long int off  = tc->num;
	    char* ch;
	    int clen;
	    Tcl_UniChar uni;
	    if (len < 0) {
		len = strlen (string);
	    }
	    
	    if (!len) {
		return tc->str + base;
	    }
	    
	    if ((tc->num + len) >= tc->max) {
		int   new = len + (tc->max ? (2 * tc->max) : RDE_STACK_INITIAL_SIZE);
		char* str = ckrealloc (tc->str, new * sizeof(char));
		ASSERT (str,"Memory allocation failure for token character array");
		tc->max = new;
		tc->str = str;
	    }
	    tc->num += len;
	    ASSERT_BOUNDS(tc->num,tc->max);
	    ASSERT_BOUNDS(off,tc->max);
	    ASSERT_BOUNDS(off+len-1,tc->max);
	    ASSERT_BOUNDS(off+len-1,tc->num);
	    memcpy (tc->str + off, string, len);
	    
	    ch = string;
	    while (ch < (string + len)) {
		ASSERT_BOUNDS(off,tc->num);
		rde_stack_push (tc->off,  (void*) off);
		clen = Tcl_UtfToUniChar (ch, &uni);
		off += clen;
		ch  += clen;
	    }
	    return tc->str + base;
	}
	SCOPE void
	rde_tc_get (RDE_TC tc, int at, char** ch, long int* len)
	{
	    long int  oc, off, end;
	    void** ov;
	    rde_stack_get (tc->off, &oc, &ov);
	    ASSERT_BOUNDS(at,oc);
	    off = (long int) ov [at];
	    if ((at+1) == oc) {
		end = tc->num;
	    } else {
		end = (long int) ov [at+1];
	    }
	    TRACE (("rde_tc_get (RDE_TC %p, @ %d) => %d.[%d ... %d]/%d",tc,at,end-off,off,end-1,tc->num));
	    ASSERT_BOUNDS(off,tc->num);
	    ASSERT_BOUNDS(end-1,tc->num);
	    *ch = tc->str + off;
	    *len = end - off;
	}
	SCOPE void
	rde_tc_get_s (RDE_TC tc, int at, int last, char** ch, long int* len)
	{
	    long int  oc, off, end;
	    void** ov;
	    rde_stack_get (tc->off, &oc, &ov);
	    ASSERT_BOUNDS(at,oc);
	    ASSERT_BOUNDS(last,oc);
	    off = (long int) ov [at];
	    if ((last+1) == oc) {
		end = tc->num;
	    } else {
		end = (long int) ov [last+1];
	    }
	    TRACE (("rde_tc_get_s (RDE_TC %p, @ %d .. %d) => %d.[%d ... %d]/%d",tc,at,last,end-off,off,end-1,tc->num));
	    ASSERT_BOUNDS(off,tc->num);
	    ASSERT_BOUNDS(end-1,tc->num);
	    *ch = tc->str + off;
	    *len = end - off;
	}
	

#line 1 "rde_critcl/param.c"

	typedef struct RDE_PARAM_ {
	    Tcl_Channel   IN;
	    Tcl_Obj*      readbuf;
	    char*         CC; 
	    long int      CC_len;
	    RDE_TC        TC;
	    long int      CL;
	    RDE_STACK     LS; 
	    ERROR_STATE*  ER;
	    RDE_STACK     ES; 
	    long int      ST;
	    Tcl_Obj*      SV;
	    Tcl_HashTable NC;
	    
	    RDE_STACK    ast  ; 
	    RDE_STACK    mark ; 
	    
	    long int numstr; 
	    char**  string;
	    
	    ClientData clientData;
	} RDE_PARAM_;
	typedef int (*UniCharClass) (int);
	typedef enum test_class_id {
	    tc_alnum,
	    tc_alpha,
	    tc_ascii,
	    tc_control,
	    tc_ddigit,
	    tc_digit,
	    tc_graph,
	    tc_lower,
	    tc_printable,
	    tc_punct,
	    tc_space,
	    tc_upper,
	    tc_wordchar,
	    tc_xdigit
	} test_class_id;
	static void ast_node_free    (void* n);
	static void error_state_free (void* es);
	static void error_set        (RDE_PARAM p, long int s);
	static void nc_clear         (RDE_PARAM p);
	static int UniCharIsAscii    (int character);
	static int UniCharIsHexDigit (int character);
	static int UniCharIsDecDigit (int character);
	static void test_class (RDE_PARAM p, UniCharClass class, test_class_id id);
	static int  er_int_compare (const void* a, const void* b);
	#define SV_INIT(p)             \
	    p->SV = NULL; \
	    TRACE (("SV_INIT (%p => %p)", (p), (p)->SV))
	#define SV_SET(p,newsv)             \
	    if (((p)->SV) != (newsv)) { \
	        TRACE (("SV_CLEAR/set (%p => %p)", (p), (p)->SV)); \
	        if ((p)->SV) {                  \
		    Tcl_DecrRefCount ((p)->SV); \
	        }				    \
	        (p)->SV = (newsv);		    \
	        TRACE (("SV_SET       (%p => %p)", (p), (p)->SV)); \
	        if ((p)->SV) {                  \
		    Tcl_IncrRefCount ((p)->SV); \
	        } \
	    }
	#define SV_CLEAR(p)                 \
	    TRACE (("SV_CLEAR (%p => %p)", (p), (p)->SV)); \
	    if ((p)->SV) {                  \
		Tcl_DecrRefCount ((p)->SV); \
	    }				    \
	    (p)->SV = NULL
	#define ER_INIT(p)             \
	    p->ER = NULL; \
	    TRACE (("ER_INIT (%p => %p)", (p), (p)->ER))
	#define ER_CLEAR(p)             \
	    error_state_free ((p)->ER);	\
	    (p)->ER = NULL
	SCOPE RDE_PARAM
	rde_param_new (long int nstr, char** strings)
	{
	    RDE_PARAM p;
	    ENTER ("rde_param_new");
	    TRACE (("\tINT %d strings @ %p", nstr, strings));
	    p = ALLOC (RDE_PARAM_);
	    p->numstr = nstr;
	    p->string = strings;
	    p->readbuf = Tcl_NewObj ();
	    Tcl_IncrRefCount (p->readbuf);
	    TRACE (("\tTcl_Obj* readbuf %p used %d", p->readbuf,p->readbuf->refCount));
	    Tcl_InitHashTable (&p->NC, TCL_ONE_WORD_KEYS);
	    p->IN   = NULL;
	    p->CL   = -1;
	    p->ST   = 0;
	    ER_INIT (p);
	    SV_INIT (p);
	    p->CC   = NULL;
	    p->CC_len = 0;
	    p->TC   = rde_tc_new ();
	    p->ES   = rde_stack_new (error_state_free);
	    p->LS   = rde_stack_new (NULL);
	    p->ast  = rde_stack_new (ast_node_free);
	    p->mark = rde_stack_new (NULL);
	    RETURN ("%p", p);
	}
	SCOPE void 
	rde_param_del (RDE_PARAM p)
	{
	    ENTER ("rde_param_del");
	    TRACE (("RDE_PARAM %p",p));
	    ER_CLEAR (p);                 TRACE (("\ter_clear"));
	    SV_CLEAR (p);                 TRACE (("\tsv_clear"));
	    nc_clear (p);                 TRACE (("\tnc_clear"));
	    Tcl_DeleteHashTable (&p->NC); TRACE (("\tnc hashtable delete"));
	    rde_tc_del    (p->TC);        TRACE (("\ttc clear"));
	    rde_stack_del (p->ES);        TRACE (("\tes clear"));
	    rde_stack_del (p->LS);        TRACE (("\tls clear"));
	    rde_stack_del (p->ast);       TRACE (("\tast clear"));
	    rde_stack_del (p->mark);      TRACE (("\tmark clear"));
	    TRACE (("\tTcl_Obj* readbuf %p used %d", p->readbuf,p->readbuf->refCount));
	    Tcl_DecrRefCount (p->readbuf);
	    ckfree ((char*) p);
	    RETURNVOID;
	}
	SCOPE void 
	rde_param_reset (RDE_PARAM p, Tcl_Channel chan)
	{
	    ENTER ("rde_param_reset");
	    TRACE (("RDE_PARAM   %p",p));
	    TRACE (("Tcl_Channel %p",chan));
	    p->IN  = chan;
	    p->CL  = -1;
	    p->ST  = 0;
	    p->CC  = NULL;
	    p->CC_len = 0;
	    ER_CLEAR (p);
	    SV_CLEAR (p);
	    nc_clear (p);
	    rde_tc_clear   (p->TC);
	    rde_stack_trim (p->ES,   0);
	    rde_stack_trim (p->LS,   0);
	    rde_stack_trim (p->ast,  0);
	    rde_stack_trim (p->mark, 0);
	    TRACE (("\tTcl_Obj* readbuf %p used %d", p->readbuf,p->readbuf->refCount));
	    RETURNVOID;
	}
	SCOPE void
	rde_param_update_strings (RDE_PARAM p, long int nstr, char** strings)
	{
	    ENTER ("rde_param_update_strings");
	    TRACE (("RDE_PARAM %p", p));
	    TRACE (("INT       %d strings", nstr));
	    p->numstr = nstr;
	    p->string = strings;
	    RETURNVOID;
	}
	SCOPE void
	rde_param_data (RDE_PARAM p, char* buf, long int len)
	{
	    (void) rde_tc_append (p->TC, buf, len);
	}
	SCOPE void
	rde_param_clientdata (RDE_PARAM p, ClientData clientData)
	{
	    p->clientData = clientData;
	}
	static void
	nc_clear (RDE_PARAM p)
	{
	    Tcl_HashSearch hs;
	    Tcl_HashEntry* he;
	    Tcl_HashTable* tablePtr;
	    for(he = Tcl_FirstHashEntry(&p->NC, &hs);
		he != NULL;
		he = Tcl_FirstHashEntry(&p->NC, &hs)) {
		Tcl_HashSearch hsc;
		Tcl_HashEntry* hec;
		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (he);
		for(hec = Tcl_FirstHashEntry(tablePtr, &hsc);
		    hec != NULL;
		    hec = Tcl_NextHashEntry(&hsc)) {
		    NC_STATE* scs = Tcl_GetHashValue (hec);
		    error_state_free (scs->ER);
		    if (scs->SV) { Tcl_DecrRefCount (scs->SV); }
		    ckfree ((char*) scs);
		}
		Tcl_DeleteHashTable (tablePtr);
		ckfree ((char*) tablePtr);
		Tcl_DeleteHashEntry (he);
	    }
	}
	SCOPE ClientData
	rde_param_query_clientdata (RDE_PARAM p)
	{
	    return p->clientData;
	}
	SCOPE void
	rde_param_query_amark (RDE_PARAM p, long int* mc, void*** mv)
	{
	    rde_stack_get (p->mark, mc, mv);
	}
	SCOPE void
	rde_param_query_ast (RDE_PARAM p, long int* ac, Tcl_Obj*** av)
	{
	    rde_stack_get (p->ast, ac, (void***) av);
	}
	SCOPE const char*
	rde_param_query_in (RDE_PARAM p)
	{
	    return p->IN
		? Tcl_GetChannelName (p->IN)
		: "";
	}
	SCOPE const char*
	rde_param_query_cc (RDE_PARAM p, long int* len)
	{
	    *len = p->CC_len;
	    return p->CC;
	}
	SCOPE int
	rde_param_query_cl (RDE_PARAM p)
	{
	    return p->CL;
	}
	SCOPE const ERROR_STATE*
	rde_param_query_er (RDE_PARAM p)
	{
	    return p->ER;
	}
	SCOPE Tcl_Obj*
	rde_param_query_er_tcl (RDE_PARAM p, const ERROR_STATE* er)
	{
	    Tcl_Obj* res;
	    if (!er) {
		
		res = Tcl_NewStringObj ("", 0);
	    } else {
		Tcl_Obj* ov [2];
		Tcl_Obj** mov;
		long int  mc, i, j;
		void** mv;
		int lastid;
		const char* msg;
		rde_stack_get (er->msg, &mc, &mv);
		
		qsort (mv, mc, sizeof (void*), er_int_compare);
		
		mov = NALLOC (mc, Tcl_Obj*);
		lastid = -1;
		for (i=0, j=0; i < mc; i++) {
		    ASSERT_BOUNDS (i,mc);
		    if (((long int) mv [i]) == lastid) continue;
		    lastid = (long int) mv [i];
		    ASSERT_BOUNDS((long int) mv[i],p->numstr);
		    msg = p->string [(long int) mv[i]]; 
		    ASSERT_BOUNDS (j,mc);
		    mov [j] = Tcl_NewStringObj (msg, -1);
		    j++;
		}
		
		ov [0] = Tcl_NewIntObj  (er->loc);
		ov [1] = Tcl_NewListObj (j, mov);
		res = Tcl_NewListObj (2, ov);
		ckfree ((char*) mov);
	    }
	    return res;
	}
	SCOPE void
	rde_param_query_es (RDE_PARAM p, long int* ec, ERROR_STATE*** ev)
	{
	    rde_stack_get (p->ES, ec, (void***) ev);
	}
	SCOPE void
	rde_param_query_ls (RDE_PARAM p, long int* lc, void*** lv)
	{
	    rde_stack_get (p->LS, lc, lv);
	}
	SCOPE long int
	rde_param_query_lstop (RDE_PARAM p)
	{
	    return (long int) rde_stack_top (p->LS);
	}
	SCOPE Tcl_HashTable*
	rde_param_query_nc (RDE_PARAM p)
	{
	    return &p->NC;
	}
	SCOPE int
	rde_param_query_st (RDE_PARAM p)
	{
	    return p->ST;
	}
	SCOPE Tcl_Obj*
	rde_param_query_sv (RDE_PARAM p)
	{
	    TRACE (("SV_QUERY %p => (%p)", (p), (p)->SV)); \
	    return p->SV;
	}
	SCOPE long int
	rde_param_query_tc_size (RDE_PARAM p)
	{
	    return rde_tc_size (p->TC);
	}
	SCOPE void
	rde_param_query_tc_get_s (RDE_PARAM p, long int at, long int last, char** ch, long int* len)
	{
	    rde_tc_get_s (p->TC, at, last, ch, len);
	}
	SCOPE const char*
	rde_param_query_string (RDE_PARAM p, long int id)
	{
	    TRACE (("rde_param_query_string (RDE_PARAM %p, %d/%d)", p, id, p->numstr));
	    ASSERT_BOUNDS(id,p->numstr);
	    return p->string [id];
	}
	SCOPE void
	rde_param_i_ast_pop_discard (RDE_PARAM p)
	{
	    rde_stack_pop (p->mark, 1);
	}
	SCOPE void
	rde_param_i_ast_pop_rewind (RDE_PARAM p)
	{
	    long int trim = (long int) rde_stack_top (p->mark);
	    ENTER ("rde_param_i_ast_pop_rewind");
	    TRACE (("RDE_PARAM %p",p));
	    rde_stack_pop  (p->mark, 1);
	    rde_stack_trim (p->ast, trim);
	    TRACE (("SV = (%p rc%d '%s')",
		    p->SV,
		    p->SV ? p->SV->refCount       : -1,
		    p->SV ? Tcl_GetString (p->SV) : ""));
	    RETURNVOID;
	}
	SCOPE void
	rde_param_i_ast_rewind (RDE_PARAM p)
	{
	    long int trim = (long int) rde_stack_top (p->mark);
	    ENTER ("rde_param_i_ast_rewind");
	    TRACE (("RDE_PARAM %p",p));
	    rde_stack_trim (p->ast, trim);
	    TRACE (("SV = (%p rc%d '%s')",
		    p->SV,
		    p->SV ? p->SV->refCount       : -1,
		    p->SV ? Tcl_GetString (p->SV) : ""));
	    RETURNVOID;
	}
	SCOPE void
	rde_param_i_ast_push (RDE_PARAM p)
	{
	    rde_stack_push (p->mark, (void*) rde_stack_size (p->ast));
	}
	SCOPE void
	rde_param_i_ast_value_push (RDE_PARAM p)
	{
	    ENTER ("rde_param_i_ast_value_push");
	    TRACE (("RDE_PARAM %p",p));
	    ASSERT(p->SV,"Unable to push undefined semantic value");
	    TRACE (("rde_param_i_ast_value_push %p => (%p)", p, p->SV));
	    TRACE (("SV = (%p rc%d '%s')", p->SV, p->SV->refCount, Tcl_GetString (p->SV)));
	    rde_stack_push (p->ast, p->SV);
	    Tcl_IncrRefCount (p->SV);
	    RETURNVOID;
	}
	static void
	ast_node_free (void* n)
	{
	    Tcl_DecrRefCount ((Tcl_Obj*) n);
	}
	SCOPE void
	rde_param_i_error_clear (RDE_PARAM p)
	{
	    ER_CLEAR (p);
	}
	SCOPE void
	rde_param_i_error_nonterminal (RDE_PARAM p, long int s)
	{
	    
	    return;
	#if 0
	    long int pos;
	    if (!p->ER) return;
	    pos = 1 + (long int) rde_stack_top (p->LS);
	    if (p->ER->loc != pos) return;
	    error_set (p, s);
	    p->ER->loc = pos;
	#endif
	}
	SCOPE void
	rde_param_i_error_pop_merge (RDE_PARAM p)
	{
	    ERROR_STATE* top = (ERROR_STATE*) rde_stack_top (p->ES);
	    
	    if (top == p->ER) {
		rde_stack_pop (p->ES, 1);
		return;
	    }
	    
	    if (!top) {
		rde_stack_pop (p->ES, 1);
		return;
	    }
	    
	    if (!p->ER) {
		rde_stack_drop (p->ES, 1);
		p->ER = top;
		
		return;
	    }
	    
	    if (top->loc < p->ER->loc) {
		rde_stack_pop (p->ES, 1);
		return;
	    }
	    
	    if (top->loc > p->ER->loc) {
		rde_stack_drop (p->ES, 1);
		error_state_free (p->ER);
		p->ER = top;
		
		return;
	    }
	    
	    rde_stack_move (p->ER->msg, top->msg);
	    rde_stack_pop  (p->ES, 1);
	}
	SCOPE void
	rde_param_i_error_push (RDE_PARAM p)
	{
	    rde_stack_push (p->ES, p->ER);
	    if (p->ER) { p->ER->refCount ++; }
	}
	static void
	error_set (RDE_PARAM p, long int s)
	{
	    error_state_free (p->ER);
	    p->ER = ALLOC (ERROR_STATE);
	    p->ER->refCount = 1;
	    p->ER->loc      = p->CL;
	    p->ER->msg      = rde_stack_new (NULL);
	    ASSERT_BOUNDS(s,p->numstr);
	    rde_stack_push (p->ER->msg, (void*) s);
	}
	static void
	error_state_free (void* esx)
	{
	    ERROR_STATE* es = esx;
	    if (!es) return;
	    es->refCount --;
	    if (es->refCount > 0) return;
	    rde_stack_del (es->msg);
	    ckfree ((char*) es);
	}
	SCOPE void
	rde_param_i_loc_pop_discard (RDE_PARAM p)
	{
	    rde_stack_pop (p->LS, 1);
	}
	SCOPE void
	rde_param_i_loc_pop_rewind (RDE_PARAM p)
	{
	    p->CL = (long int) rde_stack_top (p->LS);
	    rde_stack_pop (p->LS, 1);
	}
	SCOPE void
	rde_param_i_loc_push (RDE_PARAM p)
	{
	    rde_stack_push (p->LS, (void*) p->CL);
	}
	SCOPE void
	rde_param_i_loc_rewind (RDE_PARAM p)
	{
	    p->CL = (long int) rde_stack_top (p->LS);
	}
	SCOPE void
	rde_param_i_input_next (RDE_PARAM p, long int m)
	{
	    int leni;
	    char* ch;
	    ASSERT_BOUNDS(m,p->numstr);
	    p->CL ++;
	    if (p->CL < rde_tc_size (p->TC)) {
		
		rde_tc_get (p->TC, p->CL, &p->CC, &p->CC_len);
		
		ASSERT_BOUNDS (p->CC_len-1, TCL_UTF_MAX);
		p->ST = 1;
		ER_CLEAR (p);
		return;
	    }
	    if (!p->IN || 
		Tcl_Eof (p->IN) ||
		(Tcl_ReadChars (p->IN, p->readbuf, 1, 0) <= 0)) {
		
		p->ST = 0;
		error_set (p, m);
		return;
	    }
	    
	    ch = Tcl_GetStringFromObj (p->readbuf, &leni);
	    ASSERT_BOUNDS (leni, TCL_UTF_MAX);
	    p->CC = rde_tc_append (p->TC, ch, leni);
	    p->CC_len = leni;
	    p->ST = 1;
	    ER_CLEAR (p);
	}
	SCOPE void
	rde_param_i_status_fail (RDE_PARAM p)
	{
	    p->ST = 0;
	}
	SCOPE void
	rde_param_i_status_ok (RDE_PARAM p)
	{
	    p->ST = 1;
	}
	SCOPE void
	rde_param_i_status_negate (RDE_PARAM p)
	{
	    p->ST = !p->ST;
	}
	SCOPE int 
	rde_param_i_symbol_restore (RDE_PARAM p, long int s)
	{
	    NC_STATE*      scs;
	    Tcl_HashEntry* hPtr;
	    Tcl_HashTable* tablePtr;
	    
	    hPtr = Tcl_FindHashEntry (&p->NC, (char*) p->CL);
	    if (!hPtr) { return 0; }
	    tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
	    hPtr = Tcl_FindHashEntry (tablePtr, (char*) s);
	    if (!hPtr) { return 0; }
	    
	    scs = Tcl_GetHashValue (hPtr);
	    p->CL = scs->CL;
	    p->ST = scs->ST;
	    error_state_free (p->ER);
	    p->ER = scs->ER;
	    if (p->ER) { p->ER->refCount ++; }
	    TRACE (("SV_RESTORE (%p) '%s'",scs->SV, scs->SV ? Tcl_GetString (scs->SV):""));
	    SV_SET (p, scs->SV);
	    return 1;
	}
	SCOPE void
	rde_param_i_symbol_save (RDE_PARAM p, long int s)
	{
	    long int       at = (long int) rde_stack_top (p->LS);
	    NC_STATE*      scs;
	    Tcl_HashEntry* hPtr;
	    Tcl_HashTable* tablePtr;
	    int            isnew;
	    ENTER ("rde_param_i_symbol_save");
	    TRACE (("RDE_PARAM %p",p));
	    TRACE (("INT       %d",s));
	    
	    hPtr = Tcl_CreateHashEntry (&p->NC, (char*) at, &isnew);
	    if (isnew) {
		tablePtr = ALLOC (Tcl_HashTable);
		Tcl_InitHashTable (tablePtr, TCL_ONE_WORD_KEYS);
		Tcl_SetHashValue (hPtr, tablePtr);
	    } else {
		tablePtr = (Tcl_HashTable*) Tcl_GetHashValue (hPtr);
	    }
	    hPtr = Tcl_CreateHashEntry (tablePtr, (char*) s, &isnew);
	    if (isnew) {
		
		scs = ALLOC (NC_STATE);
		scs->CL = p->CL;
		scs->ST = p->ST;
		TRACE (("SV_CACHE (%p '%s')", p->SV, p->SV ? Tcl_GetString(p->SV) : ""));
		scs->SV = p->SV;
		if (scs->SV) { Tcl_IncrRefCount (scs->SV); }
		scs->ER = p->ER;
		if (scs->ER) { scs->ER->refCount ++; }
		Tcl_SetHashValue (hPtr, scs);
	    } else {
		
		scs = (NC_STATE*) Tcl_GetHashValue (hPtr);
		scs->CL = p->CL;
		scs->ST = p->ST;
		TRACE (("SV_CACHE/over (%p '%s')", p->SV, p->SV ? Tcl_GetString(p->SV) : "" ));
		if (scs->SV) { Tcl_DecrRefCount (scs->SV); }
		scs->SV = p->SV;
		if (scs->SV) { Tcl_IncrRefCount (scs->SV); }
		error_state_free (scs->ER);
		scs->ER = p->ER;
		if (scs->ER) { scs->ER->refCount ++; }
	    }
	    TRACE (("SV = (%p rc%d '%s')",
		    p->SV,
		    p->SV ? p->SV->refCount       : -1,
		    p->SV ? Tcl_GetString (p->SV) : ""));
	    RETURNVOID;
	}
	SCOPE void
	rde_param_i_test_alnum (RDE_PARAM p)
	{
	    test_class (p, Tcl_UniCharIsAlnum, tc_alnum);
	}
	SCOPE void
	rde_param_i_test_alpha (RDE_PARAM p)
	{
	    test_class (p, Tcl_UniCharIsAlpha, tc_alpha);
	}
	SCOPE void
	rde_param_i_test_ascii (RDE_PARAM p)
	{
	    test_class (p, UniCharIsAscii, tc_ascii);
	}
	SCOPE void
	rde_param_i_test_control (RDE_PARAM p)
	{
	    test_class (p, Tcl_UniCharIsControl, tc_control);
	}
	SCOPE void
	rde_param_i_test_char (RDE_PARAM p, const char* c, long int msg)
	{
	    ASSERT_BOUNDS(msg,p->numstr);
	    p->ST = Tcl_UtfNcmp (p->CC, c, 1) == 0;
	    if (p->ST) {
		ER_CLEAR (p);
	    } else {
		error_set (p, msg);
		p->CL --;
	    }
	}
	SCOPE void
	rde_param_i_test_ddigit (RDE_PARAM p)
	{
	    test_class (p, UniCharIsDecDigit, tc_ddigit);
	}
	SCOPE void
	rde_param_i_test_digit (RDE_PARAM p)
	{
	    test_class (p, Tcl_UniCharIsDigit, tc_digit);
	}
	SCOPE void
	rde_param_i_test_graph (RDE_PARAM p)
	{
	    test_class (p, Tcl_UniCharIsGraph, tc_graph);
	}
	SCOPE void
	rde_param_i_test_lower (RDE_PARAM p)
	{
	    test_class (p, Tcl_UniCharIsLower, tc_lower);
	}
	SCOPE void
	rde_param_i_test_print (RDE_PARAM p)
	{
	    test_class (p, Tcl_UniCharIsPrint, tc_printable);
	}
	SCOPE void
	rde_param_i_test_punct (RDE_PARAM p)
	{
	    test_class (p, Tcl_UniCharIsPunct, tc_punct);
	}
	SCOPE void
	rde_param_i_test_range (RDE_PARAM p, const char* s, const char* e, long int msg)
	{
	    ASSERT_BOUNDS(msg,p->numstr);
	    p->ST =
		(Tcl_UtfNcmp (s, p->CC, 1) <= 0) &&
		(Tcl_UtfNcmp (p->CC, e, 1) <= 0);
	    if (p->ST) {
		ER_CLEAR (p);
	    } else {
		error_set (p, msg);
		p->CL --;
	    }
	}
	SCOPE void
	rde_param_i_test_space (RDE_PARAM p)
	{
	    test_class (p, Tcl_UniCharIsSpace, tc_space);
	}
	SCOPE void
	rde_param_i_test_upper (RDE_PARAM p)
	{
	    test_class (p, Tcl_UniCharIsUpper, tc_upper);
	}
	SCOPE void
	rde_param_i_test_wordchar (RDE_PARAM p)
	{
	    test_class (p, Tcl_UniCharIsWordChar, tc_wordchar);
	}
	SCOPE void
	rde_param_i_test_xdigit (RDE_PARAM p)
	{
	    test_class (p, UniCharIsHexDigit, tc_xdigit);
	}
	static void
	test_class (RDE_PARAM p, UniCharClass class, test_class_id id)
	{
	    Tcl_UniChar ch;
	    Tcl_UtfToUniChar(p->CC, &ch);
	    ASSERT_BOUNDS(id,p->numstr);
	    p->ST = !!class (ch);
	    
	    if (p->ST) {
		ER_CLEAR (p);
	    } else {
		error_set (p, id);
		p->CL --;
	    }
	}
	static int
	UniCharIsAscii (int character)
	{
	    return (character >= 0) && (character < 0x80);
	}
	static int
	UniCharIsHexDigit (int character)
	{
	    return (character >= 0) && (character < 0x80) && isxdigit(character);
	}
	static int
	UniCharIsDecDigit (int character)
	{
	    return (character >= 0) && (character < 0x80) && isdigit(character);
	}
	SCOPE void
	rde_param_i_value_clear (RDE_PARAM p)
	{
	    SV_CLEAR (p);
	}
	SCOPE void
	rde_param_i_value_leaf (RDE_PARAM p, long int s)
	{
	    Tcl_Obj* newsv;
	    Tcl_Obj* ov [3];
	    long int pos = 1 + (long int) rde_stack_top (p->LS);
	    ASSERT_BOUNDS(s,p->numstr);
	    ov [0] = Tcl_NewStringObj (p->string[s], -1);
	    ov [1] = Tcl_NewIntObj (pos);
	    ov [2] = Tcl_NewIntObj (p->CL);
	    newsv = Tcl_NewListObj (3, ov);
	    TRACE (("rde_param_i_value_leaf => '%s'",Tcl_GetString (newsv)));
	    SV_SET (p, newsv);
	}
	SCOPE void
	rde_param_i_value_reduce (RDE_PARAM p, long int s)
	{
	    Tcl_Obj*  newsv;
	    int       i, j;
	    Tcl_Obj** ov;
	    long int  ac;
	    Tcl_Obj** av;
	    long int pos   = 1 + (long int) rde_stack_top (p->LS);
	    long int mark  = (long int) rde_stack_top (p->mark);
	    long int asize = rde_stack_size (p->ast);
	    long int new   = asize - mark;
	    ASSERT (new >= 0, "Bad number of elements to reduce");
	    ov = NALLOC (3+new, Tcl_Obj*);
	    ASSERT_BOUNDS(s,p->numstr);
	    ov [0] = Tcl_NewStringObj (p->string[s], -1);
	    ov [1] = Tcl_NewIntObj (pos);
	    ov [2] = Tcl_NewIntObj (p->CL);
	    rde_stack_get (p->ast, &ac, (void***) &av);
	    for (i = 3, j = mark; j < asize; i++, j++) {
		ASSERT_BOUNDS (i, 3+new);
		ASSERT_BOUNDS (j, ac);
		ov [i] = av [j];
	    }
	    ASSERT (i == 3+new, "Reduction result incomplete");
	    newsv = Tcl_NewListObj (3+new, ov);
	    TRACE (("rde_param_i_value_reduce => '%s'",Tcl_GetString (newsv)));
	    SV_SET (p, newsv);
	    ckfree ((char*) ov);
	}
	static int
	er_int_compare (const void* a, const void* b)
	{
	    
	    const void** ael = (const void**) a;
	    const void** bel = (const void**) b;
	    long int avalue = (long int) *ael;
	    long int bvalue = (long int) *bel;
	    if (avalue < bvalue) { return -1; }
	    if (avalue > bvalue) { return  1; }
	    return 0;
	}
	SCOPE int
	rde_param_i_symbol_start (RDE_PARAM p, long int s)
	{
	    if (rde_param_i_symbol_restore (p, s)) {
		if (p->ST) {
		    rde_stack_push (p->ast, p->SV);
		    Tcl_IncrRefCount (p->SV);
		}
		return 1;
	    }
	    rde_stack_push (p->LS, (void*) p->CL);
	    return 0;
	}
	SCOPE int
	rde_param_i_symbol_start_d (RDE_PARAM p, long int s)
	{
	    if (rde_param_i_symbol_restore (p, s)) {
		if (p->ST) {
		    rde_stack_push (p->ast, p->SV);
		    Tcl_IncrRefCount (p->SV);
		}
		return 1;
	    }
	    rde_stack_push (p->LS,   (void*) p->CL);
	    rde_stack_push (p->mark, (void*) rde_stack_size (p->ast));
	    return 0;
	}
	SCOPE int
	rde_param_i_symbol_void_start (RDE_PARAM p, long int s)
	{
	    if (rde_param_i_symbol_restore (p, s)) return 1;
	    rde_stack_push (p->LS, (void*) p->CL);
	    return 0;
	}
	SCOPE int
	rde_param_i_symbol_void_start_d (RDE_PARAM p, long int s)
	{
	    if (rde_param_i_symbol_restore (p, s)) return 1;
	    rde_stack_push (p->LS,   (void*) p->CL);
	    rde_stack_push (p->mark, (void*) rde_stack_size (p->ast));
	    return 0;
	}
	SCOPE void
	rde_param_i_symbol_done_d_reduce (RDE_PARAM p, long int s, long int m)
	{
	    if (p->ST) {
		rde_param_i_value_reduce (p, s);
	    } else {
		SV_CLEAR (p);
	    }
	    rde_param_i_symbol_save       (p, s);
	    rde_param_i_error_nonterminal (p, m);
	    rde_param_i_ast_pop_rewind    (p);
	    rde_stack_pop (p->LS, 1);
	    if (p->ST) {
		rde_stack_push (p->ast, p->SV);
		Tcl_IncrRefCount (p->SV);
	    }
	}
	SCOPE void
	rde_param_i_symbol_done_leaf (RDE_PARAM p, long int s, long int m)
	{
	    if (p->ST) {
		rde_param_i_value_leaf (p, s);
	    } else {
		SV_CLEAR (p);
	    }
	    rde_param_i_symbol_save       (p, s);
	    rde_param_i_error_nonterminal (p, m);
	    rde_stack_pop (p->LS, 1);
	    if (p->ST) {
		rde_stack_push (p->ast, p->SV);
		Tcl_IncrRefCount (p->SV);
	    }
	}
	SCOPE void
	rde_param_i_symbol_done_d_leaf (RDE_PARAM p, long int s, long int m)
	{
	    if (p->ST) {
		rde_param_i_value_leaf (p, s);
	    } else {
		SV_CLEAR (p);
	    }
	    rde_param_i_symbol_save       (p, s);
	    rde_param_i_error_nonterminal (p, m);
	    rde_param_i_ast_pop_rewind    (p);
	    rde_stack_pop (p->LS, 1);
	    if (p->ST) {
		rde_stack_push (p->ast, p->SV);
		Tcl_IncrRefCount (p->SV);
	    }
	}
	SCOPE void
	rde_param_i_symbol_done_void (RDE_PARAM p, long int s, long int m)
	{
	    SV_CLEAR (p);
	    rde_param_i_symbol_save       (p, s);
	    rde_param_i_error_nonterminal (p, m);
	    rde_stack_pop (p->LS, 1);
	}
	SCOPE void
	rde_param_i_symbol_done_d_void (RDE_PARAM p, long int s, long int m)
	{
	    SV_CLEAR (p);
	    rde_param_i_symbol_save       (p, s);
	    rde_param_i_error_nonterminal (p, m);
	    rde_param_i_ast_pop_rewind    (p);
	    rde_stack_pop (p->LS, 1);
	}
	SCOPE void
	rde_param_i_next_char (RDE_PARAM p, const char* c, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_char (p, c, m);
	}
	SCOPE void
	rde_param_i_next_range (RDE_PARAM p, const char* s, const char* e, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_range (p, s, e, m);
	}
	SCOPE void
	rde_param_i_next_alnum (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_alnum (p);
	}
	SCOPE void
	rde_param_i_next_alpha (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_alpha (p);
	}
	SCOPE void
	rde_param_i_next_ascii (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_ascii (p);
	}
	SCOPE void
	rde_param_i_next_control (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_control (p);
	}
	SCOPE void
	rde_param_i_next_ddigit (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_ddigit (p);
	}
	SCOPE void
	rde_param_i_next_digit (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_digit (p);
	}
	SCOPE void
	rde_param_i_next_graph (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_graph (p);
	}
	SCOPE void
	rde_param_i_next_lower (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_lower (p);
	}
	SCOPE void
	rde_param_i_next_print (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_print (p);
	}
	SCOPE void
	rde_param_i_next_punct (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_punct (p);
	}
	SCOPE void
	rde_param_i_next_space (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_space (p);
	}
	SCOPE void
	rde_param_i_next_upper (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_upper (p);
	}
	SCOPE void
	rde_param_i_next_wordchar (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_wordchar (p);
	}
	SCOPE void
	rde_param_i_next_xdigit (RDE_PARAM p, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    rde_param_i_test_xdigit (p);
	}
	SCOPE void
	rde_param_i_notahead_start_d (RDE_PARAM p)
	{
	    rde_stack_push (p->LS, (void*) p->CL);
	    rde_stack_push (p->mark, (void*) rde_stack_size (p->ast));
	}
	SCOPE void
	rde_param_i_notahead_exit_d (RDE_PARAM p)
	{
	    if (p->ST) {
		rde_param_i_ast_pop_rewind (p); 
	    } else {
		rde_stack_pop (p->mark, 1);
	    }
	    p->CL = (long int) rde_stack_top (p->LS);
	    rde_stack_pop (p->LS, 1);
	    p->ST = !p->ST;
	}
	SCOPE void
	rde_param_i_notahead_exit (RDE_PARAM p)
	{
	    p->CL = (long int) rde_stack_top (p->LS);
	    rde_stack_pop (p->LS, 1);
	    p->ST = !p->ST;
	}
	SCOPE void
	rde_param_i_state_push_2 (RDE_PARAM p)
	{
	    
	    rde_stack_push (p->LS, (void*) p->CL);
	    rde_stack_push (p->ES, p->ER);
	    if (p->ER) { p->ER->refCount ++; }
	}
	SCOPE void
	rde_param_i_state_push_void (RDE_PARAM p)
	{
	    rde_stack_push (p->LS, (void*) p->CL);
	    ER_CLEAR (p);
	    rde_stack_push (p->ES, p->ER);
	    
	}
	SCOPE void
	rde_param_i_state_push_value (RDE_PARAM p)
	{
	    rde_stack_push (p->mark, (void*) rde_stack_size (p->ast));
	    rde_stack_push (p->LS, (void*) p->CL);
	    ER_CLEAR (p);
	    rde_stack_push (p->ES, p->ER);
	    
	}
	SCOPE void
	rde_param_i_state_merge_ok (RDE_PARAM p)
	{
	    rde_param_i_error_pop_merge (p);
	    if (!p->ST) {
		p->ST = 1;
		p->CL = (long int) rde_stack_top (p->LS);
	    }
	    rde_stack_pop (p->LS, 1);
	}
	SCOPE void
	rde_param_i_state_merge_void (RDE_PARAM p)
	{
	    rde_param_i_error_pop_merge (p);
	    if (!p->ST) {
		p->CL = (long int) rde_stack_top (p->LS);
	    }
	    rde_stack_pop (p->LS, 1);
	}
	SCOPE void
	rde_param_i_state_merge_value (RDE_PARAM p)
	{
	    rde_param_i_error_pop_merge (p);
	    if (!p->ST) {
		long int trim = (long int) rde_stack_top (p->mark);
		rde_stack_trim (p->ast, trim);
		p->CL = (long int) rde_stack_top (p->LS);
	    }
	    rde_stack_pop (p->mark, 1);
	    rde_stack_pop (p->LS, 1);
	}
	SCOPE int
	rde_param_i_kleene_close (RDE_PARAM p)
	{
	    int stop = !p->ST;
	    rde_param_i_error_pop_merge (p);
	    if (stop) {
		p->ST = 1;
		p->CL = (long int) rde_stack_top (p->LS);
	    }
	    rde_stack_pop (p->LS, 1);
	    return stop;
	}
	SCOPE int
	rde_param_i_kleene_abort (RDE_PARAM p)
	{
	    int stop = !p->ST;
	    if (stop) {
		p->CL = (long int) rde_stack_top (p->LS);
	    }
	    rde_stack_pop (p->LS, 1);
	    return stop;
	}
	SCOPE int
	rde_param_i_seq_void2void (RDE_PARAM p)
	{
	    rde_param_i_error_pop_merge (p);
	    if (p->ST) {
		rde_stack_push (p->ES, p->ER);
		if (p->ER) { p->ER->refCount ++; }
		return 0;
	    } else {
		p->CL = (long int) rde_stack_top (p->LS);
		rde_stack_pop (p->LS, 1);
		return 1;
	    }
	}
	SCOPE int
	rde_param_i_seq_void2value (RDE_PARAM p)
	{
	    rde_param_i_error_pop_merge (p);
	    if (p->ST) {
		rde_stack_push (p->mark, (void*) rde_stack_size (p->ast));
		rde_stack_push (p->ES, p->ER);
		if (p->ER) { p->ER->refCount ++; }
		return 0;
	    } else {
		p->CL = (long int) rde_stack_top (p->LS);
		rde_stack_pop (p->LS, 1);
		return 1;
	    }
	}
	SCOPE int
	rde_param_i_seq_value2value (RDE_PARAM p)
	{
	    rde_param_i_error_pop_merge (p);
	    if (p->ST) {
		rde_stack_push (p->ES, p->ER);
		if (p->ER) { p->ER->refCount ++; }
		return 0;
	    } else {
		long int trim = (long int) rde_stack_top (p->mark);
		rde_stack_pop  (p->mark, 1);
		rde_stack_trim (p->ast, trim);
		p->CL = (long int) rde_stack_top (p->LS);
		rde_stack_pop (p->LS, 1);
		return 1;
	    }
	}
	SCOPE int
	rde_param_i_bra_void2void (RDE_PARAM p)
	{
	    rde_param_i_error_pop_merge (p);
	    if (p->ST) {
		rde_stack_pop (p->LS, 1);
	    } else {
		p->CL = (long int) rde_stack_top (p->LS);
		rde_stack_push (p->ES, p->ER);
		if (p->ER) { p->ER->refCount ++; }
	    }
	    return p->ST;
	}
	SCOPE int
	rde_param_i_bra_void2value (RDE_PARAM p)
	{
	    rde_param_i_error_pop_merge (p);
	    if (p->ST) {
		rde_stack_pop (p->LS, 1);
	    } else {
		rde_stack_push (p->mark, (void*) rde_stack_size (p->ast));
		p->CL = (long int) rde_stack_top (p->LS);
		rde_stack_push (p->ES, p->ER);
		if (p->ER) { p->ER->refCount ++; }
	    }
	    return p->ST;
	}
	SCOPE int
	rde_param_i_bra_value2void (RDE_PARAM p)
	{
	    rde_param_i_error_pop_merge (p);
	    if (p->ST) {
		rde_stack_pop (p->mark, 1);
		rde_stack_pop (p->LS, 1);
	    } else {
		long int trim = (long int) rde_stack_top (p->mark);
		rde_stack_pop  (p->mark, 1);
		rde_stack_trim (p->ast, trim);
		p->CL = (long int) rde_stack_top (p->LS);
		rde_stack_push (p->ES, p->ER);
		if (p->ER) { p->ER->refCount ++; }
	    }
	    return p->ST;
	}
	SCOPE int
	rde_param_i_bra_value2value (RDE_PARAM p)
	{
	    rde_param_i_error_pop_merge (p);
	    if (p->ST) {
		rde_stack_pop (p->mark, 1);
		rde_stack_pop (p->LS, 1);
	    } else {
		long int trim = (long int) rde_stack_top (p->mark);
		rde_stack_trim (p->ast, trim);
		p->CL = (long int) rde_stack_top (p->LS);
		rde_stack_push (p->ES, p->ER);
		if (p->ER) { p->ER->refCount ++; }
	    }
	    return p->ST;
	}
	SCOPE void
	rde_param_i_next_str (RDE_PARAM p, const char* str, long int m)
	{
	    int at = p->CL;
	    
	    while (*str) {
		rde_param_i_input_next (p, m);
		if (!p->ST) {
		    p->ER->loc = at+1;
		    p->CL = at;
		    return;
		}
		rde_param_i_test_char (p, str, m);
		if (!p->ST) {
		    p->ER->loc = at+1;
		    p->CL = at;
		    return;
		}
		str = Tcl_UtfNext (str);
	    }
	}
	SCOPE void
	rde_param_i_next_class (RDE_PARAM p, const char* class, long int m)
	{
	    rde_param_i_input_next (p, m);
	    if (!p->ST) return;
	    while (*class) {
		p->ST = Tcl_UtfNcmp (p->CC, class, 1) == 0;
		if (p->ST) {
		    ER_CLEAR (p);
		    return;
		}
		class = Tcl_UtfNext (class);
	    }
	    error_set (p, m);
	    p->CL --;
	}
	

    }

    # # ## ### ###### ######## #############
    ## BEGIN of GENERATED CODE. DO NOT EDIT.

    critcl::ccode {
	/* -*- c -*- */

        /*
         * Declaring the parse functions
         */
        
        static void sequence_7 (RDE_PARAM p);
        static void kleene_9 (RDE_PARAM p);
        static void sequence_11 (RDE_PARAM p);
        static void sym_AddExpr (RDE_PARAM p);
        static void sym_AddOp (RDE_PARAM p);
        static void sequence_19 (RDE_PARAM p);
        static void choice_22 (RDE_PARAM p);
        static void sym_Argument (RDE_PARAM p);
        static void sequence_30 (RDE_PARAM p);
        static void kleene_32 (RDE_PARAM p);
        static void sequence_34 (RDE_PARAM p);
        static void sym_ArgumentList (RDE_PARAM p);
        static void choice_43 (RDE_PARAM p);
        static void sequence_45 (RDE_PARAM p);
        static void sym_Assignment (RDE_PARAM p);
        static void sym_AssignOp (RDE_PARAM p);
        static void sym_Backslash (RDE_PARAM p);
        static void sequence_57 (RDE_PARAM p);
        static void kleene_59 (RDE_PARAM p);
        static void sequence_61 (RDE_PARAM p);
        static void sym_BitAndExpr (RDE_PARAM p);
        static void sym_BitAndOp (RDE_PARAM p);
        static void sequence_71 (RDE_PARAM p);
        static void kleene_73 (RDE_PARAM p);
        static void sequence_75 (RDE_PARAM p);
        static void sym_BitOrExpr (RDE_PARAM p);
        static void sym_BitOrOp (RDE_PARAM p);
        static void sequence_85 (RDE_PARAM p);
        static void kleene_87 (RDE_PARAM p);
        static void sequence_89 (RDE_PARAM p);
        static void sym_BitXorExpr (RDE_PARAM p);
        static void sym_BitXorOp (RDE_PARAM p);
        static void sequence_100 (RDE_PARAM p);
        static void kleene_102 (RDE_PARAM p);
        static void sequence_104 (RDE_PARAM p);
        static void optional_106 (RDE_PARAM p);
        static void sequence_109 (RDE_PARAM p);
        static void sym_Block (RDE_PARAM p);
        static void sym_BreakStatement (RDE_PARAM p);
        static void choice_121 (RDE_PARAM p);
        static void sym_BuiltIn (RDE_PARAM p);
        static void optional_130 (RDE_PARAM p);
        static void sequence_134 (RDE_PARAM p);
        static void sym_BuiltInCall (RDE_PARAM p);
        static void choice_144 (RDE_PARAM p);
        static void sym_BuiltInFunction (RDE_PARAM p);
        static void sequence_156 (RDE_PARAM p);
        static void sequence_163 (RDE_PARAM p);
        static void sequence_174 (RDE_PARAM p);
        static void choice_176 (RDE_PARAM p);
        static void sequence_178 (RDE_PARAM p);
        static void choice_181 (RDE_PARAM p);
        static void sym_Char (RDE_PARAM p);
        static void sequence_188 (RDE_PARAM p);
        static void sequence_196 (RDE_PARAM p);
        static void choice_198 (RDE_PARAM p);
        static void optional_200 (RDE_PARAM p);
        static void sequence_202 (RDE_PARAM p);
        static void sym_ColumnConstructor (RDE_PARAM p);
        static void choice_210 (RDE_PARAM p);
        static void sym_ColumnIdentifier (RDE_PARAM p);
        static void choice_221 (RDE_PARAM p);
        static void sym_ColumnType (RDE_PARAM p);
        static void notahead_226 (RDE_PARAM p);
        static void sequence_229 (RDE_PARAM p);
        static void kleene_231 (RDE_PARAM p);
        static void sequence_233 (RDE_PARAM p);
        static void sym_Comment (RDE_PARAM p);
        static void sym_ContinueStatement (RDE_PARAM p);
        static void sequence_245 (RDE_PARAM p);
        static void sym_DictCast (RDE_PARAM p);
        static void sequence_251 (RDE_PARAM p);
        static void sym_Element (RDE_PARAM p);
        static void sym_ElementIdentifier (RDE_PARAM p);
        static void sym_ElementOp (RDE_PARAM p);
        static void sequence_268 (RDE_PARAM p);
        static void sym_ElseClause (RDE_PARAM p);
        static void sequence_278 (RDE_PARAM p);
        static void sym_ElseifClause (RDE_PARAM p);
        static void sym_Empty (RDE_PARAM p);
        static void notahead_284 (RDE_PARAM p);
        static void sym_EOF (RDE_PARAM p);
        static void sym_EOL (RDE_PARAM p);
        static void sym_Expression (RDE_PARAM p);
        static void sequence_296 (RDE_PARAM p);
        static void sym_FinallyClause (RDE_PARAM p);
        static void sequence_306 (RDE_PARAM p);
        static void optional_308 (RDE_PARAM p);
        static void sequence_316 (RDE_PARAM p);
        static void sym_ForEachStatement (RDE_PARAM p);
        static void sequence_322 (RDE_PARAM p);
        static void sym_ForRangeIncrement (RDE_PARAM p);
        static void optional_334 (RDE_PARAM p);
        static void sequence_338 (RDE_PARAM p);
        static void choice_341 (RDE_PARAM p);
        static void sequence_343 (RDE_PARAM p);
        static void optional_345 (RDE_PARAM p);
        static void sequence_351 (RDE_PARAM p);
        static void sym_ForRangeStatement (RDE_PARAM p);
        static void kleene_355 (RDE_PARAM p);
        static void sequence_364 (RDE_PARAM p);
        static void sym_FunctionCall (RDE_PARAM p);
        static void sequence_380 (RDE_PARAM p);
        static void sym_FunctionDefinition (RDE_PARAM p);
        static void choice_386 (RDE_PARAM p);
        static void choice_391 (RDE_PARAM p);
        static void kleene_393 (RDE_PARAM p);
        static void sequence_395 (RDE_PARAM p);
        static void sym_Identifier (RDE_PARAM p);
        static void sequence_403 (RDE_PARAM p);
        static void kleene_405 (RDE_PARAM p);
        static void sequence_407 (RDE_PARAM p);
        static void sym_IdentifierList (RDE_PARAM p);
        static void sequence_419 (RDE_PARAM p);
        static void kleene_421 (RDE_PARAM p);
        static void sequence_425 (RDE_PARAM p);
        static void optional_427 (RDE_PARAM p);
        static void sequence_429 (RDE_PARAM p);
        static void sym_IfStatement (RDE_PARAM p);
        static void sequence_434 (RDE_PARAM p);
        static void sym_IndirectIdentifier (RDE_PARAM p);
        static void sequence_439 (RDE_PARAM p);
        static void sym_IndirectLiteral (RDE_PARAM p);
        static void sequence_449 (RDE_PARAM p);
        static void sym_ListCast (RDE_PARAM p);
        static void sequence_457 (RDE_PARAM p);
        static void kleene_459 (RDE_PARAM p);
        static void sequence_461 (RDE_PARAM p);
        static void sym_LogicalAndExpr (RDE_PARAM p);
        static void sym_LogicalAndOp (RDE_PARAM p);
        static void sequence_471 (RDE_PARAM p);
        static void kleene_473 (RDE_PARAM p);
        static void sequence_475 (RDE_PARAM p);
        static void sym_LogicalOrExpr (RDE_PARAM p);
        static void sym_LogicalOrOp (RDE_PARAM p);
        static void choice_484 (RDE_PARAM p);
        static void optional_486 (RDE_PARAM p);
        static void choice_493 (RDE_PARAM p);
        static void sequence_497 (RDE_PARAM p);
        static void optional_499 (RDE_PARAM p);
        static void sequence_501 (RDE_PARAM p);
        static void sym_LValue (RDE_PARAM p);
        static void sequence_509 (RDE_PARAM p);
        static void kleene_511 (RDE_PARAM p);
        static void sequence_513 (RDE_PARAM p);
        static void sym_MulExpr (RDE_PARAM p);
        static void sym_MulOp (RDE_PARAM p);
        static void poskleene_520 (RDE_PARAM p);
        static void sequence_522 (RDE_PARAM p);
        static void poskleene_525 (RDE_PARAM p);
        static void sequence_530 (RDE_PARAM p);
        static void optional_532 (RDE_PARAM p);
        static void optional_536 (RDE_PARAM p);
        static void sequence_540 (RDE_PARAM p);
        static void optional_542 (RDE_PARAM p);
        static void sequence_544 (RDE_PARAM p);
        static void choice_546 (RDE_PARAM p);
        static void sym_Number (RDE_PARAM p);
        static void sequence_554 (RDE_PARAM p);
        static void kleene_556 (RDE_PARAM p);
        static void sequence_562 (RDE_PARAM p);
        static void sym_OnHandler (RDE_PARAM p);
        static void choice_568 (RDE_PARAM p);
        static void poskleene_570 (RDE_PARAM p);
        static void sequence_572 (RDE_PARAM p);
        static void sym_OptionString (RDE_PARAM p);
        static void sequence_580 (RDE_PARAM p);
        static void optional_582 (RDE_PARAM p);
        static void sequence_584 (RDE_PARAM p);
        static void sym_Parameter (RDE_PARAM p);
        static void sequence_592 (RDE_PARAM p);
        static void kleene_594 (RDE_PARAM p);
        static void sequence_596 (RDE_PARAM p);
        static void optional_598 (RDE_PARAM p);
        static void sym_ParameterDefinitions (RDE_PARAM p);
        static void choice_603 (RDE_PARAM p);
        static void choice_607 (RDE_PARAM p);
        static void kleene_609 (RDE_PARAM p);
        static void sequence_611 (RDE_PARAM p);
        static void sym_ParameterIdentifier (RDE_PARAM p);
        static void notahead_616 (RDE_PARAM p);
        static void sequence_619 (RDE_PARAM p);
        static void kleene_621 (RDE_PARAM p);
        static void sequence_624 (RDE_PARAM p);
        static void sym_PlainString (RDE_PARAM p);
        static void sequence_630 (RDE_PARAM p);
        static void kleene_632 (RDE_PARAM p);
        static void sequence_634 (RDE_PARAM p);
        static void sym_PostfixExpr (RDE_PARAM p);
        static void choice_641 (RDE_PARAM p);
        static void sym_PostfixOp (RDE_PARAM p);
        static void sym_PowOp (RDE_PARAM p);
        static void sequence_659 (RDE_PARAM p);
        static void choice_661 (RDE_PARAM p);
        static void sym_PrimaryExpr (RDE_PARAM p);
        static void optional_666 (RDE_PARAM p);
        static void sequence_669 (RDE_PARAM p);
        static void sym_Program (RDE_PARAM p);
        static void sym_Quote (RDE_PARAM p);
        static void sequence_679 (RDE_PARAM p);
        static void optional_681 (RDE_PARAM p);
        static void sequence_683 (RDE_PARAM p);
        static void choice_686 (RDE_PARAM p);
        static void sym_RangeExpr (RDE_PARAM p);
        static void sym_RangeSeparator (RDE_PARAM p);
        static void sequence_696 (RDE_PARAM p);
        static void optional_698 (RDE_PARAM p);
        static void sequence_700 (RDE_PARAM p);
        static void sym_RelExpr (RDE_PARAM p);
        static void choice_714 (RDE_PARAM p);
        static void sym_RelOp (RDE_PARAM p);
        static void optional_723 (RDE_PARAM p);
        static void poskleene_726 (RDE_PARAM p);
        static void sequence_728 (RDE_PARAM p);
        static void choice_730 (RDE_PARAM p);
        static void sym_ReturnCode (RDE_PARAM p);
        static void sequence_736 (RDE_PARAM p);
        static void optional_738 (RDE_PARAM p);
        static void sequence_740 (RDE_PARAM p);
        static void sym_ReturnStatement (RDE_PARAM p);
        static void sequence_748 (RDE_PARAM p);
        static void optional_750 (RDE_PARAM p);
        static void sequence_759 (RDE_PARAM p);
        static void kleene_761 (RDE_PARAM p);
        static void sequence_763 (RDE_PARAM p);
        static void sym_SearchCommand (RDE_PARAM p);
        static void choice_768 (RDE_PARAM p);
        static void sym_SearchOption (RDE_PARAM p);
        static void sequence_774 (RDE_PARAM p);
        static void sym_SearchTarget (RDE_PARAM p);
        static void sequence_782 (RDE_PARAM p);
        static void sym_Selector (RDE_PARAM p);
        static void sym_SelectorContext (RDE_PARAM p);
        static void sequence_790 (RDE_PARAM p);
        static void choice_793 (RDE_PARAM p);
        static void sym_Separator (RDE_PARAM p);
        static void optional_799 (RDE_PARAM p);
        static void sequence_803 (RDE_PARAM p);
        static void sym_Sequence (RDE_PARAM p);
        static void sequence_811 (RDE_PARAM p);
        static void kleene_813 (RDE_PARAM p);
        static void sequence_815 (RDE_PARAM p);
        static void sym_SequenceContent (RDE_PARAM p);
        static void sym_SingleQuote (RDE_PARAM p);
        static void sequence_827 (RDE_PARAM p);
        static void optional_829 (RDE_PARAM p);
        static void sequence_833 (RDE_PARAM p);
        static void optional_835 (RDE_PARAM p);
        static void sequence_837 (RDE_PARAM p);
        static void sym_SortCommand (RDE_PARAM p);
        static void choice_844 (RDE_PARAM p);
        static void sym_SortOption (RDE_PARAM p);
        static void sequence_850 (RDE_PARAM p);
        static void kleene_852 (RDE_PARAM p);
        static void sequence_854 (RDE_PARAM p);
        static void sym_SortOptions (RDE_PARAM p);
        static void choice_871 (RDE_PARAM p);
        static void sym_Statement (RDE_PARAM p);
        static void choice_876 (RDE_PARAM p);
        static void sym_String (RDE_PARAM p);
        static void sequence_882 (RDE_PARAM p);
        static void sym_TableColumnDef (RDE_PARAM p);
        static void sequence_890 (RDE_PARAM p);
        static void kleene_892 (RDE_PARAM p);
        static void sequence_894 (RDE_PARAM p);
        static void sym_TableColumnDefs (RDE_PARAM p);
        static void sequence_902 (RDE_PARAM p);
        static void kleene_904 (RDE_PARAM p);
        static void sequence_906 (RDE_PARAM p);
        static void sym_TableColumnList (RDE_PARAM p);
        static void optional_914 (RDE_PARAM p);
        static void sequence_918 (RDE_PARAM p);
        static void sym_TableColumns (RDE_PARAM p);
        static void optional_926 (RDE_PARAM p);
        static void optional_932 (RDE_PARAM p);
        static void sequence_934 (RDE_PARAM p);
        static void sym_TableConstructor (RDE_PARAM p);
        static void sequence_939 (RDE_PARAM p);
        static void notahead_941 (RDE_PARAM p);
        static void sequence_944 (RDE_PARAM p);
        static void kleene_946 (RDE_PARAM p);
        static void sym_TclScript (RDE_PARAM p);
        static void ahead_953 (RDE_PARAM p);
        static void sequence_955 (RDE_PARAM p);
        static void sym_TclScriptBlock (RDE_PARAM p);
        static void choice_962 (RDE_PARAM p);
        static void sequence_964 (RDE_PARAM p);
        static void sym_TclScriptEndMarker (RDE_PARAM p);
        static void notahead_969 (RDE_PARAM p);
        static void sequence_972 (RDE_PARAM p);
        static void kleene_974 (RDE_PARAM p);
        static void sequence_977 (RDE_PARAM p);
        static void sym_TclString (RDE_PARAM p);
        static void sequence_987 (RDE_PARAM p);
        static void kleene_989 (RDE_PARAM p);
        static void sequence_991 (RDE_PARAM p);
        static void sym_ThrowStatement (RDE_PARAM p);
        static void sequence_1005 (RDE_PARAM p);
        static void sym_TrapHandler (RDE_PARAM p);
        static void choice_1016 (RDE_PARAM p);
        static void sequence_1018 (RDE_PARAM p);
        static void kleene_1020 (RDE_PARAM p);
        static void sequence_1024 (RDE_PARAM p);
        static void optional_1026 (RDE_PARAM p);
        static void sequence_1028 (RDE_PARAM p);
        static void sym_TryStatement (RDE_PARAM p);
        static void sequence_1035 (RDE_PARAM p);
        static void choice_1037 (RDE_PARAM p);
        static void sym_UnaryExpr (RDE_PARAM p);
        static void sym_UnaryOp (RDE_PARAM p);
        static void sequence_1049 (RDE_PARAM p);
        static void sym_WhileStatement (RDE_PARAM p);
        static void sequence_1054 (RDE_PARAM p);
        static void sequence_1059 (RDE_PARAM p);
        static void choice_1061 (RDE_PARAM p);
        static void kleene_1063 (RDE_PARAM p);
        static void sym_WS (RDE_PARAM p);
        static void kleene_1067 (RDE_PARAM p);
        static void sym_WSNL (RDE_PARAM p);
        static void poskleene_1078 (RDE_PARAM p);
        static void sym_WSob (RDE_PARAM p);
        
        /*
         * Precomputed table of strings (symbols, error messages, etc.).
         */
        
        static char const* p_string [318] = {
            /*        0 = */   "alnum",
            /*        1 = */   "alpha",
            /*        2 = */   "ascii",
            /*        3 = */   "control",
            /*        4 = */   "ddigit",
            /*        5 = */   "digit",
            /*        6 = */   "graph",
            /*        7 = */   "lower",
            /*        8 = */   "print",
            /*        9 = */   "punct",
            /*       10 = */   "space",
            /*       11 = */   "upper",
            /*       12 = */   "wordchar",
            /*       13 = */   "xdigit",
            /*       14 = */   "n AddExpr",
            /*       15 = */   "AddExpr",
            /*       16 = */   "cl +-",
            /*       17 = */   "n AddOp",
            /*       18 = */   "AddOp",
            /*       19 = */   "n Argument",
            /*       20 = */   "Argument",
            /*       21 = */   "t ,",
            /*       22 = */   "n ArgumentList",
            /*       23 = */   "ArgumentList",
            /*       24 = */   "n Assignment",
            /*       25 = */   "Assignment",
            /*       26 = */   "t =",
            /*       27 = */   "n AssignOp",
            /*       28 = */   "AssignOp",
            /*       29 = */   "t \\\\",
            /*       30 = */   "n Backslash",
            /*       31 = */   "Backslash",
            /*       32 = */   "n BitAndExpr",
            /*       33 = */   "BitAndExpr",
            /*       34 = */   "t &",
            /*       35 = */   "n BitAndOp",
            /*       36 = */   "BitAndOp",
            /*       37 = */   "n BitOrExpr",
            /*       38 = */   "BitOrExpr",
            /*       39 = */   "t |",
            /*       40 = */   "n BitOrOp",
            /*       41 = */   "BitOrOp",
            /*       42 = */   "n BitXorExpr",
            /*       43 = */   "BitXorExpr",
            /*       44 = */   "t ^",
            /*       45 = */   "n BitXorOp",
            /*       46 = */   "BitXorOp",
            /*       47 = */   "n Block",
            /*       48 = */   "Block",
            /*       49 = */   "str break",
            /*       50 = */   "n BreakStatement",
            /*       51 = */   "BreakStatement",
            /*       52 = */   "n BuiltIn",
            /*       53 = */   "BuiltIn",
            /*       54 = */   "t @",
            /*       55 = */   "t (",
            /*       56 = */   "t )",
            /*       57 = */   "n BuiltInCall",
            /*       58 = */   "BuiltInCall",
            /*       59 = */   "str delete",
            /*       60 = */   "str fill",
            /*       61 = */   "str inject",
            /*       62 = */   "str insert",
            /*       63 = */   "str lookup",
            /*       64 = */   "str reverse",
            /*       65 = */   "str sum",
            /*       66 = */   "n BuiltInFunction",
            /*       67 = */   "BuiltInFunction",
            /*       68 = */   "cl bfnrt",
            /*       69 = */   "t x",
            /*       70 = */   "t u",
            /*       71 = */   "t U",
            /*       72 = */   "dot",
            /*       73 = */   "n Char",
            /*       74 = */   "Char",
            /*       75 = */   "n ColumnConstructor",
            /*       76 = */   "ColumnConstructor",
            /*       77 = */   "n ColumnIdentifier",
            /*       78 = */   "ColumnIdentifier",
            /*       79 = */   "str boolean",
            /*       80 = */   "str byte",
            /*       81 = */   "str int",
            /*       82 = */   "str uint",
            /*       83 = */   "str wide",
            /*       84 = */   "str double",
            /*       85 = */   "str string",
            /*       86 = */   "str any",
            /*       87 = */   "n ColumnType",
            /*       88 = */   "ColumnType",
            /*       89 = */   "t #",
            /*       90 = */   "n Comment",
            /*       91 = */   "Comment",
            /*       92 = */   "str continue",
            /*       93 = */   "n ContinueStatement",
            /*       94 = */   "ContinueStatement",
            /*       95 = */   "str @dict",
            /*       96 = */   "n DictCast",
            /*       97 = */   "DictCast",
            /*       98 = */   "n Element",
            /*       99 = */   "Element",
            /*      100 = */   "n ElementIdentifier",
            /*      101 = */   "ElementIdentifier",
            /*      102 = */   "t .",
            /*      103 = */   "n ElementOp",
            /*      104 = */   "ElementOp",
            /*      105 = */   "str else",
            /*      106 = */   "t \\\173",
            /*      107 = */   "t \\\175",
            /*      108 = */   "n ElseClause",
            /*      109 = */   "ElseClause",
            /*      110 = */   "str elseif",
            /*      111 = */   "n ElseifClause",
            /*      112 = */   "ElseifClause",
            /*      113 = */   "n Empty",
            /*      114 = */   "Empty",
            /*      115 = */   "n EOF",
            /*      116 = */   "EOF",
            /*      117 = */   "t \173\n\175",
            /*      118 = */   "n EOL",
            /*      119 = */   "EOL",
            /*      120 = */   "n Expression",
            /*      121 = */   "Expression",
            /*      122 = */   "str finally",
            /*      123 = */   "n FinallyClause",
            /*      124 = */   "FinallyClause",
            /*      125 = */   "str foreach",
            /*      126 = */   "n ForEachStatement",
            /*      127 = */   "ForEachStatement",
            /*      128 = */   "t :",
            /*      129 = */   "n ForRangeIncrement",
            /*      130 = */   "ForRangeIncrement",
            /*      131 = */   "str for",
            /*      132 = */   "n ForRangeStatement",
            /*      133 = */   "ForRangeStatement",
            /*      134 = */   "n FunctionCall",
            /*      135 = */   "FunctionCall",
            /*      136 = */   "str function",
            /*      137 = */   "n FunctionDefinition",
            /*      138 = */   "FunctionDefinition",
            /*      139 = */   "t _",
            /*      140 = */   "str ::",
            /*      141 = */   "n Identifier",
            /*      142 = */   "Identifier",
            /*      143 = */   "n IdentifierList",
            /*      144 = */   "IdentifierList",
            /*      145 = */   "str if",
            /*      146 = */   "n IfStatement",
            /*      147 = */   "IfStatement",
            /*      148 = */   "t \173$\175",
            /*      149 = */   "n IndirectIdentifier",
            /*      150 = */   "IndirectIdentifier",
            /*      151 = */   "n IndirectLiteral",
            /*      152 = */   "IndirectLiteral",
            /*      153 = */   "str @list",
            /*      154 = */   "n ListCast",
            /*      155 = */   "ListCast",
            /*      156 = */   "n LogicalAndExpr",
            /*      157 = */   "LogicalAndExpr",
            /*      158 = */   "str &&",
            /*      159 = */   "n LogicalAndOp",
            /*      160 = */   "LogicalAndOp",
            /*      161 = */   "n LogicalOrExpr",
            /*      162 = */   "LogicalOrExpr",
            /*      163 = */   "str ||",
            /*      164 = */   "n LogicalOrOp",
            /*      165 = */   "LogicalOrOp",
            /*      166 = */   "t \173[\175",
            /*      167 = */   "t \\]",
            /*      168 = */   "n LValue",
            /*      169 = */   "LValue",
            /*      170 = */   "n MulExpr",
            /*      171 = */   "MulExpr",
            /*      172 = */   "cl */",
            /*      173 = */   "n MulOp",
            /*      174 = */   "MulOp",
            /*      175 = */   "str 0x",
            /*      176 = */   "cl eE",
            /*      177 = */   "n Number",
            /*      178 = */   "Number",
            /*      179 = */   "str on",
            /*      180 = */   "n OnHandler",
            /*      181 = */   "OnHandler",
            /*      182 = */   "t -",
            /*      183 = */   "cl _-",
            /*      184 = */   "n OptionString",
            /*      185 = */   "OptionString",
            /*      186 = */   "n Parameter",
            /*      187 = */   "Parameter",
            /*      188 = */   "n ParameterDefinitions",
            /*      189 = */   "ParameterDefinitions",
            /*      190 = */   "n ParameterIdentifier",
            /*      191 = */   "ParameterIdentifier",
            /*      192 = */   "n PlainString",
            /*      193 = */   "PlainString",
            /*      194 = */   "n PostfixExpr",
            /*      195 = */   "PostfixExpr",
            /*      196 = */   "n PostfixOp",
            /*      197 = */   "PostfixOp",
            /*      198 = */   "str **",
            /*      199 = */   "n PowOp",
            /*      200 = */   "PowOp",
            /*      201 = */   "n PrimaryExpr",
            /*      202 = */   "PrimaryExpr",
            /*      203 = */   "n Program",
            /*      204 = */   "Program",
            /*      205 = */   "t \173\"\175",
            /*      206 = */   "n Quote",
            /*      207 = */   "Quote",
            /*      208 = */   "n RangeExpr",
            /*      209 = */   "RangeExpr",
            /*      210 = */   "n RangeSeparator",
            /*      211 = */   "RangeSeparator",
            /*      212 = */   "n RelExpr",
            /*      213 = */   "RelExpr",
            /*      214 = */   "str ==",
            /*      215 = */   "str !=",
            /*      216 = */   "str <=",
            /*      217 = */   "str >=",
            /*      218 = */   "cl <>",
            /*      219 = */   "str =^",
            /*      220 = */   "str !^",
            /*      221 = */   "str ~^",
            /*      222 = */   "t ~",
            /*      223 = */   "str !~^",
            /*      224 = */   "str !~",
            /*      225 = */   "n RelOp",
            /*      226 = */   "RelOp",
            /*      227 = */   "str error",
            /*      228 = */   "str ok",
            /*      229 = */   "str return",
            /*      230 = */   "n ReturnCode",
            /*      231 = */   "ReturnCode",
            /*      232 = */   "n ReturnStatement",
            /*      233 = */   "ReturnStatement",
            /*      234 = */   "str @search",
            /*      235 = */   "n SearchCommand",
            /*      236 = */   "SearchCommand",
            /*      237 = */   "str inline",
            /*      238 = */   "str all",
            /*      239 = */   "n SearchOption",
            /*      240 = */   "SearchOption",
            /*      241 = */   "str ->",
            /*      242 = */   "n SearchTarget",
            /*      243 = */   "SearchTarget",
            /*      244 = */   "n Selector",
            /*      245 = */   "Selector",
            /*      246 = */   "str @@",
            /*      247 = */   "n SelectorContext",
            /*      248 = */   "SelectorContext",
            /*      249 = */   "t \173;\175",
            /*      250 = */   "n Separator",
            /*      251 = */   "Separator",
            /*      252 = */   "n Sequence",
            /*      253 = */   "Sequence",
            /*      254 = */   "n SequenceContent",
            /*      255 = */   "SequenceContent",
            /*      256 = */   "t '",
            /*      257 = */   "n SingleQuote",
            /*      258 = */   "SingleQuote",
            /*      259 = */   "str @sort",
            /*      260 = */   "n SortCommand",
            /*      261 = */   "SortCommand",
            /*      262 = */   "str indices",
            /*      263 = */   "str nocase",
            /*      264 = */   "str increasing",
            /*      265 = */   "str decreasing",
            /*      266 = */   "n SortOption",
            /*      267 = */   "SortOption",
            /*      268 = */   "n SortOptions",
            /*      269 = */   "SortOptions",
            /*      270 = */   "n Statement",
            /*      271 = */   "Statement",
            /*      272 = */   "n String",
            /*      273 = */   "String",
            /*      274 = */   "n TableColumnDef",
            /*      275 = */   "TableColumnDef",
            /*      276 = */   "n TableColumnDefs",
            /*      277 = */   "TableColumnDefs",
            /*      278 = */   "n TableColumnList",
            /*      279 = */   "TableColumnList",
            /*      280 = */   "n TableColumns",
            /*      281 = */   "TableColumns",
            /*      282 = */   "str @table",
            /*      283 = */   "n TableConstructor",
            /*      284 = */   "TableConstructor",
            /*      285 = */   "t >",
            /*      286 = */   "n TclScript",
            /*      287 = */   "TclScript",
            /*      288 = */   "t <",
            /*      289 = */   "n TclScriptBlock",
            /*      290 = */   "TclScriptBlock",
            /*      291 = */   "n TclScriptEndMarker",
            /*      292 = */   "TclScriptEndMarker",
            /*      293 = */   "n TclString",
            /*      294 = */   "TclString",
            /*      295 = */   "str throw",
            /*      296 = */   "n ThrowStatement",
            /*      297 = */   "ThrowStatement",
            /*      298 = */   "str trap",
            /*      299 = */   "n TrapHandler",
            /*      300 = */   "TrapHandler",
            /*      301 = */   "str try",
            /*      302 = */   "n TryStatement",
            /*      303 = */   "TryStatement",
            /*      304 = */   "n UnaryExpr",
            /*      305 = */   "UnaryExpr",
            /*      306 = */   "cl -+~!%",
            /*      307 = */   "n UnaryOp",
            /*      308 = */   "UnaryOp",
            /*      309 = */   "str while",
            /*      310 = */   "n WhileStatement",
            /*      311 = */   "WhileStatement",
            /*      312 = */   "n WS",
            /*      313 = */   "WS",
            /*      314 = */   "n WSNL",
            /*      315 = */   "WSNL",
            /*      316 = */   "n WSob",
            /*      317 = */   "WSob"
        };
        
        /*
         * Grammar Start Expression
         */
        
        static void MAIN (RDE_PARAM p) {
            sym_Program (p);
            return;
        }
        
        /*
         * value Symbol 'AddExpr'
         */
        
        static void sym_AddExpr (RDE_PARAM p) {
           /*
            * x
            *     (MulExpr)
            *     *
            *         x
            *             (WS)
            *             (AddOp)
            *             (WS)
            *             (MulExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 15)) return ;
            sequence_11 (p);
            rde_param_i_symbol_done_d_reduce (p, 15, 14);
            return;
        }
        
        static void sequence_11 (RDE_PARAM p) {
           /*
            * x
            *     (MulExpr)
            *     *
            *         x
            *             (WS)
            *             (AddOp)
            *             (WS)
            *             (MulExpr)
            */
        
            rde_param_i_state_push_value (p);
            sym_MulExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_9 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_9 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         (AddOp)
            *         (WS)
            *         (MulExpr)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_7 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_7 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (AddOp)
            *     (WS)
            *     (MulExpr)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_AddOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_MulExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'AddOp'
         */
        
        static void sym_AddOp (RDE_PARAM p) {
           /*
            * [+-]
            */
        
            if (rde_param_i_symbol_start (p, 18)) return ;
            rde_param_i_next_class (p, "+-", 16);
            rde_param_i_symbol_done_leaf (p, 18, 17);
            return;
        }
        
        /*
         * value Symbol 'Argument'
         */
        
        static void sym_Argument (RDE_PARAM p) {
           /*
            * /
            *     x
            *         (OptionString)
            *         (WS)
            *         (Expression)
            *     (Expression)
            */
        
            if (rde_param_i_symbol_start_d (p, 20)) return ;
            choice_22 (p);
            rde_param_i_symbol_done_d_reduce (p, 20, 19);
            return;
        }
        
        static void choice_22 (RDE_PARAM p) {
           /*
            * /
            *     x
            *         (OptionString)
            *         (WS)
            *         (Expression)
            *     (Expression)
            */
        
            rde_param_i_state_push_value (p);
            sequence_19 (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_Expression (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void sequence_19 (RDE_PARAM p) {
           /*
            * x
            *     (OptionString)
            *     (WS)
            *     (Expression)
            */
        
            rde_param_i_state_push_value (p);
            sym_OptionString (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_Expression (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'ArgumentList'
         */
        
        static void sym_ArgumentList (RDE_PARAM p) {
           /*
            * x
            *     (Argument)
            *     *
            *         x
            *             (WSNL)
            *             ','
            *             (WSNL)
            *             (Argument)
            */
        
            if (rde_param_i_symbol_start_d (p, 23)) return ;
            sequence_34 (p);
            rde_param_i_symbol_done_d_reduce (p, 23, 22);
            return;
        }
        
        static void sequence_34 (RDE_PARAM p) {
           /*
            * x
            *     (Argument)
            *     *
            *         x
            *             (WSNL)
            *             ','
            *             (WSNL)
            *             (Argument)
            */
        
            rde_param_i_state_push_value (p);
            sym_Argument (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_32 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_32 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WSNL)
            *         ','
            *         (WSNL)
            *         (Argument)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_30 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_30 (RDE_PARAM p) {
           /*
            * x
            *     (WSNL)
            *     ','
            *     (WSNL)
            *     (Argument)
            */
        
            rde_param_i_state_push_void (p);
            sym_WSNL (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, ",", 21);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Argument (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'Assignment'
         */
        
        static void sym_Assignment (RDE_PARAM p) {
           /*
            * x
            *     (LValue)
            *     (WS)
            *     (AssignOp)
            *     (WS)
            *     /
            *         (TclScriptBlock)
            *         (Expression)
            */
        
            if (rde_param_i_symbol_start_d (p, 25)) return ;
            sequence_45 (p);
            rde_param_i_symbol_done_d_reduce (p, 25, 24);
            return;
        }
        
        static void sequence_45 (RDE_PARAM p) {
           /*
            * x
            *     (LValue)
            *     (WS)
            *     (AssignOp)
            *     (WS)
            *     /
            *         (TclScriptBlock)
            *         (Expression)
            */
        
            rde_param_i_state_push_value (p);
            sym_LValue (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_AssignOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            choice_43 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void choice_43 (RDE_PARAM p) {
           /*
            * /
            *     (TclScriptBlock)
            *     (Expression)
            */
        
            rde_param_i_state_push_value (p);
            sym_TclScriptBlock (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_Expression (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'AssignOp'
         */
        
        static void sym_AssignOp (RDE_PARAM p) {
           /*
            * '='
            */
        
            if (rde_param_i_symbol_start (p, 28)) return ;
            rde_param_i_next_char (p, "=", 26);
            rde_param_i_symbol_done_leaf (p, 28, 27);
            return;
        }
        
        /*
         * void Symbol 'Backslash'
         */
        
        static void sym_Backslash (RDE_PARAM p) {
           /*
            * '\'
            */
        
            if (rde_param_i_symbol_void_start (p, 31)) return ;
            rde_param_i_next_char (p, "\\", 29);
            rde_param_i_symbol_done_void (p, 31, 30);
            return;
        }
        
        /*
         * value Symbol 'BitAndExpr'
         */
        
        static void sym_BitAndExpr (RDE_PARAM p) {
           /*
            * x
            *     (RelExpr)
            *     *
            *         x
            *             (WS)
            *             (BitAndOp)
            *             (WS)
            *             (RelExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 33)) return ;
            sequence_61 (p);
            rde_param_i_symbol_done_d_reduce (p, 33, 32);
            return;
        }
        
        static void sequence_61 (RDE_PARAM p) {
           /*
            * x
            *     (RelExpr)
            *     *
            *         x
            *             (WS)
            *             (BitAndOp)
            *             (WS)
            *             (RelExpr)
            */
        
            rde_param_i_state_push_value (p);
            sym_RelExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_59 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_59 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         (BitAndOp)
            *         (WS)
            *         (RelExpr)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_57 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_57 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (BitAndOp)
            *     (WS)
            *     (RelExpr)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_BitAndOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_RelExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'BitAndOp'
         */
        
        static void sym_BitAndOp (RDE_PARAM p) {
           /*
            * '&'
            */
        
            if (rde_param_i_symbol_start (p, 36)) return ;
            rde_param_i_next_char (p, "&", 34);
            rde_param_i_symbol_done_leaf (p, 36, 35);
            return;
        }
        
        /*
         * value Symbol 'BitOrExpr'
         */
        
        static void sym_BitOrExpr (RDE_PARAM p) {
           /*
            * x
            *     (BitXorExpr)
            *     *
            *         x
            *             (WS)
            *             (BitOrOp)
            *             (WS)
            *             (BitXorExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 38)) return ;
            sequence_75 (p);
            rde_param_i_symbol_done_d_reduce (p, 38, 37);
            return;
        }
        
        static void sequence_75 (RDE_PARAM p) {
           /*
            * x
            *     (BitXorExpr)
            *     *
            *         x
            *             (WS)
            *             (BitOrOp)
            *             (WS)
            *             (BitXorExpr)
            */
        
            rde_param_i_state_push_value (p);
            sym_BitXorExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_73 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_73 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         (BitOrOp)
            *         (WS)
            *         (BitXorExpr)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_71 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_71 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (BitOrOp)
            *     (WS)
            *     (BitXorExpr)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_BitOrOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_BitXorExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'BitOrOp'
         */
        
        static void sym_BitOrOp (RDE_PARAM p) {
           /*
            * '|'
            */
        
            if (rde_param_i_symbol_start (p, 41)) return ;
            rde_param_i_next_char (p, "|", 39);
            rde_param_i_symbol_done_leaf (p, 41, 40);
            return;
        }
        
        /*
         * value Symbol 'BitXorExpr'
         */
        
        static void sym_BitXorExpr (RDE_PARAM p) {
           /*
            * x
            *     (BitAndExpr)
            *     *
            *         x
            *             (WS)
            *             (BitXorOp)
            *             (WS)
            *             (BitAndExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 43)) return ;
            sequence_89 (p);
            rde_param_i_symbol_done_d_reduce (p, 43, 42);
            return;
        }
        
        static void sequence_89 (RDE_PARAM p) {
           /*
            * x
            *     (BitAndExpr)
            *     *
            *         x
            *             (WS)
            *             (BitXorOp)
            *             (WS)
            *             (BitAndExpr)
            */
        
            rde_param_i_state_push_value (p);
            sym_BitAndExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_87 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_87 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         (BitXorOp)
            *         (WS)
            *         (BitAndExpr)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_85 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_85 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (BitXorOp)
            *     (WS)
            *     (BitAndExpr)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_BitXorOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_BitAndExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'BitXorOp'
         */
        
        static void sym_BitXorOp (RDE_PARAM p) {
           /*
            * '^'
            */
        
            if (rde_param_i_symbol_start (p, 46)) return ;
            rde_param_i_next_char (p, "^", 44);
            rde_param_i_symbol_done_leaf (p, 46, 45);
            return;
        }
        
        /*
         * value Symbol 'Block'
         */
        
        static void sym_Block (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     ?
            *         x
            *             (Statement)
            *             *
            *                 x
            *                     (WS)
            *                     (Separator)
            *                     (WS)
            *                     (Statement)
            *     (WS)
            */
        
            if (rde_param_i_symbol_start_d (p, 48)) return ;
            sequence_109 (p);
            rde_param_i_symbol_done_d_reduce (p, 48, 47);
            return;
        }
        
        static void sequence_109 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     ?
            *         x
            *             (Statement)
            *             *
            *                 x
            *                     (WS)
            *                     (Separator)
            *                     (WS)
            *                     (Statement)
            *     (WS)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            optional_106 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_106 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (Statement)
            *         *
            *             x
            *                 (WS)
            *                 (Separator)
            *                 (WS)
            *                 (Statement)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_104 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_104 (RDE_PARAM p) {
           /*
            * x
            *     (Statement)
            *     *
            *         x
            *             (WS)
            *             (Separator)
            *             (WS)
            *             (Statement)
            */
        
            rde_param_i_state_push_value (p);
            sym_Statement (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_102 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_102 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         (Separator)
            *         (WS)
            *         (Statement)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_100 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_100 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (Separator)
            *     (WS)
            *     (Statement)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            sym_Separator (p);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Statement (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'BreakStatement'
         */
        
        static void sym_BreakStatement (RDE_PARAM p) {
           /*
            * "break"
            */
        
            if (rde_param_i_symbol_start (p, 51)) return ;
            rde_param_i_next_str (p, "break", 49);
            rde_param_i_symbol_done_leaf (p, 51, 50);
            return;
        }
        
        /*
         * value Symbol 'BuiltIn'
         */
        
        static void sym_BuiltIn (RDE_PARAM p) {
           /*
            * /
            *     (ColumnConstructor)
            *     (TableConstructor)
            *     (ListCast)
            *     (DictCast)
            *     (SortCommand)
            *     (SearchCommand)
            *     (SelectorContext)
            */
        
            if (rde_param_i_symbol_start_d (p, 53)) return ;
            choice_121 (p);
            rde_param_i_symbol_done_d_reduce (p, 53, 52);
            return;
        }
        
        static void choice_121 (RDE_PARAM p) {
           /*
            * /
            *     (ColumnConstructor)
            *     (TableConstructor)
            *     (ListCast)
            *     (DictCast)
            *     (SortCommand)
            *     (SearchCommand)
            *     (SelectorContext)
            */
        
            rde_param_i_state_push_value (p);
            sym_ColumnConstructor (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_TableConstructor (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_ListCast (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_DictCast (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_SortCommand (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_SearchCommand (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_SelectorContext (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'BuiltInCall'
         */
        
        static void sym_BuiltInCall (RDE_PARAM p) {
           /*
            * x
            *     '@'
            *     (BuiltInFunction)
            *     (WS)
            *     '\('
            *     (WSNL)
            *     ?
            *         (ArgumentList)
            *     (WSNL)
            *     '\)'
            */
        
            if (rde_param_i_symbol_start_d (p, 58)) return ;
            sequence_134 (p);
            rde_param_i_symbol_done_d_reduce (p, 58, 57);
            return;
        }
        
        static void sequence_134 (RDE_PARAM p) {
           /*
            * x
            *     '@'
            *     (BuiltInFunction)
            *     (WS)
            *     '\('
            *     (WSNL)
            *     ?
            *         (ArgumentList)
            *     (WSNL)
            *     '\)'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "@", 54);
            if (rde_param_i_seq_void2value(p)) return;
            sym_BuiltInFunction (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "(", 55);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_130 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, ")", 56);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_130 (RDE_PARAM p) {
           /*
            * ?
            *     (ArgumentList)
            */
        
            rde_param_i_state_push_2 (p);
            sym_ArgumentList (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        /*
         * leaf Symbol 'BuiltInFunction'
         */
        
        static void sym_BuiltInFunction (RDE_PARAM p) {
           /*
            * /
            *     "delete"
            *     "fill"
            *     "inject"
            *     "insert"
            *     "lookup"
            *     "reverse"
            *     "sum"
            */
        
            if (rde_param_i_symbol_start (p, 67)) return ;
            choice_144 (p);
            rde_param_i_symbol_done_leaf (p, 67, 66);
            return;
        }
        
        static void choice_144 (RDE_PARAM p) {
           /*
            * /
            *     "delete"
            *     "fill"
            *     "inject"
            *     "insert"
            *     "lookup"
            *     "reverse"
            *     "sum"
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "delete", 59);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "fill", 60);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "inject", 61);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "insert", 62);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "lookup", 63);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "reverse", 64);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "sum", 65);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * void Symbol 'Char'
         */
        
        static void sym_Char (RDE_PARAM p) {
           /*
            * /
            *     x
            *         (BackSlash)
            *         /
            *             (Quote)
            *             (SingleQuote)
            *             (BackSlash)
            *             [bfnrt]
            *             x
            *                 'x'
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *             x
            *                 'u'
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *             x
            *                 'U'
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *     <dot>
            */
        
            if (rde_param_i_symbol_void_start (p, 74)) return ;
            choice_181 (p);
            rde_param_i_symbol_done_void (p, 74, 73);
            return;
        }
        
        static void choice_181 (RDE_PARAM p) {
           /*
            * /
            *     x
            *         (BackSlash)
            *         /
            *             (Quote)
            *             (SingleQuote)
            *             (BackSlash)
            *             [bfnrt]
            *             x
            *                 'x'
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *             x
            *                 'u'
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *             x
            *                 'U'
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *                 <xdigit>
            *     <dot>
            */
        
            rde_param_i_state_push_void (p);
            sequence_178 (p);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_input_next (p, 72);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void sequence_178 (RDE_PARAM p) {
           /*
            * x
            *     (BackSlash)
            *     /
            *         (Quote)
            *         (SingleQuote)
            *         (BackSlash)
            *         [bfnrt]
            *         x
            *             'x'
            *             <xdigit>
            *             <xdigit>
            *             <xdigit>
            *         x
            *             'u'
            *             <xdigit>
            *             <xdigit>
            *             <xdigit>
            *             <xdigit>
            *         x
            *             'U'
            *             <xdigit>
            *             <xdigit>
            *             <xdigit>
            *             <xdigit>
            *             <xdigit>
            *             <xdigit>
            *             <xdigit>
            *             <xdigit>
            */
        
            rde_param_i_state_push_void (p);
            /* Undefined symbol 'BackSlash' */;
            rde_param_i_status_fail (p);
            if (rde_param_i_seq_void2void(p)) return;
            choice_176 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void choice_176 (RDE_PARAM p) {
           /*
            * /
            *     (Quote)
            *     (SingleQuote)
            *     (BackSlash)
            *     [bfnrt]
            *     x
            *         'x'
            *         <xdigit>
            *         <xdigit>
            *         <xdigit>
            *     x
            *         'u'
            *         <xdigit>
            *         <xdigit>
            *         <xdigit>
            *         <xdigit>
            *     x
            *         'U'
            *         <xdigit>
            *         <xdigit>
            *         <xdigit>
            *         <xdigit>
            *         <xdigit>
            *         <xdigit>
            *         <xdigit>
            *         <xdigit>
            */
        
            rde_param_i_state_push_void (p);
            sym_Quote (p);
            if (rde_param_i_bra_void2void(p)) return;
            sym_SingleQuote (p);
            if (rde_param_i_bra_void2void(p)) return;
            /* Undefined symbol 'BackSlash' */;
            rde_param_i_status_fail (p);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_class (p, "bfnrt", 68);
            if (rde_param_i_bra_void2void(p)) return;
            sequence_156 (p);
            if (rde_param_i_bra_void2void(p)) return;
            sequence_163 (p);
            if (rde_param_i_bra_void2void(p)) return;
            sequence_174 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void sequence_156 (RDE_PARAM p) {
           /*
            * x
            *     'x'
            *     <xdigit>
            *     <xdigit>
            *     <xdigit>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "x", 69);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void sequence_163 (RDE_PARAM p) {
           /*
            * x
            *     'u'
            *     <xdigit>
            *     <xdigit>
            *     <xdigit>
            *     <xdigit>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "u", 70);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void sequence_174 (RDE_PARAM p) {
           /*
            * x
            *     'U'
            *     <xdigit>
            *     <xdigit>
            *     <xdigit>
            *     <xdigit>
            *     <xdigit>
            *     <xdigit>
            *     <xdigit>
            *     <xdigit>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "U", 71);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_xdigit (p, 13);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * value Symbol 'ColumnConstructor'
         */
        
        static void sym_ColumnConstructor (RDE_PARAM p) {
           /*
            * x
            *     '@'
            *     (ColumnType)
            *     ?
            *         /
            *             x
            *                 (WS)
            *                 (Sequence)
            *             x
            *                 (WS)
            *                 '\('
            *                 (WS)
            *                 (Expression)
            *                 (WS)
            *                 '\)'
            */
        
            if (rde_param_i_symbol_start_d (p, 76)) return ;
            sequence_202 (p);
            rde_param_i_symbol_done_d_reduce (p, 76, 75);
            return;
        }
        
        static void sequence_202 (RDE_PARAM p) {
           /*
            * x
            *     '@'
            *     (ColumnType)
            *     ?
            *         /
            *             x
            *                 (WS)
            *                 (Sequence)
            *             x
            *                 (WS)
            *                 '\('
            *                 (WS)
            *                 (Expression)
            *                 (WS)
            *                 '\)'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "@", 54);
            if (rde_param_i_seq_void2value(p)) return;
            sym_ColumnType (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_200 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_200 (RDE_PARAM p) {
           /*
            * ?
            *     /
            *         x
            *             (WS)
            *             (Sequence)
            *         x
            *             (WS)
            *             '\('
            *             (WS)
            *             (Expression)
            *             (WS)
            *             '\)'
            */
        
            rde_param_i_state_push_2 (p);
            choice_198 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void choice_198 (RDE_PARAM p) {
           /*
            * /
            *     x
            *         (WS)
            *         (Sequence)
            *     x
            *         (WS)
            *         '\('
            *         (WS)
            *         (Expression)
            *         (WS)
            *         '\)'
            */
        
            rde_param_i_state_push_value (p);
            sequence_188 (p);
            if (rde_param_i_bra_value2value(p)) return;
            sequence_196 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void sequence_188 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (Sequence)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Sequence (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void sequence_196 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     '\('
            *     (WS)
            *     (Expression)
            *     (WS)
            *     '\)'
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, "(", 55);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, ")", 56);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'ColumnIdentifier'
         */
        
        static void sym_ColumnIdentifier (RDE_PARAM p) {
           /*
            * /
            *     (Identifier)
            *     (IndirectIdentifier)
            *     (IndirectLiteral)
            *     (String)
            *     (Number)
            */
        
            if (rde_param_i_symbol_start_d (p, 78)) return ;
            choice_210 (p);
            rde_param_i_symbol_done_d_reduce (p, 78, 77);
            return;
        }
        
        static void choice_210 (RDE_PARAM p) {
           /*
            * /
            *     (Identifier)
            *     (IndirectIdentifier)
            *     (IndirectLiteral)
            *     (String)
            *     (Number)
            */
        
            rde_param_i_state_push_value (p);
            sym_Identifier (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_IndirectIdentifier (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_IndirectLiteral (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_String (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_Number (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'ColumnType'
         */
        
        static void sym_ColumnType (RDE_PARAM p) {
           /*
            * /
            *     "boolean"
            *     "byte"
            *     "int"
            *     "uint"
            *     "wide"
            *     "double"
            *     "string"
            *     "any"
            */
        
            if (rde_param_i_symbol_start (p, 88)) return ;
            choice_221 (p);
            rde_param_i_symbol_done_leaf (p, 88, 87);
            return;
        }
        
        static void choice_221 (RDE_PARAM p) {
           /*
            * /
            *     "boolean"
            *     "byte"
            *     "int"
            *     "uint"
            *     "wide"
            *     "double"
            *     "string"
            *     "any"
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "boolean", 79);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "byte", 80);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "int", 81);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "uint", 82);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "wide", 83);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "double", 84);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "string", 85);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "any", 86);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * void Symbol 'Comment'
         */
        
        static void sym_Comment (RDE_PARAM p) {
           /*
            * x
            *     '#'
            *     *
            *         x
            *             !
            *                 (EOL)
            *             <dot>
            */
        
            if (rde_param_i_symbol_void_start (p, 91)) return ;
            sequence_233 (p);
            rde_param_i_symbol_done_void (p, 91, 90);
            return;
        }
        
        static void sequence_233 (RDE_PARAM p) {
           /*
            * x
            *     '#'
            *     *
            *         x
            *             !
            *                 (EOL)
            *             <dot>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "#", 89);
            if (rde_param_i_seq_void2void(p)) return;
            kleene_231 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void kleene_231 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         !
            *             (EOL)
            *         <dot>
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_229 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_229 (RDE_PARAM p) {
           /*
            * x
            *     !
            *         (EOL)
            *     <dot>
            */
        
            rde_param_i_state_push_void (p);
            notahead_226 (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_input_next (p, 72);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void notahead_226 (RDE_PARAM p) {
           /*
            * !
            *     (EOL)
            */
        
            rde_param_i_loc_push (p);
            sym_EOL (p);
            rde_param_i_notahead_exit (p);
            return;
        }
        
        /*
         * value Symbol 'ContinueStatement'
         */
        
        static void sym_ContinueStatement (RDE_PARAM p) {
           /*
            * "continue"
            */
        
            if (rde_param_i_symbol_start (p, 94)) return ;
            rde_param_i_next_str (p, "continue", 92);
            rde_param_i_symbol_done_leaf (p, 94, 93);
            return;
        }
        
        /*
         * value Symbol 'DictCast'
         */
        
        static void sym_DictCast (RDE_PARAM p) {
           /*
            * x
            *     "@dict"
            *     (WS)
            *     '\('
            *     (WS)
            *     (Expression)
            *     (WS)
            *     '\)'
            */
        
            if (rde_param_i_symbol_start_d (p, 97)) return ;
            sequence_245 (p);
            rde_param_i_symbol_done_d_reduce (p, 97, 96);
            return;
        }
        
        static void sequence_245 (RDE_PARAM p) {
           /*
            * x
            *     "@dict"
            *     (WS)
            *     '\('
            *     (WS)
            *     (Expression)
            *     (WS)
            *     '\)'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "@dict", 95);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, "(", 55);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, ")", 56);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'Element'
         */
        
        static void sym_Element (RDE_PARAM p) {
           /*
            * x
            *     (ElementOp)
            *     (WS)
            *     (ElementIdentifier)
            */
        
            if (rde_param_i_symbol_start_d (p, 99)) return ;
            sequence_251 (p);
            rde_param_i_symbol_done_d_reduce (p, 99, 98);
            return;
        }
        
        static void sequence_251 (RDE_PARAM p) {
           /*
            * x
            *     (ElementOp)
            *     (WS)
            *     (ElementIdentifier)
            */
        
            rde_param_i_state_push_value (p);
            sym_ElementOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_ElementIdentifier (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'ElementIdentifier'
         */
        
        static void sym_ElementIdentifier (RDE_PARAM p) {
           /*
            * /
            *     (Identifier)
            *     (IndirectIdentifier)
            *     (IndirectLiteral)
            *     (String)
            *     (Number)
            */
        
            if (rde_param_i_symbol_start_d (p, 101)) return ;
            choice_210 (p);
            rde_param_i_symbol_done_d_reduce (p, 101, 100);
            return;
        }
        
        /*
         * leaf Symbol 'ElementOp'
         */
        
        static void sym_ElementOp (RDE_PARAM p) {
           /*
            * '.'
            */
        
            if (rde_param_i_symbol_start (p, 104)) return ;
            rde_param_i_next_char (p, ".", 102);
            rde_param_i_symbol_done_leaf (p, 104, 103);
            return;
        }
        
        /*
         * value Symbol 'ElseClause'
         */
        
        static void sym_ElseClause (RDE_PARAM p) {
           /*
            * x
            *     "else"
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            if (rde_param_i_symbol_start_d (p, 109)) return ;
            sequence_268 (p);
            rde_param_i_symbol_done_d_reduce (p, 109, 108);
            return;
        }
        
        static void sequence_268 (RDE_PARAM p) {
           /*
            * x
            *     "else"
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "else", 105);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, "\173", 106);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Block (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\175", 107);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'ElseifClause'
         */
        
        static void sym_ElseifClause (RDE_PARAM p) {
           /*
            * x
            *     "elseif"
            *     (WSob)
            *     (Expression)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            if (rde_param_i_symbol_start_d (p, 112)) return ;
            sequence_278 (p);
            rde_param_i_symbol_done_d_reduce (p, 112, 111);
            return;
        }
        
        static void sequence_278 (RDE_PARAM p) {
           /*
            * x
            *     "elseif"
            *     (WSob)
            *     (Expression)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "elseif", 110);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\173", 106);
            if (rde_param_i_seq_value2value(p)) return;
            sym_Block (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\175", 107);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * void Symbol 'Empty'
         */
        
        static void sym_Empty (RDE_PARAM p) {
           /*
            * (WS)
            */
        
            if (rde_param_i_symbol_void_start (p, 114)) return ;
            sym_WS (p);
            rde_param_i_symbol_done_void (p, 114, 113);
            return;
        }
        
        /*
         * void Symbol 'EOF'
         */
        
        static void sym_EOF (RDE_PARAM p) {
           /*
            * !
            *     <dot>
            */
        
            if (rde_param_i_symbol_void_start (p, 116)) return ;
            notahead_284 (p);
            rde_param_i_symbol_done_void (p, 116, 115);
            return;
        }
        
        static void notahead_284 (RDE_PARAM p) {
           /*
            * !
            *     <dot>
            */
        
            rde_param_i_loc_push (p);
            rde_param_i_input_next (p, 72);
            rde_param_i_notahead_exit (p);
            return;
        }
        
        /*
         * void Symbol 'EOL'
         */
        
        static void sym_EOL (RDE_PARAM p) {
           /*
            * '\n'
            */
        
            if (rde_param_i_symbol_void_start (p, 119)) return ;
            rde_param_i_next_char (p, "\n", 117);
            rde_param_i_symbol_done_void (p, 119, 118);
            return;
        }
        
        /*
         * value Symbol 'Expression'
         */
        
        static void sym_Expression (RDE_PARAM p) {
           /*
            * (LogicalOrExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 121)) return ;
            sym_LogicalOrExpr (p);
            rde_param_i_symbol_done_d_reduce (p, 121, 120);
            return;
        }
        
        /*
         * value Symbol 'FinallyClause'
         */
        
        static void sym_FinallyClause (RDE_PARAM p) {
           /*
            * x
            *     "finally"
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            if (rde_param_i_symbol_start_d (p, 124)) return ;
            sequence_296 (p);
            rde_param_i_symbol_done_d_reduce (p, 124, 123);
            return;
        }
        
        static void sequence_296 (RDE_PARAM p) {
           /*
            * x
            *     "finally"
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "finally", 122);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, "\173", 106);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Block (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\175", 107);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'ForEachStatement'
         */
        
        static void sym_ForEachStatement (RDE_PARAM p) {
           /*
            * x
            *     "foreach"
            *     (WSob)
            *     (Identifier)
            *     ?
            *         x
            *             (WS)
            *             ','
            *             (WS)
            *             (Identifier)
            *     (WSob)
            *     (Expression)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            if (rde_param_i_symbol_start_d (p, 127)) return ;
            sequence_316 (p);
            rde_param_i_symbol_done_d_reduce (p, 127, 126);
            return;
        }
        
        static void sequence_316 (RDE_PARAM p) {
           /*
            * x
            *     "foreach"
            *     (WSob)
            *     (Identifier)
            *     ?
            *         x
            *             (WS)
            *             ','
            *             (WS)
            *             (Identifier)
            *     (WSob)
            *     (Expression)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "foreach", 125);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Identifier (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_308 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_Expression (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\173", 106);
            if (rde_param_i_seq_value2value(p)) return;
            sym_Block (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\175", 107);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_308 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (WS)
            *         ','
            *         (WS)
            *         (Identifier)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_306 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_306 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     ','
            *     (WS)
            *     (Identifier)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, ",", 21);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Identifier (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'ForRangeIncrement'
         */
        
        static void sym_ForRangeIncrement (RDE_PARAM p) {
           /*
            * x
            *     ':'
            *     (WS)
            *     (AddExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 130)) return ;
            sequence_322 (p);
            rde_param_i_symbol_done_d_reduce (p, 130, 129);
            return;
        }
        
        static void sequence_322 (RDE_PARAM p) {
           /*
            * x
            *     ':'
            *     (WS)
            *     (AddExpr)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, ":", 128);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_AddExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'ForRangeStatement'
         */
        
        static void sym_ForRangeStatement (RDE_PARAM p) {
           /*
            * x
            *     "for"
            *     (WSob)
            *     (Identifier)
            *     (WSob)
            *     (AddExpr)
            *     ?
            *         x
            *             (WS)
            *             ':'
            *             (WS)
            *             /
            *                 x
            *                     ?
            *                         (AddExpr)
            *                     (WS)
            *                     (ForRangeIncrement)
            *                 (AddExpr)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            if (rde_param_i_symbol_start_d (p, 133)) return ;
            sequence_351 (p);
            rde_param_i_symbol_done_d_reduce (p, 133, 132);
            return;
        }
        
        static void sequence_351 (RDE_PARAM p) {
           /*
            * x
            *     "for"
            *     (WSob)
            *     (Identifier)
            *     (WSob)
            *     (AddExpr)
            *     ?
            *         x
            *             (WS)
            *             ':'
            *             (WS)
            *             /
            *                 x
            *                     ?
            *                         (AddExpr)
            *                     (WS)
            *                     (ForRangeIncrement)
            *                 (AddExpr)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "for", 131);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Identifier (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_AddExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_345 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\173", 106);
            if (rde_param_i_seq_value2value(p)) return;
            sym_Block (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\175", 107);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_345 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (WS)
            *         ':'
            *         (WS)
            *         /
            *             x
            *                 ?
            *                     (AddExpr)
            *                 (WS)
            *                 (ForRangeIncrement)
            *             (AddExpr)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_343 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_343 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     ':'
            *     (WS)
            *     /
            *         x
            *             ?
            *                 (AddExpr)
            *             (WS)
            *             (ForRangeIncrement)
            *         (AddExpr)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, ":", 128);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            choice_341 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void choice_341 (RDE_PARAM p) {
           /*
            * /
            *     x
            *         ?
            *             (AddExpr)
            *         (WS)
            *         (ForRangeIncrement)
            *     (AddExpr)
            */
        
            rde_param_i_state_push_value (p);
            sequence_338 (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_AddExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void sequence_338 (RDE_PARAM p) {
           /*
            * x
            *     ?
            *         (AddExpr)
            *     (WS)
            *     (ForRangeIncrement)
            */
        
            rde_param_i_state_push_value (p);
            optional_334 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_ForRangeIncrement (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_334 (RDE_PARAM p) {
           /*
            * ?
            *     (AddExpr)
            */
        
            rde_param_i_state_push_2 (p);
            sym_AddExpr (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        /*
         * value Symbol 'FunctionCall'
         */
        
        static void sym_FunctionCall (RDE_PARAM p) {
           /*
            * x
            *     *
            *         (Element)
            *     (WS)
            *     '\('
            *     (WSNL)
            *     ?
            *         (ArgumentList)
            *     (WSNL)
            *     '\)'
            */
        
            if (rde_param_i_symbol_start_d (p, 135)) return ;
            sequence_364 (p);
            rde_param_i_symbol_done_d_reduce (p, 135, 134);
            return;
        }
        
        static void sequence_364 (RDE_PARAM p) {
           /*
            * x
            *     *
            *         (Element)
            *     (WS)
            *     '\('
            *     (WSNL)
            *     ?
            *         (ArgumentList)
            *     (WSNL)
            *     '\)'
            */
        
            rde_param_i_state_push_value (p);
            kleene_355 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "(", 55);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_130 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, ")", 56);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_355 (RDE_PARAM p) {
           /*
            * *
            *     (Element)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sym_Element (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        /*
         * value Symbol 'FunctionDefinition'
         */
        
        static void sym_FunctionDefinition (RDE_PARAM p) {
           /*
            * x
            *     "function"
            *     (WSob)
            *     (Identifier)
            *     (WS)
            *     '\('
            *     (WS)
            *     (ParameterDefinitions)
            *     (WS)
            *     '\)'
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            if (rde_param_i_symbol_start_d (p, 138)) return ;
            sequence_380 (p);
            rde_param_i_symbol_done_d_reduce (p, 138, 137);
            return;
        }
        
        static void sequence_380 (RDE_PARAM p) {
           /*
            * x
            *     "function"
            *     (WSob)
            *     (Identifier)
            *     (WS)
            *     '\('
            *     (WS)
            *     (ParameterDefinitions)
            *     (WS)
            *     '\)'
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "function", 136);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Identifier (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "(", 55);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_ParameterDefinitions (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, ")", 56);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\173", 106);
            if (rde_param_i_seq_value2value(p)) return;
            sym_Block (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\175", 107);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'Identifier'
         */
        
        static void sym_Identifier (RDE_PARAM p) {
           /*
            * x
            *     /
            *         '_'
            *         "::"
            *         <alpha>
            *     *
            *         /
            *             '_'
            *             "::"
            *             <alnum>
            */
        
            if (rde_param_i_symbol_start (p, 142)) return ;
            sequence_395 (p);
            rde_param_i_symbol_done_leaf (p, 142, 141);
            return;
        }
        
        static void sequence_395 (RDE_PARAM p) {
           /*
            * x
            *     /
            *         '_'
            *         "::"
            *         <alpha>
            *     *
            *         /
            *             '_'
            *             "::"
            *             <alnum>
            */
        
            rde_param_i_state_push_void (p);
            choice_386 (p);
            if (rde_param_i_seq_void2void(p)) return;
            kleene_393 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void choice_386 (RDE_PARAM p) {
           /*
            * /
            *     '_'
            *     "::"
            *     <alpha>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "_", 139);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "::", 140);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_alpha (p, 1);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void kleene_393 (RDE_PARAM p) {
           /*
            * *
            *     /
            *         '_'
            *         "::"
            *         <alnum>
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                choice_391 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void choice_391 (RDE_PARAM p) {
           /*
            * /
            *     '_'
            *     "::"
            *     <alnum>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "_", 139);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "::", 140);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_alnum (p, 0);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * value Symbol 'IdentifierList'
         */
        
        static void sym_IdentifierList (RDE_PARAM p) {
           /*
            * x
            *     (Identifier)
            *     *
            *         x
            *             (WSNL)
            *             ','
            *             (WSNL)
            *             (Identifier)
            */
        
            if (rde_param_i_symbol_start_d (p, 144)) return ;
            sequence_407 (p);
            rde_param_i_symbol_done_d_reduce (p, 144, 143);
            return;
        }
        
        static void sequence_407 (RDE_PARAM p) {
           /*
            * x
            *     (Identifier)
            *     *
            *         x
            *             (WSNL)
            *             ','
            *             (WSNL)
            *             (Identifier)
            */
        
            rde_param_i_state_push_value (p);
            sym_Identifier (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_405 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_405 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WSNL)
            *         ','
            *         (WSNL)
            *         (Identifier)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_403 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_403 (RDE_PARAM p) {
           /*
            * x
            *     (WSNL)
            *     ','
            *     (WSNL)
            *     (Identifier)
            */
        
            rde_param_i_state_push_void (p);
            sym_WSNL (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, ",", 21);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Identifier (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'IfStatement'
         */
        
        static void sym_IfStatement (RDE_PARAM p) {
           /*
            * x
            *     "if"
            *     (WSob)
            *     (Expression)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            *     *
            *         x
            *             (WSob)
            *             (ElseifClause)
            *     ?
            *         x
            *             (WSob)
            *             (ElseClause)
            */
        
            if (rde_param_i_symbol_start_d (p, 147)) return ;
            sequence_429 (p);
            rde_param_i_symbol_done_d_reduce (p, 147, 146);
            return;
        }
        
        static void sequence_429 (RDE_PARAM p) {
           /*
            * x
            *     "if"
            *     (WSob)
            *     (Expression)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            *     *
            *         x
            *             (WSob)
            *             (ElseifClause)
            *     ?
            *         x
            *             (WSob)
            *             (ElseClause)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "if", 145);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\173", 106);
            if (rde_param_i_seq_value2value(p)) return;
            sym_Block (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\175", 107);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_421 (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_427 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_421 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WSob)
            *         (ElseifClause)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_419 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_419 (RDE_PARAM p) {
           /*
            * x
            *     (WSob)
            *     (ElseifClause)
            */
        
            rde_param_i_state_push_void (p);
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_ElseifClause (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_427 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (WSob)
            *         (ElseClause)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_425 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_425 (RDE_PARAM p) {
           /*
            * x
            *     (WSob)
            *     (ElseClause)
            */
        
            rde_param_i_state_push_void (p);
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_ElseClause (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'IndirectIdentifier'
         */
        
        static void sym_IndirectIdentifier (RDE_PARAM p) {
           /*
            * x
            *     '$'
            *     (Identifier)
            */
        
            if (rde_param_i_symbol_start_d (p, 150)) return ;
            sequence_434 (p);
            rde_param_i_symbol_done_d_leaf (p, 150, 149);
            return;
        }
        
        static void sequence_434 (RDE_PARAM p) {
           /*
            * x
            *     '$'
            *     (Identifier)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "$", 148);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Identifier (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'IndirectLiteral'
         */
        
        static void sym_IndirectLiteral (RDE_PARAM p) {
           /*
            * x
            *     '$'
            *     (String)
            */
        
            if (rde_param_i_symbol_start_d (p, 152)) return ;
            sequence_439 (p);
            rde_param_i_symbol_done_d_reduce (p, 152, 151);
            return;
        }
        
        static void sequence_439 (RDE_PARAM p) {
           /*
            * x
            *     '$'
            *     (String)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "$", 148);
            if (rde_param_i_seq_void2value(p)) return;
            sym_String (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'ListCast'
         */
        
        static void sym_ListCast (RDE_PARAM p) {
           /*
            * x
            *     "@list"
            *     (WS)
            *     '\('
            *     (WS)
            *     (Expression)
            *     (WS)
            *     '\)'
            */
        
            if (rde_param_i_symbol_start_d (p, 155)) return ;
            sequence_449 (p);
            rde_param_i_symbol_done_d_reduce (p, 155, 154);
            return;
        }
        
        static void sequence_449 (RDE_PARAM p) {
           /*
            * x
            *     "@list"
            *     (WS)
            *     '\('
            *     (WS)
            *     (Expression)
            *     (WS)
            *     '\)'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "@list", 153);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, "(", 55);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, ")", 56);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'LogicalAndExpr'
         */
        
        static void sym_LogicalAndExpr (RDE_PARAM p) {
           /*
            * x
            *     (RangeExpr)
            *     *
            *         x
            *             (WS)
            *             (LogicalAndOp)
            *             (WS)
            *             (RangeExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 157)) return ;
            sequence_461 (p);
            rde_param_i_symbol_done_d_reduce (p, 157, 156);
            return;
        }
        
        static void sequence_461 (RDE_PARAM p) {
           /*
            * x
            *     (RangeExpr)
            *     *
            *         x
            *             (WS)
            *             (LogicalAndOp)
            *             (WS)
            *             (RangeExpr)
            */
        
            rde_param_i_state_push_value (p);
            sym_RangeExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_459 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_459 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         (LogicalAndOp)
            *         (WS)
            *         (RangeExpr)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_457 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_457 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (LogicalAndOp)
            *     (WS)
            *     (RangeExpr)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_LogicalAndOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_RangeExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'LogicalAndOp'
         */
        
        static void sym_LogicalAndOp (RDE_PARAM p) {
           /*
            * "&&"
            */
        
            if (rde_param_i_symbol_start (p, 160)) return ;
            rde_param_i_next_str (p, "&&", 158);
            rde_param_i_symbol_done_leaf (p, 160, 159);
            return;
        }
        
        /*
         * value Symbol 'LogicalOrExpr'
         */
        
        static void sym_LogicalOrExpr (RDE_PARAM p) {
           /*
            * x
            *     (LogicalAndExpr)
            *     *
            *         x
            *             (WS)
            *             (LogicalOrOp)
            *             (WS)
            *             (LogicalAndExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 162)) return ;
            sequence_475 (p);
            rde_param_i_symbol_done_d_reduce (p, 162, 161);
            return;
        }
        
        static void sequence_475 (RDE_PARAM p) {
           /*
            * x
            *     (LogicalAndExpr)
            *     *
            *         x
            *             (WS)
            *             (LogicalOrOp)
            *             (WS)
            *             (LogicalAndExpr)
            */
        
            rde_param_i_state_push_value (p);
            sym_LogicalAndExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_473 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_473 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         (LogicalOrOp)
            *         (WS)
            *         (LogicalAndExpr)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_471 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_471 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (LogicalOrOp)
            *     (WS)
            *     (LogicalAndExpr)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_LogicalOrOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_LogicalAndExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'LogicalOrOp'
         */
        
        static void sym_LogicalOrOp (RDE_PARAM p) {
           /*
            * "||"
            */
        
            if (rde_param_i_symbol_start (p, 165)) return ;
            rde_param_i_next_str (p, "||", 163);
            rde_param_i_symbol_done_leaf (p, 165, 164);
            return;
        }
        
        /*
         * value Symbol 'LValue'
         */
        
        static void sym_LValue (RDE_PARAM p) {
           /*
            * x
            *     (Identifier)
            *     (WS)
            *     ?
            *         /
            *             (Element)
            *             (TableColumns)
            *     ?
            *         x
            *             (WS)
            *             '['
            *             (WS)
            *             /
            *                 (Range)
            *                 (Expression)
            *             (WS)
            *             ']'
            */
        
            if (rde_param_i_symbol_start_d (p, 169)) return ;
            sequence_501 (p);
            rde_param_i_symbol_done_d_reduce (p, 169, 168);
            return;
        }
        
        static void sequence_501 (RDE_PARAM p) {
           /*
            * x
            *     (Identifier)
            *     (WS)
            *     ?
            *         /
            *             (Element)
            *             (TableColumns)
            *     ?
            *         x
            *             (WS)
            *             '['
            *             (WS)
            *             /
            *                 (Range)
            *                 (Expression)
            *             (WS)
            *             ']'
            */
        
            rde_param_i_state_push_value (p);
            sym_Identifier (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_486 (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_499 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_486 (RDE_PARAM p) {
           /*
            * ?
            *     /
            *         (Element)
            *         (TableColumns)
            */
        
            rde_param_i_state_push_2 (p);
            choice_484 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void choice_484 (RDE_PARAM p) {
           /*
            * /
            *     (Element)
            *     (TableColumns)
            */
        
            rde_param_i_state_push_value (p);
            sym_Element (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_TableColumns (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_499 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (WS)
            *         '['
            *         (WS)
            *         /
            *             (Range)
            *             (Expression)
            *         (WS)
            *         ']'
            */
        
            rde_param_i_state_push_2 (p);
            sequence_497 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_497 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     '['
            *     (WS)
            *     /
            *         (Range)
            *         (Expression)
            *     (WS)
            *     ']'
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, "[", 166);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            choice_493 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "]", 167);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void choice_493 (RDE_PARAM p) {
           /*
            * /
            *     (Range)
            *     (Expression)
            */
        
            rde_param_i_state_push_void (p);
            /* Undefined symbol 'Range' */;
            rde_param_i_status_fail (p);
            if (rde_param_i_bra_void2value(p)) return;
            sym_Expression (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'MulExpr'
         */
        
        static void sym_MulExpr (RDE_PARAM p) {
           /*
            * x
            *     (UnaryExpr)
            *     *
            *         x
            *             (WS)
            *             (MulOp)
            *             (WS)
            *             (UnaryExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 171)) return ;
            sequence_513 (p);
            rde_param_i_symbol_done_d_reduce (p, 171, 170);
            return;
        }
        
        static void sequence_513 (RDE_PARAM p) {
           /*
            * x
            *     (UnaryExpr)
            *     *
            *         x
            *             (WS)
            *             (MulOp)
            *             (WS)
            *             (UnaryExpr)
            */
        
            rde_param_i_state_push_value (p);
            sym_UnaryExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_511 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_511 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         (MulOp)
            *         (WS)
            *         (UnaryExpr)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_509 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_509 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (MulOp)
            *     (WS)
            *     (UnaryExpr)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_MulOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_UnaryExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'MulOp'
         */
        
        static void sym_MulOp (RDE_PARAM p) {
           /*
            * [\u002a\u002f]
            */
        
            if (rde_param_i_symbol_start (p, 174)) return ;
            rde_param_i_next_class (p, "*/", 172);
            rde_param_i_symbol_done_leaf (p, 174, 173);
            return;
        }
        
        /*
         * leaf Symbol 'Number'
         */
        
        static void sym_Number (RDE_PARAM p) {
           /*
            * /
            *     x
            *         "0x"
            *         +
            *             <xdigit>
            *     x
            *         +
            *             <ddigit>
            *         ?
            *             x
            *                 '.'
            *                 +
            *                     <ddigit>
            *         ?
            *             x
            *                 [eE]
            *                 ?
            *                     [+-]
            *                 +
            *                     <ddigit>
            */
        
            if (rde_param_i_symbol_start (p, 178)) return ;
            choice_546 (p);
            rde_param_i_symbol_done_leaf (p, 178, 177);
            return;
        }
        
        static void choice_546 (RDE_PARAM p) {
           /*
            * /
            *     x
            *         "0x"
            *         +
            *             <xdigit>
            *     x
            *         +
            *             <ddigit>
            *         ?
            *             x
            *                 '.'
            *                 +
            *                     <ddigit>
            *         ?
            *             x
            *                 [eE]
            *                 ?
            *                     [+-]
            *                 +
            *                     <ddigit>
            */
        
            rde_param_i_state_push_void (p);
            sequence_522 (p);
            if (rde_param_i_bra_void2void(p)) return;
            sequence_544 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void sequence_522 (RDE_PARAM p) {
           /*
            * x
            *     "0x"
            *     +
            *         <xdigit>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "0x", 175);
            if (rde_param_i_seq_void2void(p)) return;
            poskleene_520 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void poskleene_520 (RDE_PARAM p) {
           /*
            * +
            *     <xdigit>
            */
        
            rde_param_i_loc_push (p);
            rde_param_i_next_xdigit (p, 13);
            if (rde_param_i_kleene_abort(p)) return;
            while (1) {
                rde_param_i_state_push_2 (p);
                rde_param_i_next_xdigit (p, 13);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_544 (RDE_PARAM p) {
           /*
            * x
            *     +
            *         <ddigit>
            *     ?
            *         x
            *             '.'
            *             +
            *                 <ddigit>
            *     ?
            *         x
            *             [eE]
            *             ?
            *                 [+-]
            *             +
            *                 <ddigit>
            */
        
            rde_param_i_state_push_void (p);
            poskleene_525 (p);
            if (rde_param_i_seq_void2void(p)) return;
            optional_532 (p);
            if (rde_param_i_seq_void2void(p)) return;
            optional_542 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void poskleene_525 (RDE_PARAM p) {
           /*
            * +
            *     <ddigit>
            */
        
            rde_param_i_loc_push (p);
            rde_param_i_next_ddigit (p, 4);
            if (rde_param_i_kleene_abort(p)) return;
            while (1) {
                rde_param_i_state_push_2 (p);
                rde_param_i_next_ddigit (p, 4);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void optional_532 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         '.'
            *         +
            *             <ddigit>
            */
        
            rde_param_i_state_push_2 (p);
            sequence_530 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_530 (RDE_PARAM p) {
           /*
            * x
            *     '.'
            *     +
            *         <ddigit>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, ".", 102);
            if (rde_param_i_seq_void2void(p)) return;
            poskleene_525 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void optional_542 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         [eE]
            *         ?
            *             [+-]
            *         +
            *             <ddigit>
            */
        
            rde_param_i_state_push_2 (p);
            sequence_540 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_540 (RDE_PARAM p) {
           /*
            * x
            *     [eE]
            *     ?
            *         [+-]
            *     +
            *         <ddigit>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_class (p, "eE", 176);
            if (rde_param_i_seq_void2void(p)) return;
            optional_536 (p);
            if (rde_param_i_seq_void2void(p)) return;
            poskleene_525 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void optional_536 (RDE_PARAM p) {
           /*
            * ?
            *     [+-]
            */
        
            rde_param_i_state_push_2 (p);
            rde_param_i_next_class (p, "+-", 16);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        /*
         * value Symbol 'OnHandler'
         */
        
        static void sym_OnHandler (RDE_PARAM p) {
           /*
            * x
            *     "on"
            *     (WSob)
            *     (ReturnCode)
            *     *
            *         x
            *             (WSob)
            *             (Identifier)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            if (rde_param_i_symbol_start_d (p, 181)) return ;
            sequence_562 (p);
            rde_param_i_symbol_done_d_reduce (p, 181, 180);
            return;
        }
        
        static void sequence_562 (RDE_PARAM p) {
           /*
            * x
            *     "on"
            *     (WSob)
            *     (ReturnCode)
            *     *
            *         x
            *             (WSob)
            *             (Identifier)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "on", 179);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_ReturnCode (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_556 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\173", 106);
            if (rde_param_i_seq_value2value(p)) return;
            sym_Block (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\175", 107);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_556 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WSob)
            *         (Identifier)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_554 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_554 (RDE_PARAM p) {
           /*
            * x
            *     (WSob)
            *     (Identifier)
            */
        
            rde_param_i_state_push_void (p);
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Identifier (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'OptionString'
         */
        
        static void sym_OptionString (RDE_PARAM p) {
           /*
            * x
            *     '-'
            *     +
            *         /
            *             [_-]
            *             <alnum>
            */
        
            if (rde_param_i_symbol_start (p, 185)) return ;
            sequence_572 (p);
            rde_param_i_symbol_done_leaf (p, 185, 184);
            return;
        }
        
        static void sequence_572 (RDE_PARAM p) {
           /*
            * x
            *     '-'
            *     +
            *         /
            *             [_-]
            *             <alnum>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "-", 182);
            if (rde_param_i_seq_void2void(p)) return;
            poskleene_570 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void poskleene_570 (RDE_PARAM p) {
           /*
            * +
            *     /
            *         [_-]
            *         <alnum>
            */
        
            rde_param_i_loc_push (p);
            choice_568 (p);
            if (rde_param_i_kleene_abort(p)) return;
            while (1) {
                rde_param_i_state_push_2 (p);
                choice_568 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void choice_568 (RDE_PARAM p) {
           /*
            * /
            *     [_-]
            *     <alnum>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_class (p, "_-", 183);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_alnum (p, 0);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * value Symbol 'Parameter'
         */
        
        static void sym_Parameter (RDE_PARAM p) {
           /*
            * x
            *     (ParameterIdentifier)
            *     ?
            *         x
            *             (WS)
            *             '='
            *             (WS)
            *             (Expression)
            */
        
            if (rde_param_i_symbol_start_d (p, 187)) return ;
            sequence_584 (p);
            rde_param_i_symbol_done_d_reduce (p, 187, 186);
            return;
        }
        
        static void sequence_584 (RDE_PARAM p) {
           /*
            * x
            *     (ParameterIdentifier)
            *     ?
            *         x
            *             (WS)
            *             '='
            *             (WS)
            *             (Expression)
            */
        
            rde_param_i_state_push_value (p);
            sym_ParameterIdentifier (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_582 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_582 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (WS)
            *         '='
            *         (WS)
            *         (Expression)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_580 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_580 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     '='
            *     (WS)
            *     (Expression)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, "=", 26);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'ParameterDefinitions'
         */
        
        static void sym_ParameterDefinitions (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (Parameter)
            *         *
            *             x
            *                 (WS)
            *                 ','
            *                 (WS)
            *                 (Parameter)
            */
        
            if (rde_param_i_symbol_start_d (p, 189)) return ;
            optional_598 (p);
            rde_param_i_symbol_done_d_reduce (p, 189, 188);
            return;
        }
        
        static void optional_598 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (Parameter)
            *         *
            *             x
            *                 (WS)
            *                 ','
            *                 (WS)
            *                 (Parameter)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_596 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_596 (RDE_PARAM p) {
           /*
            * x
            *     (Parameter)
            *     *
            *         x
            *             (WS)
            *             ','
            *             (WS)
            *             (Parameter)
            */
        
            rde_param_i_state_push_value (p);
            sym_Parameter (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_594 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_594 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         ','
            *         (WS)
            *         (Parameter)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_592 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_592 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     ','
            *     (WS)
            *     (Parameter)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, ",", 21);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Parameter (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'ParameterIdentifier'
         */
        
        static void sym_ParameterIdentifier (RDE_PARAM p) {
           /*
            * x
            *     /
            *         '_'
            *         <alpha>
            *     *
            *         /
            *             '_'
            *             <alnum>
            */
        
            if (rde_param_i_symbol_start (p, 191)) return ;
            sequence_611 (p);
            rde_param_i_symbol_done_leaf (p, 191, 190);
            return;
        }
        
        static void sequence_611 (RDE_PARAM p) {
           /*
            * x
            *     /
            *         '_'
            *         <alpha>
            *     *
            *         /
            *             '_'
            *             <alnum>
            */
        
            rde_param_i_state_push_void (p);
            choice_603 (p);
            if (rde_param_i_seq_void2void(p)) return;
            kleene_609 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void choice_603 (RDE_PARAM p) {
           /*
            * /
            *     '_'
            *     <alpha>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "_", 139);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_alpha (p, 1);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void kleene_609 (RDE_PARAM p) {
           /*
            * *
            *     /
            *         '_'
            *         <alnum>
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                choice_607 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void choice_607 (RDE_PARAM p) {
           /*
            * /
            *     '_'
            *     <alnum>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "_", 139);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_alnum (p, 0);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * leaf Symbol 'PlainString'
         */
        
        static void sym_PlainString (RDE_PARAM p) {
           /*
            * x
            *     (SingleQuote)
            *     *
            *         x
            *             !
            *                 (SingleQuote)
            *             (Char)
            *     (SingleQuote)
            */
        
            if (rde_param_i_symbol_start (p, 193)) return ;
            sequence_624 (p);
            rde_param_i_symbol_done_leaf (p, 193, 192);
            return;
        }
        
        static void sequence_624 (RDE_PARAM p) {
           /*
            * x
            *     (SingleQuote)
            *     *
            *         x
            *             !
            *                 (SingleQuote)
            *             (Char)
            *     (SingleQuote)
            */
        
            rde_param_i_state_push_void (p);
            sym_SingleQuote (p);
            if (rde_param_i_seq_void2void(p)) return;
            kleene_621 (p);
            if (rde_param_i_seq_void2void(p)) return;
            sym_SingleQuote (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void kleene_621 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         !
            *             (SingleQuote)
            *         (Char)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_619 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_619 (RDE_PARAM p) {
           /*
            * x
            *     !
            *         (SingleQuote)
            *     (Char)
            */
        
            rde_param_i_state_push_void (p);
            notahead_616 (p);
            if (rde_param_i_seq_void2void(p)) return;
            sym_Char (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void notahead_616 (RDE_PARAM p) {
           /*
            * !
            *     (SingleQuote)
            */
        
            rde_param_i_loc_push (p);
            sym_SingleQuote (p);
            rde_param_i_notahead_exit (p);
            return;
        }
        
        /*
         * value Symbol 'PostfixExpr'
         */
        
        static void sym_PostfixExpr (RDE_PARAM p) {
           /*
            * x
            *     (PrimaryExpr)
            *     *
            *         x
            *             (WS)
            *             (PostfixOp)
            */
        
            if (rde_param_i_symbol_start_d (p, 195)) return ;
            sequence_634 (p);
            rde_param_i_symbol_done_d_reduce (p, 195, 194);
            return;
        }
        
        static void sequence_634 (RDE_PARAM p) {
           /*
            * x
            *     (PrimaryExpr)
            *     *
            *         x
            *             (WS)
            *             (PostfixOp)
            */
        
            rde_param_i_state_push_value (p);
            sym_PrimaryExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_632 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_632 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         (PostfixOp)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_630 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_630 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (PostfixOp)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_PostfixOp (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'PostfixOp'
         */
        
        static void sym_PostfixOp (RDE_PARAM p) {
           /*
            * /
            *     (Selector)
            *     (FunctionCall)
            *     (Element)
            *     (TableColumns)
            */
        
            if (rde_param_i_symbol_start_d (p, 197)) return ;
            choice_641 (p);
            rde_param_i_symbol_done_d_reduce (p, 197, 196);
            return;
        }
        
        static void choice_641 (RDE_PARAM p) {
           /*
            * /
            *     (Selector)
            *     (FunctionCall)
            *     (Element)
            *     (TableColumns)
            */
        
            rde_param_i_state_push_value (p);
            sym_Selector (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_FunctionCall (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_Element (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_TableColumns (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'PowOp'
         */
        
        static void sym_PowOp (RDE_PARAM p) {
           /*
            * "**"
            */
        
            if (rde_param_i_symbol_start (p, 200)) return ;
            rde_param_i_next_str (p, "**", 198);
            rde_param_i_symbol_done_leaf (p, 200, 199);
            return;
        }
        
        /*
         * value Symbol 'PrimaryExpr'
         */
        
        static void sym_PrimaryExpr (RDE_PARAM p) {
           /*
            * /
            *     (BuiltIn)
            *     (BuiltInCall)
            *     (IndirectIdentifier)
            *     (IndirectLiteral)
            *     (Identifier)
            *     (Number)
            *     (String)
            *     (Sequence)
            *     x
            *         '\('
            *         (WS)
            *         (Expression)
            *         (WS)
            *         '\)'
            */
        
            if (rde_param_i_symbol_start_d (p, 202)) return ;
            choice_661 (p);
            rde_param_i_symbol_done_d_reduce (p, 202, 201);
            return;
        }
        
        static void choice_661 (RDE_PARAM p) {
           /*
            * /
            *     (BuiltIn)
            *     (BuiltInCall)
            *     (IndirectIdentifier)
            *     (IndirectLiteral)
            *     (Identifier)
            *     (Number)
            *     (String)
            *     (Sequence)
            *     x
            *         '\('
            *         (WS)
            *         (Expression)
            *         (WS)
            *         '\)'
            */
        
            rde_param_i_state_push_value (p);
            sym_BuiltIn (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_BuiltInCall (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_IndirectIdentifier (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_IndirectLiteral (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_Identifier (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_Number (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_String (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_Sequence (p);
            if (rde_param_i_bra_value2value(p)) return;
            sequence_659 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void sequence_659 (RDE_PARAM p) {
           /*
            * x
            *     '\('
            *     (WS)
            *     (Expression)
            *     (WS)
            *     '\)'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "(", 55);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, ")", 56);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'Program'
         */
        
        static void sym_Program (RDE_PARAM p) {
           /*
            * x
            *     (Block)
            *     ?
            *         (Comment)
            *     (EOF)
            */
        
            if (rde_param_i_symbol_start_d (p, 204)) return ;
            sequence_669 (p);
            rde_param_i_symbol_done_d_reduce (p, 204, 203);
            return;
        }
        
        static void sequence_669 (RDE_PARAM p) {
           /*
            * x
            *     (Block)
            *     ?
            *         (Comment)
            *     (EOF)
            */
        
            rde_param_i_state_push_value (p);
            sym_Block (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_666 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_EOF (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_666 (RDE_PARAM p) {
           /*
            * ?
            *     (Comment)
            */
        
            rde_param_i_state_push_2 (p);
            sym_Comment (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        /*
         * void Symbol 'Quote'
         */
        
        static void sym_Quote (RDE_PARAM p) {
           /*
            * '\"'
            */
        
            if (rde_param_i_symbol_void_start (p, 207)) return ;
            rde_param_i_next_char (p, "\"", 205);
            rde_param_i_symbol_done_void (p, 207, 206);
            return;
        }
        
        /*
         * value Symbol 'RangeExpr'
         */
        
        static void sym_RangeExpr (RDE_PARAM p) {
           /*
            * /
            *     x
            *         (BitOrExpr)
            *         (WS)
            *         (RangeSeparator)
            *         ?
            *             x
            *                 (WS)
            *                 (BitOrExpr)
            *     (BitOrExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 209)) return ;
            choice_686 (p);
            rde_param_i_symbol_done_d_reduce (p, 209, 208);
            return;
        }
        
        static void choice_686 (RDE_PARAM p) {
           /*
            * /
            *     x
            *         (BitOrExpr)
            *         (WS)
            *         (RangeSeparator)
            *         ?
            *             x
            *                 (WS)
            *                 (BitOrExpr)
            *     (BitOrExpr)
            */
        
            rde_param_i_state_push_value (p);
            sequence_683 (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_BitOrExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void sequence_683 (RDE_PARAM p) {
           /*
            * x
            *     (BitOrExpr)
            *     (WS)
            *     (RangeSeparator)
            *     ?
            *         x
            *             (WS)
            *             (BitOrExpr)
            */
        
            rde_param_i_state_push_value (p);
            sym_BitOrExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_RangeSeparator (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_681 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_681 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (WS)
            *         (BitOrExpr)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_679 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_679 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (BitOrExpr)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_BitOrExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'RangeSeparator'
         */
        
        static void sym_RangeSeparator (RDE_PARAM p) {
           /*
            * ':'
            */
        
            if (rde_param_i_symbol_start (p, 211)) return ;
            rde_param_i_next_char (p, ":", 128);
            rde_param_i_symbol_done_leaf (p, 211, 210);
            return;
        }
        
        /*
         * value Symbol 'RelExpr'
         */
        
        static void sym_RelExpr (RDE_PARAM p) {
           /*
            * x
            *     (AddExpr)
            *     ?
            *         x
            *             (WS)
            *             (RelOp)
            *             (WS)
            *             (AddExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 213)) return ;
            sequence_700 (p);
            rde_param_i_symbol_done_d_reduce (p, 213, 212);
            return;
        }
        
        static void sequence_700 (RDE_PARAM p) {
           /*
            * x
            *     (AddExpr)
            *     ?
            *         x
            *             (WS)
            *             (RelOp)
            *             (WS)
            *             (AddExpr)
            */
        
            rde_param_i_state_push_value (p);
            sym_AddExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_698 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_698 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (WS)
            *         (RelOp)
            *         (WS)
            *         (AddExpr)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_696 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_696 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (RelOp)
            *     (WS)
            *     (AddExpr)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_RelOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_AddExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'RelOp'
         */
        
        static void sym_RelOp (RDE_PARAM p) {
           /*
            * /
            *     "=="
            *     "!="
            *     "<="
            *     ">="
            *     [<>]
            *     "=^"
            *     "!^"
            *     "~^"
            *     '~'
            *     "!~^"
            *     "!~"
            */
        
            if (rde_param_i_symbol_start (p, 226)) return ;
            choice_714 (p);
            rde_param_i_symbol_done_leaf (p, 226, 225);
            return;
        }
        
        static void choice_714 (RDE_PARAM p) {
           /*
            * /
            *     "=="
            *     "!="
            *     "<="
            *     ">="
            *     [<>]
            *     "=^"
            *     "!^"
            *     "~^"
            *     '~'
            *     "!~^"
            *     "!~"
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "==", 214);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "!=", 215);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "<=", 216);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, ">=", 217);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_class (p, "<>", 218);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "=^", 219);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "!^", 220);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "~^", 221);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_char (p, "~", 222);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "!~^", 223);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "!~", 224);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * value Symbol 'ReturnCode'
         */
        
        static void sym_ReturnCode (RDE_PARAM p) {
           /*
            * /
            *     "error"
            *     "ok"
            *     "continue"
            *     "return"
            *     "break"
            *     x
            *         ?
            *             '-'
            *         +
            *             <digit>
            */
        
            if (rde_param_i_symbol_start (p, 231)) return ;
            choice_730 (p);
            rde_param_i_symbol_done_leaf (p, 231, 230);
            return;
        }
        
        static void choice_730 (RDE_PARAM p) {
           /*
            * /
            *     "error"
            *     "ok"
            *     "continue"
            *     "return"
            *     "break"
            *     x
            *         ?
            *             '-'
            *         +
            *             <digit>
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "error", 227);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "ok", 228);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "continue", 92);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "return", 229);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "break", 49);
            if (rde_param_i_bra_void2void(p)) return;
            sequence_728 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void sequence_728 (RDE_PARAM p) {
           /*
            * x
            *     ?
            *         '-'
            *     +
            *         <digit>
            */
        
            rde_param_i_state_push_void (p);
            optional_723 (p);
            if (rde_param_i_seq_void2void(p)) return;
            poskleene_726 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void optional_723 (RDE_PARAM p) {
           /*
            * ?
            *     '-'
            */
        
            rde_param_i_state_push_2 (p);
            rde_param_i_next_char (p, "-", 182);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void poskleene_726 (RDE_PARAM p) {
           /*
            * +
            *     <digit>
            */
        
            rde_param_i_loc_push (p);
            rde_param_i_next_digit (p, 5);
            if (rde_param_i_kleene_abort(p)) return;
            while (1) {
                rde_param_i_state_push_2 (p);
                rde_param_i_next_digit (p, 5);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        /*
         * value Symbol 'ReturnStatement'
         */
        
        static void sym_ReturnStatement (RDE_PARAM p) {
           /*
            * x
            *     "return"
            *     ?
            *         x
            *             (WSob)
            *             (Expression)
            */
        
            if (rde_param_i_symbol_start_d (p, 233)) return ;
            sequence_740 (p);
            rde_param_i_symbol_done_d_reduce (p, 233, 232);
            return;
        }
        
        static void sequence_740 (RDE_PARAM p) {
           /*
            * x
            *     "return"
            *     ?
            *         x
            *             (WSob)
            *             (Expression)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "return", 229);
            if (rde_param_i_seq_void2value(p)) return;
            optional_738 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_738 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (WSob)
            *         (Expression)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_736 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_736 (RDE_PARAM p) {
           /*
            * x
            *     (WSob)
            *     (Expression)
            */
        
            rde_param_i_state_push_void (p);
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'SearchCommand'
         */
        
        static void sym_SearchCommand (RDE_PARAM p) {
           /*
            * x
            *     "@search"
            *     (WS)
            *     (PostfixExpr)
            *     ?
            *         x
            *             (WS)
            *             (SearchTarget)
            *     (WS)
            *     (RelOp)
            *     (WS)
            *     (PostfixExpr)
            *     (WS)
            *     *
            *         x
            *             (WS)
            *             (SearchOption)
            */
        
            if (rde_param_i_symbol_start_d (p, 236)) return ;
            sequence_763 (p);
            rde_param_i_symbol_done_d_reduce (p, 236, 235);
            return;
        }
        
        static void sequence_763 (RDE_PARAM p) {
           /*
            * x
            *     "@search"
            *     (WS)
            *     (PostfixExpr)
            *     ?
            *         x
            *             (WS)
            *             (SearchTarget)
            *     (WS)
            *     (RelOp)
            *     (WS)
            *     (PostfixExpr)
            *     (WS)
            *     *
            *         x
            *             (WS)
            *             (SearchOption)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "@search", 234);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_PostfixExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_750 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_RelOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_PostfixExpr (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_761 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_750 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (WS)
            *         (SearchTarget)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_748 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_748 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (SearchTarget)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_SearchTarget (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_761 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         (SearchOption)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_759 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_759 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (SearchOption)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_SearchOption (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'SearchOption'
         */
        
        static void sym_SearchOption (RDE_PARAM p) {
           /*
            * /
            *     "inline"
            *     "all"
            */
        
            if (rde_param_i_symbol_start (p, 240)) return ;
            choice_768 (p);
            rde_param_i_symbol_done_leaf (p, 240, 239);
            return;
        }
        
        static void choice_768 (RDE_PARAM p) {
           /*
            * /
            *     "inline"
            *     "all"
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "inline", 237);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "all", 238);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * value Symbol 'SearchTarget'
         */
        
        static void sym_SearchTarget (RDE_PARAM p) {
           /*
            * x
            *     "->"
            *     (WS)
            *     (PostfixExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 243)) return ;
            sequence_774 (p);
            rde_param_i_symbol_done_d_reduce (p, 243, 242);
            return;
        }
        
        static void sequence_774 (RDE_PARAM p) {
           /*
            * x
            *     "->"
            *     (WS)
            *     (PostfixExpr)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "->", 241);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_PostfixExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'Selector'
         */
        
        static void sym_Selector (RDE_PARAM p) {
           /*
            * x
            *     '['
            *     (WS)
            *     (Expression)
            *     (WS)
            *     ']'
            */
        
            if (rde_param_i_symbol_start_d (p, 245)) return ;
            sequence_782 (p);
            rde_param_i_symbol_done_d_reduce (p, 245, 244);
            return;
        }
        
        static void sequence_782 (RDE_PARAM p) {
           /*
            * x
            *     '['
            *     (WS)
            *     (Expression)
            *     (WS)
            *     ']'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "[", 166);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "]", 167);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'SelectorContext'
         */
        
        static void sym_SelectorContext (RDE_PARAM p) {
           /*
            * "@@"
            */
        
            if (rde_param_i_symbol_start (p, 248)) return ;
            rde_param_i_next_str (p, "@@", 246);
            rde_param_i_symbol_done_leaf (p, 248, 247);
            return;
        }
        
        /*
         * void Symbol 'Separator'
         */
        
        static void sym_Separator (RDE_PARAM p) {
           /*
            * /
            *     x
            *         ?
            *             (Comment)
            *         (EOL)
            *     ';'
            */
        
            if (rde_param_i_symbol_void_start (p, 251)) return ;
            choice_793 (p);
            rde_param_i_symbol_done_void (p, 251, 250);
            return;
        }
        
        static void choice_793 (RDE_PARAM p) {
           /*
            * /
            *     x
            *         ?
            *             (Comment)
            *         (EOL)
            *     ';'
            */
        
            rde_param_i_state_push_void (p);
            sequence_790 (p);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_char (p, ";", 249);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void sequence_790 (RDE_PARAM p) {
           /*
            * x
            *     ?
            *         (Comment)
            *     (EOL)
            */
        
            rde_param_i_state_push_void (p);
            optional_666 (p);
            if (rde_param_i_seq_void2void(p)) return;
            sym_EOL (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * value Symbol 'Sequence'
         */
        
        static void sym_Sequence (RDE_PARAM p) {
           /*
            * x
            *     '\{'
            *     (WSNL)
            *     ?
            *         (SequenceContent)
            *     (WSNL)
            *     '\}'
            */
        
            if (rde_param_i_symbol_start_d (p, 253)) return ;
            sequence_803 (p);
            rde_param_i_symbol_done_d_reduce (p, 253, 252);
            return;
        }
        
        static void sequence_803 (RDE_PARAM p) {
           /*
            * x
            *     '\{'
            *     (WSNL)
            *     ?
            *         (SequenceContent)
            *     (WSNL)
            *     '\}'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "\173", 106);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_void2value(p)) return;
            optional_799 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\175", 107);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_799 (RDE_PARAM p) {
           /*
            * ?
            *     (SequenceContent)
            */
        
            rde_param_i_state_push_2 (p);
            sym_SequenceContent (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        /*
         * value Symbol 'SequenceContent'
         */
        
        static void sym_SequenceContent (RDE_PARAM p) {
           /*
            * x
            *     (Expression)
            *     *
            *         x
            *             (WSNL)
            *             ','
            *             (WSNL)
            *             (Expression)
            */
        
            if (rde_param_i_symbol_start_d (p, 255)) return ;
            sequence_815 (p);
            rde_param_i_symbol_done_d_reduce (p, 255, 254);
            return;
        }
        
        static void sequence_815 (RDE_PARAM p) {
           /*
            * x
            *     (Expression)
            *     *
            *         x
            *             (WSNL)
            *             ','
            *             (WSNL)
            *             (Expression)
            */
        
            rde_param_i_state_push_value (p);
            sym_Expression (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_813 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_813 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WSNL)
            *         ','
            *         (WSNL)
            *         (Expression)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_811 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_811 (RDE_PARAM p) {
           /*
            * x
            *     (WSNL)
            *     ','
            *     (WSNL)
            *     (Expression)
            */
        
            rde_param_i_state_push_void (p);
            sym_WSNL (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, ",", 21);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * void Symbol 'SingleQuote'
         */
        
        static void sym_SingleQuote (RDE_PARAM p) {
           /*
            * '''
            */
        
            if (rde_param_i_symbol_void_start (p, 258)) return ;
            rde_param_i_next_char (p, "'", 256);
            rde_param_i_symbol_done_void (p, 258, 257);
            return;
        }
        
        /*
         * value Symbol 'SortCommand'
         */
        
        static void sym_SortCommand (RDE_PARAM p) {
           /*
            * x
            *     "@sort"
            *     (WS)
            *     (Expression)
            *     ?
            *         x
            *             (WS)
            *             "->"
            *             (WS)
            *             (Expression)
            *     ?
            *         x
            *             (WS)
            *             (SortOptions)
            */
        
            if (rde_param_i_symbol_start_d (p, 261)) return ;
            sequence_837 (p);
            rde_param_i_symbol_done_d_reduce (p, 261, 260);
            return;
        }
        
        static void sequence_837 (RDE_PARAM p) {
           /*
            * x
            *     "@sort"
            *     (WS)
            *     (Expression)
            *     ?
            *         x
            *             (WS)
            *             "->"
            *             (WS)
            *             (Expression)
            *     ?
            *         x
            *             (WS)
            *             (SortOptions)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "@sort", 259);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_829 (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_835 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_829 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (WS)
            *         "->"
            *         (WS)
            *         (Expression)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_827 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_827 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     "->"
            *     (WS)
            *     (Expression)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_str (p, "->", 241);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_835 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (WS)
            *         (SortOptions)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_833 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_833 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (SortOptions)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_SortOptions (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'SortOption'
         */
        
        static void sym_SortOption (RDE_PARAM p) {
           /*
            * /
            *     "indices"
            *     "nocase"
            *     "increasing"
            *     "decreasing"
            */
        
            if (rde_param_i_symbol_start (p, 267)) return ;
            choice_844 (p);
            rde_param_i_symbol_done_leaf (p, 267, 266);
            return;
        }
        
        static void choice_844 (RDE_PARAM p) {
           /*
            * /
            *     "indices"
            *     "nocase"
            *     "increasing"
            *     "decreasing"
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "indices", 262);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "nocase", 263);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "increasing", 264);
            if (rde_param_i_bra_void2void(p)) return;
            rde_param_i_next_str (p, "decreasing", 265);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * value Symbol 'SortOptions'
         */
        
        static void sym_SortOptions (RDE_PARAM p) {
           /*
            * x
            *     (SortOption)
            *     *
            *         x
            *             (WS)
            *             (SortOption)
            */
        
            if (rde_param_i_symbol_start_d (p, 269)) return ;
            sequence_854 (p);
            rde_param_i_symbol_done_d_reduce (p, 269, 268);
            return;
        }
        
        static void sequence_854 (RDE_PARAM p) {
           /*
            * x
            *     (SortOption)
            *     *
            *         x
            *             (WS)
            *             (SortOption)
            */
        
            rde_param_i_state_push_value (p);
            sym_SortOption (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_852 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_852 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         (SortOption)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_850 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_850 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     (SortOption)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_SortOption (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'Statement'
         */
        
        static void sym_Statement (RDE_PARAM p) {
           /*
            * /
            *     (FunctionDefinition)
            *     (IfStatement)
            *     (WhileStatement)
            *     (ForRangeStatement)
            *     (ForEachStatement)
            *     (TryStatement)
            *     (ThrowStatement)
            *     (ReturnStatement)
            *     (BreakStatement)
            *     (ContinueStatement)
            *     (Assignment)
            *     (Expression)
            *     (TclScriptBlock)
            *     (Empty)
            */
        
            if (rde_param_i_symbol_start_d (p, 271)) return ;
            choice_871 (p);
            rde_param_i_symbol_done_d_reduce (p, 271, 270);
            return;
        }
        
        static void choice_871 (RDE_PARAM p) {
           /*
            * /
            *     (FunctionDefinition)
            *     (IfStatement)
            *     (WhileStatement)
            *     (ForRangeStatement)
            *     (ForEachStatement)
            *     (TryStatement)
            *     (ThrowStatement)
            *     (ReturnStatement)
            *     (BreakStatement)
            *     (ContinueStatement)
            *     (Assignment)
            *     (Expression)
            *     (TclScriptBlock)
            *     (Empty)
            */
        
            rde_param_i_state_push_value (p);
            sym_FunctionDefinition (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_IfStatement (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_WhileStatement (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_ForRangeStatement (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_ForEachStatement (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_TryStatement (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_ThrowStatement (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_ReturnStatement (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_BreakStatement (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_ContinueStatement (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_Assignment (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_Expression (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_TclScriptBlock (p);
            if (rde_param_i_bra_value2void(p)) return;
            sym_Empty (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * value Symbol 'String'
         */
        
        static void sym_String (RDE_PARAM p) {
           /*
            * /
            *     (PlainString)
            *     (TclString)
            */
        
            if (rde_param_i_symbol_start_d (p, 273)) return ;
            choice_876 (p);
            rde_param_i_symbol_done_d_reduce (p, 273, 272);
            return;
        }
        
        static void choice_876 (RDE_PARAM p) {
           /*
            * /
            *     (PlainString)
            *     (TclString)
            */
        
            rde_param_i_state_push_value (p);
            sym_PlainString (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_TclString (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'TableColumnDef'
         */
        
        static void sym_TableColumnDef (RDE_PARAM p) {
           /*
            * x
            *     (ColumnIdentifier)
            *     (WSNL)
            *     (ColumnType)
            */
        
            if (rde_param_i_symbol_start_d (p, 275)) return ;
            sequence_882 (p);
            rde_param_i_symbol_done_d_reduce (p, 275, 274);
            return;
        }
        
        static void sequence_882 (RDE_PARAM p) {
           /*
            * x
            *     (ColumnIdentifier)
            *     (WSNL)
            *     (ColumnType)
            */
        
            rde_param_i_state_push_value (p);
            sym_ColumnIdentifier (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_ColumnType (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'TableColumnDefs'
         */
        
        static void sym_TableColumnDefs (RDE_PARAM p) {
           /*
            * x
            *     (TableColumnDef)
            *     *
            *         x
            *             (WSNL)
            *             ','
            *             (WSNL)
            *             (TableColumnDef)
            */
        
            if (rde_param_i_symbol_start_d (p, 277)) return ;
            sequence_894 (p);
            rde_param_i_symbol_done_d_reduce (p, 277, 276);
            return;
        }
        
        static void sequence_894 (RDE_PARAM p) {
           /*
            * x
            *     (TableColumnDef)
            *     *
            *         x
            *             (WSNL)
            *             ','
            *             (WSNL)
            *             (TableColumnDef)
            */
        
            rde_param_i_state_push_value (p);
            sym_TableColumnDef (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_892 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_892 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WSNL)
            *         ','
            *         (WSNL)
            *         (TableColumnDef)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_890 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_890 (RDE_PARAM p) {
           /*
            * x
            *     (WSNL)
            *     ','
            *     (WSNL)
            *     (TableColumnDef)
            */
        
            rde_param_i_state_push_void (p);
            sym_WSNL (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, ",", 21);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_TableColumnDef (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'TableColumnList'
         */
        
        static void sym_TableColumnList (RDE_PARAM p) {
           /*
            * x
            *     (ColumnIdentifier)
            *     *
            *         x
            *             (WSNL)
            *             ','
            *             (WSNL)
            *             (ColumnIdentifier)
            */
        
            if (rde_param_i_symbol_start_d (p, 279)) return ;
            sequence_906 (p);
            rde_param_i_symbol_done_d_reduce (p, 279, 278);
            return;
        }
        
        static void sequence_906 (RDE_PARAM p) {
           /*
            * x
            *     (ColumnIdentifier)
            *     *
            *         x
            *             (WSNL)
            *             ','
            *             (WSNL)
            *             (ColumnIdentifier)
            */
        
            rde_param_i_state_push_value (p);
            sym_ColumnIdentifier (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_904 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_904 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WSNL)
            *         ','
            *         (WSNL)
            *         (ColumnIdentifier)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_902 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_902 (RDE_PARAM p) {
           /*
            * x
            *     (WSNL)
            *     ','
            *     (WSNL)
            *     (ColumnIdentifier)
            */
        
            rde_param_i_state_push_void (p);
            sym_WSNL (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, ",", 21);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_ColumnIdentifier (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'TableColumns'
         */
        
        static void sym_TableColumns (RDE_PARAM p) {
           /*
            * x
            *     (ElementOp)
            *     (WS)
            *     '\('
            *     (WSNL)
            *     ?
            *         (TableColumnList)
            *     (WSNL)
            *     '\)'
            */
        
            if (rde_param_i_symbol_start_d (p, 281)) return ;
            sequence_918 (p);
            rde_param_i_symbol_done_d_reduce (p, 281, 280);
            return;
        }
        
        static void sequence_918 (RDE_PARAM p) {
           /*
            * x
            *     (ElementOp)
            *     (WS)
            *     '\('
            *     (WSNL)
            *     ?
            *         (TableColumnList)
            *     (WSNL)
            *     '\)'
            */
        
            rde_param_i_state_push_value (p);
            sym_ElementOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "(", 55);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_914 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, ")", 56);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_914 (RDE_PARAM p) {
           /*
            * ?
            *     (TableColumnList)
            */
        
            rde_param_i_state_push_2 (p);
            sym_TableColumnList (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        /*
         * value Symbol 'TableConstructor'
         */
        
        static void sym_TableConstructor (RDE_PARAM p) {
           /*
            * x
            *     "@table"
            *     (WS)
            *     '\('
            *     (WSNL)
            *     ?
            *         (TableColumnDefs)
            *     (WSNL)
            *     '\)'
            *     (WS)
            *     ?
            *         (Sequence)
            */
        
            if (rde_param_i_symbol_start_d (p, 284)) return ;
            sequence_934 (p);
            rde_param_i_symbol_done_d_reduce (p, 284, 283);
            return;
        }
        
        static void sequence_934 (RDE_PARAM p) {
           /*
            * x
            *     "@table"
            *     (WS)
            *     '\('
            *     (WSNL)
            *     ?
            *         (TableColumnDefs)
            *     (WSNL)
            *     '\)'
            *     (WS)
            *     ?
            *         (Sequence)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "@table", 282);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, "(", 55);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_void2value(p)) return;
            optional_926 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSNL (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, ")", 56);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_932 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_926 (RDE_PARAM p) {
           /*
            * ?
            *     (TableColumnDefs)
            */
        
            rde_param_i_state_push_2 (p);
            sym_TableColumnDefs (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void optional_932 (RDE_PARAM p) {
           /*
            * ?
            *     (Sequence)
            */
        
            rde_param_i_state_push_2 (p);
            sym_Sequence (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        /*
         * leaf Symbol 'TclScript'
         */
        
        static void sym_TclScript (RDE_PARAM p) {
           /*
            * *
            *     x
            *         !
            *             x
            *                 '>'
            *                 (TclScriptEndMarker)
            *         <dot>
            */
        
            if (rde_param_i_symbol_start (p, 287)) return ;
            kleene_946 (p);
            rde_param_i_symbol_done_leaf (p, 287, 286);
            return;
        }
        
        static void kleene_946 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         !
            *             x
            *                 '>'
            *                 (TclScriptEndMarker)
            *         <dot>
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_944 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_944 (RDE_PARAM p) {
           /*
            * x
            *     !
            *         x
            *             '>'
            *             (TclScriptEndMarker)
            *     <dot>
            */
        
            rde_param_i_state_push_void (p);
            notahead_941 (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_input_next (p, 72);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void notahead_941 (RDE_PARAM p) {
           /*
            * !
            *     x
            *         '>'
            *         (TclScriptEndMarker)
            */
        
            rde_param_i_loc_push (p);
            sequence_939 (p);
            rde_param_i_notahead_exit (p);
            return;
        }
        
        static void sequence_939 (RDE_PARAM p) {
           /*
            * x
            *     '>'
            *     (TclScriptEndMarker)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, ">", 285);
            if (rde_param_i_seq_void2void(p)) return;
            sym_TclScriptEndMarker (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * value Symbol 'TclScriptBlock'
         */
        
        static void sym_TclScriptBlock (RDE_PARAM p) {
           /*
            * x
            *     '<'
            *     (TclScript)
            *     '>'
            *     &
            *         (TclScriptEndMarker)
            */
        
            if (rde_param_i_symbol_start_d (p, 290)) return ;
            sequence_955 (p);
            rde_param_i_symbol_done_d_reduce (p, 290, 289);
            return;
        }
        
        static void sequence_955 (RDE_PARAM p) {
           /*
            * x
            *     '<'
            *     (TclScript)
            *     '>'
            *     &
            *         (TclScriptEndMarker)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "<", 288);
            if (rde_param_i_seq_void2value(p)) return;
            sym_TclScript (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, ">", 285);
            if (rde_param_i_seq_value2value(p)) return;
            ahead_953 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void ahead_953 (RDE_PARAM p) {
           /*
            * &
            *     (TclScriptEndMarker)
            */
        
            rde_param_i_loc_push (p);
            sym_TclScriptEndMarker (p);
            rde_param_i_loc_pop_rewind (p);
            return;
        }
        
        /*
         * void Symbol 'TclScriptEndMarker'
         */
        
        static void sym_TclScriptEndMarker (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     /
            *         ';'
            *         (EOL)
            *         (EOF)
            */
        
            if (rde_param_i_symbol_void_start (p, 292)) return ;
            sequence_964 (p);
            rde_param_i_symbol_done_void (p, 292, 291);
            return;
        }
        
        static void sequence_964 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     /
            *         ';'
            *         (EOL)
            *         (EOF)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            choice_962 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void choice_962 (RDE_PARAM p) {
           /*
            * /
            *     ';'
            *     (EOL)
            *     (EOF)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, ";", 249);
            if (rde_param_i_bra_void2void(p)) return;
            sym_EOL (p);
            if (rde_param_i_bra_void2void(p)) return;
            sym_EOF (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * leaf Symbol 'TclString'
         */
        
        static void sym_TclString (RDE_PARAM p) {
           /*
            * x
            *     (Quote)
            *     *
            *         x
            *             !
            *                 (Quote)
            *             (Char)
            *     (Quote)
            */
        
            if (rde_param_i_symbol_start (p, 294)) return ;
            sequence_977 (p);
            rde_param_i_symbol_done_leaf (p, 294, 293);
            return;
        }
        
        static void sequence_977 (RDE_PARAM p) {
           /*
            * x
            *     (Quote)
            *     *
            *         x
            *             !
            *                 (Quote)
            *             (Char)
            *     (Quote)
            */
        
            rde_param_i_state_push_void (p);
            sym_Quote (p);
            if (rde_param_i_seq_void2void(p)) return;
            kleene_974 (p);
            if (rde_param_i_seq_void2void(p)) return;
            sym_Quote (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void kleene_974 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         !
            *             (Quote)
            *         (Char)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_972 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_972 (RDE_PARAM p) {
           /*
            * x
            *     !
            *         (Quote)
            *     (Char)
            */
        
            rde_param_i_state_push_void (p);
            notahead_969 (p);
            if (rde_param_i_seq_void2void(p)) return;
            sym_Char (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void notahead_969 (RDE_PARAM p) {
           /*
            * !
            *     (Quote)
            */
        
            rde_param_i_loc_push (p);
            sym_Quote (p);
            rde_param_i_notahead_exit (p);
            return;
        }
        
        /*
         * value Symbol 'ThrowStatement'
         */
        
        static void sym_ThrowStatement (RDE_PARAM p) {
           /*
            * x
            *     "throw"
            *     (WSob)
            *     (Expression)
            *     *
            *         x
            *             (WS)
            *             ','
            *             (WS)
            *             (Expression)
            */
        
            if (rde_param_i_symbol_start_d (p, 297)) return ;
            sequence_991 (p);
            rde_param_i_symbol_done_d_reduce (p, 297, 296);
            return;
        }
        
        static void sequence_991 (RDE_PARAM p) {
           /*
            * x
            *     "throw"
            *     (WSob)
            *     (Expression)
            *     *
            *         x
            *             (WS)
            *             ','
            *             (WS)
            *             (Expression)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "throw", 295);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_989 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_989 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WS)
            *         ','
            *         (WS)
            *         (Expression)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_987 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_987 (RDE_PARAM p) {
           /*
            * x
            *     (WS)
            *     ','
            *     (WS)
            *     (Expression)
            */
        
            rde_param_i_state_push_void (p);
            sym_WS (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, ",", 21);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'TrapHandler'
         */
        
        static void sym_TrapHandler (RDE_PARAM p) {
           /*
            * x
            *     "trap"
            *     (WSob)
            *     (Sequence)
            *     *
            *         x
            *             (WSob)
            *             (Identifier)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            if (rde_param_i_symbol_start_d (p, 300)) return ;
            sequence_1005 (p);
            rde_param_i_symbol_done_d_reduce (p, 300, 299);
            return;
        }
        
        static void sequence_1005 (RDE_PARAM p) {
           /*
            * x
            *     "trap"
            *     (WSob)
            *     (Sequence)
            *     *
            *         x
            *             (WSob)
            *             (Identifier)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "trap", 298);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Sequence (p);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_556 (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\173", 106);
            if (rde_param_i_seq_value2value(p)) return;
            sym_Block (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\175", 107);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'TryStatement'
         */
        
        static void sym_TryStatement (RDE_PARAM p) {
           /*
            * x
            *     "try"
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            *     *
            *         x
            *             (WSob)
            *             /
            *                 (OnHandler)
            *                 (TrapHandler)
            *     ?
            *         x
            *             (WSob)
            *             (FinallyClause)
            */
        
            if (rde_param_i_symbol_start_d (p, 303)) return ;
            sequence_1028 (p);
            rde_param_i_symbol_done_d_reduce (p, 303, 302);
            return;
        }
        
        static void sequence_1028 (RDE_PARAM p) {
           /*
            * x
            *     "try"
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            *     *
            *         x
            *             (WSob)
            *             /
            *                 (OnHandler)
            *                 (TrapHandler)
            *     ?
            *         x
            *             (WSob)
            *             (FinallyClause)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "try", 301);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_char (p, "\173", 106);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Block (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\175", 107);
            if (rde_param_i_seq_value2value(p)) return;
            kleene_1020 (p);
            if (rde_param_i_seq_value2value(p)) return;
            optional_1026 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void kleene_1020 (RDE_PARAM p) {
           /*
            * *
            *     x
            *         (WSob)
            *         /
            *             (OnHandler)
            *             (TrapHandler)
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                sequence_1018 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void sequence_1018 (RDE_PARAM p) {
           /*
            * x
            *     (WSob)
            *     /
            *         (OnHandler)
            *         (TrapHandler)
            */
        
            rde_param_i_state_push_void (p);
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            choice_1016 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void choice_1016 (RDE_PARAM p) {
           /*
            * /
            *     (OnHandler)
            *     (TrapHandler)
            */
        
            rde_param_i_state_push_value (p);
            sym_OnHandler (p);
            if (rde_param_i_bra_value2value(p)) return;
            sym_TrapHandler (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void optional_1026 (RDE_PARAM p) {
           /*
            * ?
            *     x
            *         (WSob)
            *         (FinallyClause)
            */
        
            rde_param_i_state_push_2 (p);
            sequence_1024 (p);
            rde_param_i_state_merge_ok (p);
            return;
        }
        
        static void sequence_1024 (RDE_PARAM p) {
           /*
            * x
            *     (WSob)
            *     (FinallyClause)
            */
        
            rde_param_i_state_push_void (p);
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_FinallyClause (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * value Symbol 'UnaryExpr'
         */
        
        static void sym_UnaryExpr (RDE_PARAM p) {
           /*
            * /
            *     (PostfixExpr)
            *     x
            *         (UnaryOp)
            *         (WS)
            *         (UnaryExpr)
            */
        
            if (rde_param_i_symbol_start_d (p, 305)) return ;
            choice_1037 (p);
            rde_param_i_symbol_done_d_reduce (p, 305, 304);
            return;
        }
        
        static void choice_1037 (RDE_PARAM p) {
           /*
            * /
            *     (PostfixExpr)
            *     x
            *         (UnaryOp)
            *         (WS)
            *         (UnaryExpr)
            */
        
            rde_param_i_state_push_value (p);
            sym_PostfixExpr (p);
            if (rde_param_i_bra_value2value(p)) return;
            sequence_1035 (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        static void sequence_1035 (RDE_PARAM p) {
           /*
            * x
            *     (UnaryOp)
            *     (WS)
            *     (UnaryExpr)
            */
        
            rde_param_i_state_push_value (p);
            sym_UnaryOp (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WS (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_UnaryExpr (p);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * leaf Symbol 'UnaryOp'
         */
        
        static void sym_UnaryOp (RDE_PARAM p) {
           /*
            * [-+~!%]
            */
        
            if (rde_param_i_symbol_start (p, 308)) return ;
            rde_param_i_next_class (p, "-+~!%", 306);
            rde_param_i_symbol_done_leaf (p, 308, 307);
            return;
        }
        
        /*
         * value Symbol 'WhileStatement'
         */
        
        static void sym_WhileStatement (RDE_PARAM p) {
           /*
            * x
            *     "while"
            *     (WSob)
            *     (Expression)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            if (rde_param_i_symbol_start_d (p, 311)) return ;
            sequence_1049 (p);
            rde_param_i_symbol_done_d_reduce (p, 311, 310);
            return;
        }
        
        static void sequence_1049 (RDE_PARAM p) {
           /*
            * x
            *     "while"
            *     (WSob)
            *     (Expression)
            *     (WSob)
            *     '\{'
            *     (Block)
            *     '\}'
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_str (p, "while", 309);
            if (rde_param_i_seq_void2void(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_void2value(p)) return;
            sym_Expression (p);
            if (rde_param_i_seq_value2value(p)) return;
            sym_WSob (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\173", 106);
            if (rde_param_i_seq_value2value(p)) return;
            sym_Block (p);
            if (rde_param_i_seq_value2value(p)) return;
            rde_param_i_next_char (p, "\175", 107);
            rde_param_i_state_merge_value (p);
            return;
        }
        
        /*
         * void Symbol 'WS'
         */
        
        static void sym_WS (RDE_PARAM p) {
           /*
            * *
            *     /
            *         x
            *             '\'
            *             (EOL)
            *         x
            *             !
            *                 (EOL)
            *             <space>
            */
        
            if (rde_param_i_symbol_void_start (p, 313)) return ;
            kleene_1063 (p);
            rde_param_i_symbol_done_void (p, 313, 312);
            return;
        }
        
        static void kleene_1063 (RDE_PARAM p) {
           /*
            * *
            *     /
            *         x
            *             '\'
            *             (EOL)
            *         x
            *             !
            *                 (EOL)
            *             <space>
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                choice_1061 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        static void choice_1061 (RDE_PARAM p) {
           /*
            * /
            *     x
            *         '\'
            *         (EOL)
            *     x
            *         !
            *             (EOL)
            *         <space>
            */
        
            rde_param_i_state_push_void (p);
            sequence_1054 (p);
            if (rde_param_i_bra_void2void(p)) return;
            sequence_1059 (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void sequence_1054 (RDE_PARAM p) {
           /*
            * x
            *     '\'
            *     (EOL)
            */
        
            rde_param_i_state_push_void (p);
            rde_param_i_next_char (p, "\\", 29);
            if (rde_param_i_seq_void2void(p)) return;
            sym_EOL (p);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        static void sequence_1059 (RDE_PARAM p) {
           /*
            * x
            *     !
            *         (EOL)
            *     <space>
            */
        
            rde_param_i_state_push_void (p);
            notahead_226 (p);
            if (rde_param_i_seq_void2void(p)) return;
            rde_param_i_next_space (p, 10);
            rde_param_i_state_merge_void (p);
            return;
        }
        
        /*
         * void Symbol 'WSNL'
         */
        
        static void sym_WSNL (RDE_PARAM p) {
           /*
            * *
            *     <space>
            */
        
            if (rde_param_i_symbol_void_start (p, 315)) return ;
            kleene_1067 (p);
            rde_param_i_symbol_done_void (p, 315, 314);
            return;
        }
        
        static void kleene_1067 (RDE_PARAM p) {
           /*
            * *
            *     <space>
            */
        
            while (1) {
                rde_param_i_state_push_2 (p);
                rde_param_i_next_space (p, 10);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
        /*
         * void Symbol 'WSob'
         */
        
        static void sym_WSob (RDE_PARAM p) {
           /*
            * +
            *     /
            *         x
            *             '\'
            *             (EOL)
            *         x
            *             !
            *                 (EOL)
            *             <space>
            */
        
            if (rde_param_i_symbol_void_start (p, 317)) return ;
            poskleene_1078 (p);
            rde_param_i_symbol_done_void (p, 317, 316);
            return;
        }
        
        static void poskleene_1078 (RDE_PARAM p) {
           /*
            * +
            *     /
            *         x
            *             '\'
            *             (EOL)
            *         x
            *             !
            *                 (EOL)
            *             <space>
            */
        
            rde_param_i_loc_push (p);
            choice_1061 (p);
            if (rde_param_i_kleene_abort(p)) return;
            while (1) {
                rde_param_i_state_push_2 (p);
                choice_1061 (p);
                if (rde_param_i_kleene_close(p)) return;
            }
            return;
        }
        
    }

    ## END of GENERATED CODE. DO NOT EDIT.
    # # ## ### ###### ######## #############

    # # ## ### ###### ######## #############
    ## Global PARSER management, per interp

    critcl::ccode {
	/* -*- c -*- */

	typedef struct PARSERg {
	    long int counter;
	    char     buf [50];
	} PARSERg;

	static void
	PARSERgRelease (ClientData cd, Tcl_Interp* interp)
	{
	    ckfree((char*) cd);
	}

	static const char*
	PARSERnewName (Tcl_Interp* interp)
	{
#define KEY "tcllib/parser/xtal/critcl"

	    Tcl_InterpDeleteProc* proc = PARSERgRelease;
	    PARSERg*                  parserg;

	    parserg = Tcl_GetAssocData (interp, KEY, &proc);
	    if (parserg  == NULL) {
		parserg = (PARSERg*) ckalloc (sizeof (PARSERg));
		parserg->counter = 0;

		Tcl_SetAssocData (interp, KEY, proc,
				  (ClientData) parserg);
	    }

	    parserg->counter ++;
	    sprintf (parserg->buf, "ParserBase%ld", parserg->counter);
	    return parserg->buf;
#undef  KEY
	}

	static void
	PARSERdeleteCmd (ClientData clientData)
	{
	    /*
	     * Release the whole PARSER
	     * (Low-level engine only actually).
	     */
	    rde_param_del ((RDE_PARAM) clientData);
	}
    }

    # # ## ### ##### ######## #############
    ## Functions implementing the object methods, and helper.

    critcl::ccode {
	static int  COMPLETE (RDE_PARAM p, Tcl_Interp* interp);

	static int parser_PARSE  (RDE_PARAM p, Tcl_Interp* interp, int objc, Tcl_Obj* CONST* objv)
	{
	    int mode;
	    Tcl_Channel chan;

	    if (objc != 3) {
		Tcl_WrongNumArgs (interp, 2, objv, "chan");
		return TCL_ERROR;
	    }

	    chan = Tcl_GetChannel(interp,
				  Tcl_GetString (objv[2]),
				  &mode);

	    if (!chan) {
		return TCL_ERROR;
	    }

	    rde_param_reset (p, chan);
	    MAIN (p) ; /* Entrypoint for the generated code. */
	    return COMPLETE (p, interp);
	}

	static int parser_PARSET (RDE_PARAM p, Tcl_Interp* interp, int objc, Tcl_Obj* CONST* objv)
	{
	    char* buf;
	    int   len;

	    if (objc != 3) {
		Tcl_WrongNumArgs (interp, 2, objv, "text");
		return TCL_ERROR;
	    }

	    buf = Tcl_GetStringFromObj (objv[2], &len);

	    rde_param_reset (p, NULL);
	    rde_param_data  (p, buf, len);
	    MAIN (p) ; /* Entrypoint for the generated code. */
	    return COMPLETE (p, interp);
	}

	/* See also rde_critcl/m.c, param_COMPLETE() */
	static int COMPLETE (RDE_PARAM p, Tcl_Interp* interp)
	{
	    if (rde_param_query_st (p)) {
		long int  ac;
		Tcl_Obj** av;

		rde_param_query_ast (p, &ac, &av);

		if (ac > 1) {
		    Tcl_Obj** lv = NALLOC (3+ac, Tcl_Obj*);

		    memcpy(lv + 3, av, ac * sizeof (Tcl_Obj*));
		    lv [0] = Tcl_NewObj ();
		    lv [1] = Tcl_NewIntObj (1 + rde_param_query_lstop (p));
		    lv [2] = Tcl_NewIntObj (rde_param_query_cl (p));

		    Tcl_SetObjResult (interp, Tcl_NewListObj (3, lv));
		    ckfree ((char*) lv);

		} else if (ac == 0) {
		    /*
		     * Match, but no AST. This is possible if the grammar
		     * consists of only the start expression.
		     */
		    Tcl_SetObjResult (interp, Tcl_NewStringObj ("",-1));
		} else {
		    Tcl_SetObjResult (interp, av [0]);
		}

		return TCL_OK;
	    } else {
		Tcl_Obj* xv [1];
		const ERROR_STATE* er = rde_param_query_er (p);
		Tcl_Obj* res = rde_param_query_er_tcl (p, er);
		/* res = list (location, list(msg)) */

		/* Stick the exception type-tag before the existing elements */
		xv [0] = Tcl_NewStringObj ("pt::rde",-1);
		Tcl_ListObjReplace(interp, res, 0, 0, 1, xv);

		Tcl_SetErrorCode (interp, "PT", "RDE", "SYNTAX", NULL);
		Tcl_SetObjResult (interp, res);
		return TCL_ERROR;
	    }
	}
    }

    # # ## ### ##### ######## #############
    ## Object command, method dispatch.

    critcl::ccode {
	static int parser_objcmd (ClientData cd, Tcl_Interp* interp, int objc, Tcl_Obj* CONST* objv)
	{
	    RDE_PARAM p = (RDE_PARAM) cd;
	    int m, res;

	    static CONST char* methods [] = {
		"destroy", "parse", "parset", NULL
	    };
	    enum methods {
		M_DESTROY, M_PARSE, M_PARSET
	    };

	    if (objc < 2) {
		Tcl_WrongNumArgs (interp, objc, objv, "option ?arg arg ...?");
		return TCL_ERROR;
	    } else if (Tcl_GetIndexFromObj (interp, objv [1], methods, "option",
					    0, &m) != TCL_OK) {
		return TCL_ERROR;
	    }

	    /* Dispatch to methods. They check the #args in
	     * detail before performing the requested
	     * functionality
	     */

	    switch (m) {
		case M_DESTROY:
		    if (objc != 2) {
			Tcl_WrongNumArgs (interp, 2, objv, NULL);
			return TCL_ERROR;
		    }

		Tcl_DeleteCommandFromToken(interp, (Tcl_Command) rde_param_query_clientdata (p));
		return TCL_OK;

		case M_PARSE:	res = parser_PARSE  (p, interp, objc, objv); break;
		case M_PARSET:	res = parser_PARSET (p, interp, objc, objv); break;
		default:
		/* Not coming to this place */
		ASSERT (0,"Reached unreachable location");
	    }

	    return res;
	}
    }

    # # ## ### ##### ######## #############
    # Class command, i.e. object construction.

    critcl::ccommand ParserBase_critcl {dummy interp objc objv} {
	/*
	 * Syntax: No arguments beyond the name
	 */

	RDE_PARAM   parser;
	CONST char* name;
	Tcl_Obj*    fqn;
	Tcl_CmdInfo ci;
	Tcl_Command c;

#define USAGE "?name?"

	if ((objc != 2) && (objc != 1)) {
	    Tcl_WrongNumArgs (interp, 1, objv, USAGE);
	    return TCL_ERROR;
	}

	if (objc < 2) {
	    name = PARSERnewName (interp);
	} else {
	    name = Tcl_GetString (objv [1]);
	}

	if (!Tcl_StringMatch (name, "::*")) {
	    /* Relative name. Prefix with current namespace */

	    Tcl_Eval (interp, "namespace current");
	    fqn = Tcl_GetObjResult (interp);
	    fqn = Tcl_DuplicateObj (fqn);
	    Tcl_IncrRefCount (fqn);

	    if (!Tcl_StringMatch (Tcl_GetString (fqn), "::")) {
		Tcl_AppendToObj (fqn, "::", -1);
	    }
	    Tcl_AppendToObj (fqn, name, -1);
	} else {
	    fqn = Tcl_NewStringObj (name, -1);
	    Tcl_IncrRefCount (fqn);
	}
	Tcl_ResetResult (interp);

	if (Tcl_GetCommandInfo (interp,
				Tcl_GetString (fqn),
				&ci)) {
	    Tcl_Obj* err;

	    err = Tcl_NewObj ();
	    Tcl_AppendToObj    (err, "command \"", -1);
	    Tcl_AppendObjToObj (err, fqn);
	    Tcl_AppendToObj    (err, "\" already exists", -1);

	    Tcl_DecrRefCount (fqn);
	    Tcl_SetObjResult (interp, err);
	    return TCL_ERROR;
	}

	parser = rde_param_new (sizeof(p_string)/sizeof(char*), (char**) p_string);
	c = Tcl_CreateObjCommand (interp, Tcl_GetString (fqn),
				  parser_objcmd, (ClientData) parser,
				  PARSERdeleteCmd);
	rde_param_clientdata (parser, (ClientData) c);
	Tcl_SetObjResult (interp, fqn);
	Tcl_DecrRefCount (fqn);
	return TCL_OK;
    }

    ##
    # # ## ### ##### ######## #############
}

# # ## ### ##### ######## ############# #####################
## Ready (Note: Our package provide is at the top).
critcl::tsources xtal.tcl shell.tcl
