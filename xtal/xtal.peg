# TBD -
# [11:12]	evilotto	when walking the tree with pt::ast, the first element of any node is the name of the node.  So what I did to make that useful was to mensure that a particular named rule always matched a partuicular thing.  
# [11:13]	evilotto	I was writing a grammar for a sql-like language, with "select bla bla " and "update bla bla"
# [11:14]	evilotto	I wanted the "qtype" production to be the query type.  to do this while still keeping things pretty general, I made "qtype" capture the word that it was defined to capture.  that is:
# [11:14]	evilotto	query <- update / select ;
# [11:15]	evilotto	qtype <- <alpha>+; 
# 		update <- & "update" qtype  ... update-speciifc-stuff  ;
# 		select <- & "select" qtype ... select-specific stuff ;
# [11:16]	evilotto	so the "qtype" node is either "update" or "select", even though they are different productions.
# [11:16]	evilotto	I have no idea if this is typical for how anyone else uses it.
# [11:17]	evilotto	ditto the way I keep the input around to get the values of the tokens, because the parser doesn't store it (kind of annoying, really)

PEG XtalParser (Program)
    # A Program is a sequence of statements.
    # The Comment? is there because otherwise [tscript {# comment}] errors out
    Program <- Block Comment? EOF ;
    # TBD - perhaps WS should be moved out of Block to where Block is used?
    Block <- WS (Statement (WS Separator WS Statement)*)? WS ;
void:  EOF <- !.;

    Statement <- FunctionDefinition
                 / IfStatement
		 / WhileStatement
		 / ForStatement
		 / TryStatement
		 / ThrowStatement
		 / ReturnStatement
		 / BreakStatement
		 / ContinueStatement
    	      	 / Assignment 
                 / Expression
                 / TclScriptBlock
                 / Empty ;
void:    Empty <- WS ;

    # Assignment to a single LValue
    Assignment <- LValue WS AssignOp WS (TclScriptBlock / Expression) ;

    IfStatement <- 'if' WSob Expression WSob '{' Block '}'
                   (WSob 'else' WSob '{' Block '}')? ;

    WhileStatement <- 'while' WSob Expression WSob '{' Block '}' ;

    ForStatement <- 'for' WSob Identifier WSob 'in' WSob Expression WSob ('by' WSob Expression WSob)? '{' Block '}' ;

    TryStatement <- 'try' WSob '{' Block '}' (WSob (OnHandler / TrapHandler))* (WSob FinallyClause)? ;
    OnHandler     <- 'on' WSob ReturnCode (WSob Identifier)* WSob '{' Block '}' ;
    ReturnCode <- 'error' / 'ok' / 'continue' / 'return' / 'break' / '-'? <digit>+ ;
    TrapHandler   <- 'trap' WSob Sequence (WSob Identifier)* WSob '{' Block '}' ;
    FinallyClause <- 'finally' WSob '{' Block '}' ;

    ThrowStatement <- 'throw' WSob Expression (WS ',' WS Expression)* ;
    
    ReturnStatement <- 'return' (WSob Expression)? ;
    BreakStatement <- 'break' ;
    ContinueStatement <- 'continue' ;

    TclScriptBlock <- '<' TclScript '>' (& TclScriptEndMarker) ;
leaf: TclScript <- (!('>' TclScriptEndMarker) .)* ;
void: TclScriptEndMarker <- WS (';'/EOL/EOF) ;

    FunctionDefinition <- 'function' WSob Identifier WS '(' WS ParameterDefinitions WS ')' WSob '{' Block '}' ;
    ParameterDefinitions <- (Parameter (WS ',' WS Parameter)*)? ;
    Parameter <- ParameterIdentifier (WS '=' WS Expression)? ;

    # Any term that can be assigned to. Note only range based slices
    # are allowed so cannot use VarSlice here.
    LValue <- Identifier WS (Element / TableColumns)? (WS '[' WS (Range / Expression) WS ']')? ;

    # Expressions in ascending precedence order
    Expression <- LogicalOrExpr ;
    LogicalOrExpr <- LogicalAndExpr ( WS LogicalOrOp WS LogicalAndExpr)* ;
    LogicalAndExpr <- RangeExpr (WS  LogicalAndOp WS RangeExpr)* ;
    RangeExpr  <- BitOrExpr WS RangeSeparator (WS BitOrExpr)? / BitOrExpr ;
    leaf: RangeSeparator <- ':' ;
    # Following are written as to implement left-associativity
    BitOrExpr <- BitXorExpr (WS BitOrOp WS BitXorExpr)* ;
    BitXorExpr <- BitAndExpr (WS BitXorOp WS BitAndExpr)* ;
    BitAndExpr <- RelExpr (WS BitAndOp WS RelExpr)* ;
    RelExpr <- AddExpr (WS RelOp WS AddExpr)? ;
    AddExpr  <- MulExpr (WS AddOp WS MulExpr)* ;
    MulExpr <- UnaryExpr (WS MulOp WS UnaryExpr)* ;
    UnaryExpr <- PostfixExpr / UnaryOp WS UnaryExpr ;
    PostfixExpr  <- PrimaryExpr (WS PostfixOp)* ;

    # Basic terms
    PrimaryExpr  <- BuiltIn
                    / BuiltInCall
                    / IndirectIdentifier
		    / IndirectLiteral
		    / Identifier
		    / Number
		    / Token
		    / String
		    / Sequence
		    / '(' WS Expression WS ')' ;

    BuiltIn <- ColumnConstructor
               / TableConstructor
	       / ListCast
	       / DictCast
	       / SortCommand
	       / SearchCommand
	       / SelectorContext ;

    BuiltInCall <- [@] BuiltInFunction WS '(' WSNL ArgumentList? WSNL ')' ;
leaf:    BuiltInFunction <- 'delete'
                            / 'inject'
                            / 'insert'
                            / 'lookup'
                            / 'reverse' 
                            / 'sum' ;
    # Postfix operators

    PostfixOp <-  Selector
		  / FunctionCall
		  / Element
		  / TableColumns ;
    Selector <- '[' WS Expression WS ']' ;
    FunctionCall <- Element* WS '(' WSNL ArgumentList? WSNL ')' ;
    ArgumentList <- Argument (WSNL ',' WSNL Argument)* ;
    Argument <- OptionString WS Expression / Expression ;
    Element <- ElementOp WS ElementIdentifier ;
    TableColumns <- ElementOp WS '(' WSNL TableColumnList? WSNL ')' ;
    TableColumnList <- ColumnIdentifier (WSNL ',' WSNL ColumnIdentifier)* ;

    # Constructors
    
    ColumnConstructor <- [@] ColumnType (WS Sequence / WS '(' WS Expression WS ')')? ;

    TableConstructor <- [@] 'table' WS '(' WSNL TableColumnDefs? WSNL ')' WS Sequence? ;
    TableColumnDefs  <- TableColumnDef (WSNL ',' WSNL TableColumnDef)* ;
    TableColumnDef   <- ColumnIdentifier WSNL ColumnType ;

    # Note cannot use ',' as separator here since that will create ambiguity
    # when used inside a function call
    SortCommand <- [@] 'sort' WS Expression (WS '->' WS Expression)? (WS SortOptions)? ;
    SortOptions <- SortOption (WS SortOption)* ;
    # Options do not begin with '-' because that creates ambiguity with
    # expressions (- operator)
leaf: SortOption <- 'indices' 
                    / 'nocase'
                    / 'increasing'
                    / 'decreasing' ;

    SearchCommand <- [@] 'search' WS PostfixExpr (WS SearchTarget)? WS RelOp WS PostfixExpr WS (WS SearchOption)* ; 
    SearchTarget <- '->' WS PostfixExpr ;
leaf:    SearchOption  <- 'inline' / 'all' ;
    
    ListCast <- [@] 'list' WS '(' WS Expression WS ')' ;

    DictCast <- [@] 'dict' WS '(' WS Expression WS ')' ;
    
leaf: SelectorContext <- '@@' ;

    # Syntax based definitions

leaf: ColumnType <- 'boolean' / 'byte' / 'int' / 'uint' / 'wide' / 'double' / 'string' / 'any' ;
leaf: IndirectIdentifier <- [$] Identifier ;
IndirectLiteral <- [$] (String / Token) ;
ColumnIdentifier <- Identifier / IndirectIdentifier / IndirectLiteral / Token / String / Number;
ElementIdentifier <- Identifier / IndirectIdentifier / IndirectLiteral / Token / String / Number;
IdentifierList <- Identifier (WSNL ',' WSNL Identifier)* ;
leaf: ParameterIdentifier <- ('_' / <alpha>) ('_' / <alnum>)* ;
leaf: Identifier <- ('_' / '::' / <alpha>) ('_' / '::' / <alnum>)* ;
leaf: OptionString <- '-' ('_' / '-' / <alnum>)+ ;
leaf: Number <- '0x' <xdigit>+ / <ddigit> + ('.' <ddigit> + )? ( ('e' / 'E' ) ('+' / '-') ? <ddigit> + )? ;
Sequence <- '{' WSNL SequenceContent? WSNL '}' ;
SequenceContent <- Expression (WSNL ',' WSNL Expression)* ;
leaf: Token <- SingleQuote Identifier ;
leaf: String <- Quote (!Quote Char)* Quote;
void: Char   <- BackSlash ( Quote 
                     / BackSlash
                     / [bfnrt]
                     / 'x' <xdigit> <xdigit> <xdigit>
                     / 'u' <xdigit> <xdigit> <xdigit> <xdigit>
                     / 'U' <xdigit> <xdigit> <xdigit> <xdigit> <xdigit> <xdigit> <xdigit> <xdigit>
                    )
           / . ;
void: Quote <- '"';
void: SingleQuote <- ['] ;
void: Backslash <- '\\';

void: Separator <- Comment? EOL / ';';
void:   Comment <- '#' (!EOL .)* ;
void: EOL <- '\n';

leaf: AssignOp <- '=' ;

leaf: MulOp       <- '*' / '/'                                    ;
leaf: AddOp       <- '+' / '-'                                    ;
leaf: PowOp       <- '**'                                         ;

# NOTE tokens whose prefixes match shorter tokens need to be listed first!
leaf: RelOp <- '==' / '!=' / '<=' / '>=' / '<' / '>' /
               '=^' / '!^' /
               '~^' / '~' / '!~^' / '!~' ;
leaf: UnaryOp <- [-+~!%] ;
leaf: BitAndOp <- '&' ;
leaf: BitOrOp <- '|' ;
leaf: BitXorOp <- '^' ;
leaf: LogicalAndOp <- '&&' ;
leaf: LogicalOrOp <- '||' ;

leaf: ElementOp <- '.' ;

void: WS    <- (('\\' EOL) / (!EOL <space>))*;
void: WSob  <- (('\\' EOL) / (!EOL <space>))+;
void: WSNL <- <space>* ;
END;
