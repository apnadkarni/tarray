# xtal try tests

source [file join [file dirname [info script]] testutil.tcl]

namespace eval tarray::test {
    test xtal-try-1.0 {Try with no arg} -body {
        xtal::xtal {try}
    } -result "Parse error*" -returnCodes error -match glob

    test xtal-try-2.0 {Try with one arg} -body {
        set x 1
        xtal::xtal {try {x}}
    } -result 1
            
    test xtal-try-2.1 {Try with one arg - error} -body {
        xtal::xtal {try {nosuchvar}}
    } -result "*no such var*" -returnCodes error -match glob

    test xtal-try-3.0 {Try with finally} -body {
        xtal::xtal {try {x = 1} finally {x = 2}}
        set x
    } -result 2
            
    test xtal-try-3.1 {Try with finally error} -setup {
        unset -nocomplain finvar
    } -body {
        list [catch {
            xtal::xtal {try {nosuchvar} finally {finvar = 1}}
        } err] $err $finvar
    } -result {1 {can't read "nosuchvar": no such variable} 1}

    # Trap 
    test xtal-try-4.0 {Try with trap} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {x = 1} trap {
                    'TCL', 'LOOKUP', 'VARNAME'
                } msg erdict {
                    trapvar = trapped
                }
            }
        }] $x [info exists msg] [info exists erdict] [info exists trapvar]
    } -result {0 1 0 0 0}

    test xtal-try-4.0.1 {Try with trap} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {x = 1} trap {
                    'TCL', 'LOOKUP', 'VARNAME'
                } msg {
                    trapvar = trapped
                }
            }
        }] $x [info exists msg] [info exists trapvar]
    } -result {0 1 0 0}

    test xtal-try-4.0.2 {Try with trap} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {x = 1} trap {
                    'TCL', 'LOOKUP', 'VARNAME'
                } {
                    trapvar = trapped
                }
            }
        }] $x [info exists trapvar]
    } -result {0 1 0}

    test xtal-try-4.0.3 {Try with trap} -setup {
        unset -nocomplain x trapvar erdict msg extravar
    } -body {
        list [catch {
            xtal::xtal {
                try {x = 1} trap {
                    'TCL', 'LOOKUP', 'VARNAME'
                } msg erdict extravar {
                    trapvar = trapped
                }
            }
        }] $x [info exists msg] [info exists erdict] [info exists trapvar] [info exists extravar]
    } -result {0 1 0 0 0 0}

    test xtal-try-4.1 {Try with trap error} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {nosuchvar} trap {
                    'TCL', 'LOOKUP', 'VARNAME'
                } msg erdict {
                    trapvar  = 'trapped'
                }
            }
        }] $msg [dict get $erdict -code] $trapvar
    } -result {0 {can't read "nosuchvar": no such variable} 1 trapped}

    test xtal-try-4.1.1 {Try with trap error} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {nosuchvar} trap {
                    'TCL', 'LOOKUP', 'VARNAME'
                } msg {
                    trapvar  = 'trapped'
                }
            }
        }] $msg $trapvar
    } -result {0 {can't read "nosuchvar": no such variable} trapped}
    
    test xtal-try-4.1.2 {Try with trap error} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {nosuchvar} trap {
                    'TCL', 'LOOKUP', 'VARNAME'
                } {
                    trapvar  = 'trapped'
                }
            }
        }] $trapvar
    } -result {0 trapped}
    
    test xtal-try-4.1.3 {Try with trap error} -setup {
        unset -nocomplain x trapvar erdict msg extravar
    } -body {
        list [catch {
            xtal::xtal {
                try {nosuchvar} trap {
                    'TCL', 'LOOKUP', 'VARNAME'
                } msg erdict extravar {
                    trapvar  = 'trapped'
                }
            }
        }] $msg [dict get $erdict -code] $trapvar [info exists extravar]
    } -result {0 {can't read "nosuchvar": no such variable} 1 trapped 0}

    test xtal-try-4.2 {Try with trap error} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {nosuchvar} trap {
                    'TCL', 'LOOKUP', 'SOMEOTHERERROR'
                } msg erdict {
                    trapvar = 'someothererror'
                } trap {
                    'TCL', 'LOOKUP', 'VARNAME'
                } msg erdict {
                    trapvar  = 'varname'
                }
            }
        }] $msg [dict get $erdict -code] $trapvar
    } -result {0 {can't read "nosuchvar": no such variable} 1 varname}
    
    test xtal-try-4.3 {Try with trap error} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {nosuchvar} trap {
                    'TCL', 'LOOKUP', 'SOMEOTHERERROR'
                } msg erdict {
                    trapvar = 'someothererror'
                }
            }
        }] [info exists msg] [info exists erdict] [info exists trapvar]
    } -result {1 0 0 0}

    # on
    test xtal-try-5.0 {Try with on 0} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {x = 123} on 0 msg erdict {
                    trapvar = 'trapped'
                }
            }
        }] $x $msg [dict get $erdict -code] $trapvar
    } -result {0 123 123 0 trapped}

    test xtal-try-5.0.1 {Try with on ok} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {x = 123} on ok msg erdict {
                    trapvar = 'trapped'
                }
            }
        }] $x $msg [dict get $erdict -code] $trapvar
    } -result {0 123 123 0 trapped}

    test xtal-try-5.0.2 {Try with on - no match} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {x = 123} on error msg erdict {
                    trapvar = 'trapped'
                }
            }
        }] $x [info exists msg] [info exists erdict] [info exists trapvar]
    } -result {0 123 0 0 0}

    test xtal-try-5.0.3 {Try with on 0} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {x = 123} on 0 msg {
                    trapvar = 'trapped'
                }
            }
        }] $x $msg $trapvar
    } -result {0 123 123 trapped}

    test xtal-try-5.0.4 {Try with on} -setup {
        unset -nocomplain x trapvar erdict msg
    } -body {
        list [catch {
            xtal::xtal {
                try {x = 123} on ok {
                    trapvar = 'trapped'
                }
            }
        }] $x $trapvar
    } -result {0 123 trapped}

    set testnum -1
    foreach {code icode} {0 0 ok 0 1 1 error 1 2 2 return 2 3 3 break 3 4 4 continue 4} {
        eval [string map [list %CODE% $code %ICODE% $icode] {
            test xtal-try-5.[incr testnum].0 {Try on} -body {
                set trapvar ""
                list [catch {
                    xtal::xtal {
                        try {
                            <return -level 0 -code %CODE%>
                        } on %CODE% {trapvar = 'trapped'}
                    }
                }] $trapvar
            } -result {0 trapped}
            
            # TBD - we skip these because break(3)/continue(4)  get converted
            # to 1 (error) at some point if called ourside a loop. Need
            # to devise a better test, maybe in a loop. Similarly for return(2)
            if {%ICODE% ni {2 3 4}} {
                test xtal-try-5.$testnum.1 {Try on} -body {
                    set trapvar ""
                    list [catch {
                        xtal::xtal {
                            try {
                                <return -level 0 -code %CODE%>
                            } on 100 {trapvar = 'trapped'}
                        }
                    }] $trapvar
                } -result {%ICODE% {}}
            }
        }]
    }

    test xtal-try-6.0 {try with multiple clauses} -body {
        set trapvar ""
        set res ""
        list [catch {
            xtal::xtal {
                try {
                    x = nosuchvar
                } trap {'TCL', 'LOOKUP', 'VARNAME'} message status_dict {
                    res = 'lookup'
                } on error message status_dict {
                    res = 'someothererror'
                } finally {
                    <append res "finally">
                }
            }
        }] $res
    } -result {0 lookupfinally}

    test xtal-try-6.1 {try with multiple clauses} -body {
        set trapvar ""
        set res ""
        list [catch {
            xtal::xtal {
                try {
                    throw 'TCL', 'SOMEOTHERERROR', 'VARNAME', "another error"
                } trap {'TCL', 'LOOKUP', 'VARNAME'} message status_dict {
                    res = 'lookup'
                } on error message status_dict {
                    res = 'someothererror'
                } finally {
                    <append res "finally">
                }
            }
        }] $res
    } -result {0 someothererrorfinally}

    # TBD - need more combinations of clauses
}

::tcltest::cleanupTests
