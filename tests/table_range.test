# TBD - sorted indices tarray
# table range tests

source testutil.tcl

namespace eval tarray::test {

    proc test_table_get_range_astable {low high {types {any string boolean byte double int uint wide}}} {

        set expected_rows [samplerows $types $low $high]
        set ta [tarray::table range -table [sampletable $types] $low $high]

        if {[trequal $ta [col_def $types] $expected_rows]} {
            return ""
        } else {
            return "Returned table != expected"
        }
    }

    proc test_table_get_range_aslist {low high {types {any string boolean byte double int uint wide}}} {

        set expected_rows [samplerows $types $low $high]
        set rows [tarray::table range -list [sampletable $types] $low $high]

        if {[llequal $types $rows $expected_rows]} {
            return ""
        } else {
            return "Returned list != expected"
        }
    }

    proc test_table_get_range_asdict {low high {types {any string boolean byte double int uint wide}}} {

        set expected_rows [samplerows $types $low $high]
        set result [tarray::table range -dict [sampletable $types] $low $high]
        
        set max [expr {[samplesize] - 1}]
        foreach var {low high} {
            if {[set $var] eq "end"} { set $var $max }
            if {[set $var] < 0} {set $var 0}
            if {[set $var] > $max} {set $var $max}
        }

        set rows {}
        for {set i $low} {$i <= $high} {incr i} {
            lappend rows [dict get $result $i]
        }

        if {[llequal $types $rows $expected_rows]} {
            return ""
        } else {
            return "Returned dict != expected"
        }
    }

    ################################################################
    # Tests

    #
    # table range range

    test table_range-astable-1.0 {
        Get the first element in empty array
    } -body {
        tarray::table range [newtable {}] 0 end
    } -result [trep {}] -match table

    test table_range-astable-1.1 {
        Get the first element in empty array
    } -body {
        tarray::table range [newtable {}] 0 0
    } -result [trep {}] -match table

    test table_range-astable-1.2 {
        Get the first element in empty array
    } -body {
        tarray::table range [newtable {int any}] 0 end
    } -result [trep [list [crep int] [crep any]]]

    test table_range-astable-1.3 {
        Get the first element in empty array
    } -body {
        tarray::table range [newtable {boolean string}] 0 0
    } -result [trep [list [crep boolean] [crep string]]]

    test table_range-astable-2.0 {
        Get the first element
    } -body { test_table_get_range_astable 0 0}

    test table_range-astable-2.1 {
        Get first to end
    } -body { test_table_get_range_astable 0 end }

    test table_range-astable-2.2 {
        Get first to last 
    } -body {
        test_table_get_range_astable 0 [expr {[samplesize]-1}]
    }

    test table_range-astable-2.3 {
        Get range with negative low
    } -body { test_table_get_range_astable -5 100 }

    test table_range-astable-2.4 {
        Get range with out of bounds high
    } -body { test_table_get_range_astable 50 10000}

    test table_range-astable-2.5 {
        Get range out of bounds on both ends
    } -body { test_table_get_range_astable -10 10000 }

    test table_range-astable-2.6 {
        Get end-end
    } -body { test_table_get_range_astable end end }

    test table_range-astable-2.6 {
        Get end-0
    } -body { test_table_get_range_astable end 0 }

    test table_range-astable-4.0 {
        Get indexlist -table option
    } -body {
        tarray::table range -table [newtable {int any} {{0 a} {1 b}}] 0 1
    } -result [trep [list [crep int {0 1}] [crep any {a b}]]]


    #
    # table range -aslist range

    test table_range-aslist-1.0 {
        Get the first element in empty array
    } -body {
        tarray::table range -list [newtable {}] 0 end
    } -result {}

    test table_range-aslist-1.1 {
        Get the first element in empty array
    } -body {
        tarray::table range -list [newtable {}] 0 0
    } -result {}

    test table_range-aslist-1.2 {
        Get the first element in empty array
    } -body {
        tarray::table range -list [newtable {boolean}] 0 end
    } -result {}

    test table_range-aslist-1.3 {
        Get the first element in empty array
    } -body {
        tarray::table range -list [newtable {any}] 0 0
    } -result {}

    test table_range-aslist-2.0 {
        Get the first element
    } -body { test_table_get_range_aslist 0 0}

    test table_range-aslist-2.1 {
        Get first to end
    } -body { test_table_get_range_aslist  0 end }

    test table_range-aslist-2.2 {
        Get first to last 
    } -body { test_table_get_range_aslist  0 [expr {[samplesize] -1}] }

    test table_range-aslist-2.3 {
        Get range with negative low
    } -body { test_table_get_range_aslist -5 100 }

    test table_range-aslist-2.4 {
        Get range with out of bounds high
    } -body { test_table_get_range_aslist 50 10000}

    test table_range-aslist-2.5 {
        Get range out of bounds on both ends
    } -body { test_table_get_range_aslist -10 10000 }

    test table_range-aslist-2.6 {
        Get end-end
    } -body { test_table_get_range_aslist end end }

    test table_range-aslist-2.6 {
        Get end-0
    } -body { test_table_get_range_aslist end 0 }

    #
    # table range -dict range

    test table_range-asdict-1.0 {
        Get the first element in empty array
    } -body {
        tarray::table range -dict [newtable {}] 0 end
    } -result {}

    test table_range-asdict-1.1 {
        Get the first element in empty array
    } -body {
        tarray::table range -dict [newtable {}] 0 0
    } -result {}

    test table_range-asdict-1.2 {
        Get the first element in empty array
    } -body {
        tarray::table range -dict [newtable {boolean int}] 0 end
    } -result {}

    test table_range-asdict-1.3 {
        Get the first element in empty array
    } -body {
        tarray::table range -dict [newtable {string uint}] 0 0
    } -result {}

    test table_range-asdict-2.0 {
        Get the first element
    } -body { test_table_get_range_asdict 0 0}

    test table_range-asdict-2.1 {
        Get first to end
    } -body { test_table_get_range_asdict 0 end }

    test table_range-asdict-2.2 {
        Get first to last 
    } -body {
        test_table_get_range_asdict 0 [expr {[samplesize] -1}]
    }

    test table_range-asdict-2.3 {
        Get range with negative low
    } -body { test_table_get_range_asdict -5 100 }

    test table_range-asdict-2.4 {
        Get range with out of bounds high
    } -body { test_table_get_range_asdict 50 10000}

    test table_range-asdict-2.5 {
        Get range out of bounds on both ends
    } -body { test_table_get_range_asdict -10 10000 }

    test table_range-asdict-2.6 {
        Get end-end
    } -body { test_table_get_range_asdict end end }

    test table_range-asdict-2.6 {
        Get end-0
    } -body { test_table_get_range_asdict end 0 }


    #################################################################

    # Verify -columns

    test table_range-columnsopt-1.0 {
        Verify getting all columns using names
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]        
    } -body {
        trequal [tarray::table range -columns {col0 col1 col2 col3} $tab 0 end] $def $init
    } -result 1

    test table_range-columnsopt-1.1 {
        Verify getting all columns out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        trequal [tarray::table range -columns {2 col0 col1 3} $tab 2 3] {col2 int col0 boolean col1 string col3 double} {{2 0 two 2.0} {3 1 three 3.0}}
    } -result 1

    test table_range-columnsopt-2.0 {
        Verify getting subset of columns
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        trequal [tarray::table range -columns {col0 2} $tab 3 4] {col0 boolean col2 int} {{1 3} {0 4}}
    } -result 1

    test table_range-columnsopt-2.1 {
        Verify getting subset of columns out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        trequal [tarray::table range -columns {col3 1} $tab 4 end] {col3 double col1 any} {{4.0 four}}
    } -result 1

    test table_range-columnsopt-2.2 {
        Verify getting subset of columns out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table range -list -columns {col3 1} $tab 0 0
    } -result {{0.0 zero}}

    test table_range-columnsopt-2.3 {
        Verify getting subset of columns out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table range -dict -columns {col3 1} $tab 0 1
    } -result {0 {0.0 zero} 1 {1.0 one}}

    test table_range-columnsopt-3.0 {
        Verify getting non-existent column position
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table range -columns {col3 5} $tab 0 end
    } -result "Column index '5' out of bounds." -returnCodes error

    test table_range-columnsopt-3.1 {
        Verify getting non-existent column position
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table range -columns {col3 col5} $tab 0 0
    } -result "No column with specified name 'col5'." -returnCodes error

    test table_range-columnsopt-3.2 {
        Verify getting duplicate columns
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table range -columns {0 1 0} $tab 1 4
    } -result "Column index '0' specified multiple times in column list." -returnCodes error

    test table_range-columnsopt-3.3 {
        Verify getting duplicate columns
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table range -columns {col2 col2} $tab 1 2
    } -result "Column index '2' specified multiple times in column list." -returnCodes error

    test table_range-columnsopt-3.4 {
        Verify getting duplicate columns
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table range -columns {col2 col0 2} $tab 1 3
    } -result "Column index '2' specified multiple times in column list." -returnCodes error

    test table_range-columnsopt-3.5 {
        Verify getting empty column list
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table range -columns {} $tab 1 3
    } -result "A column map must have at least one column specified." -returnCodes error

    test table_range-columnsopt-3.6 {
        Verify getting negative column position
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table range -columns {-1} $tab 1 3
    } -result "Column index '-1' out of bounds." -returnCodes error




}

::tcltest::cleanupTests
