# column size tests

source testutil.tcl

namespace eval tarray::test {

    # args is any combination of -nocase, -increasing, -decreasing
    proc vsort_verify {type args} {
        set l [lshuffle [samplerange $type]]
        return [vcol_change_and_verify $type $l [lsort [lsort_cmp $type] {*}$args $l] [linsert $args 0 vsort]]
    }

    # Verify that presorted tarrays are sorted correctly
    proc vsort_verify_presorted {type presort_args args} {
        set l [lshuffle [samplerange $type]]
        set ta [tarray::column create $type $l]

        lassign [time {set sorted_ta [tarray::column sort {*}$presort_args $ta]}] unsorted_time
        set resorted_ta $sorted_ta
        lassign [time {tarray::column vsort {*}$args resorted_ta}] presorted_time
        set lsort_op [lsort_cmp $type]
        set l [lsort $lsort_op {*}$args [lsort $lsort_op {*}$presort_args $l]]
        if {[clequal $resorted_ta $type $l]} {
            if {[llength $l] > 100} {
                # For Booleans not much difference in time */
                if {$type ne "boolean"} {
                    if {$unsorted_time < ($presorted_time * 5)} {
                        puts "Presorted time (type $type, length [llength $l]) $presorted_time not much smaller than unsorted time $unsorted_time"
                    }
                } else {
                    if {$unsorted_time < $presorted_time} {
                        puts "Presorted time (type $type, length [llength $l]) $presorted_time greater than unsorted time $unsorted_time"
                    }
                }
            }
            return 0
        } else {
            return 1
        }
    }

    foreach type {boolean string any byte double int uint wide} {
        test column_vsort-$type-1.0 {
            Sort empty column
        } -body {
            vcol_change_and_verify $type {} {} vsort
        } -result 0

        test column_vsort-$type-1.1 {
            Sort empty column -increasing
        } -body {
            vcol_change_and_verify $type {} {} {vsort -increasing}
        } -result 0

        test column_vsort-$type-1.2 {
            Sort empty column -decreasing
        } -body {
            vcol_change_and_verify $type {} {} {vsort -decreasing}
        } -result 0

        test column_vsort-$type-2.0 {
            Sort column (shared)
        } -body {
            vsort_verify $type
        } -result 0

        test column_vsort-$type-3.0 {
            Sort column -increasing
        } -body {
            vsort_verify $type -increasing
        } -result 0

        test column_vsort-$type-4.0 {
            Sort column -decreasing
        } -body {
            vsort_verify $type -decreasing
        } -result 0

        test column_vsort-$type-5.0 {
            Sort presorted column -increasing -increasing
        } -body {
            vsort_verify_presorted $type -increasing -increasing
        } -result 0

        test column_vsort-$type-5.1 {
            Sort presorted column -increasing -decreasing
        } -body {
            vsort_verify_presorted $type -increasing -decreasing
        } -result 0

        test column_vsort-$type-5.2 {
            Sort presorted column -decreasing -decreasing
        } -body {
            vsort_verify_presorted $type -decreasing -decreasing
        } -result 0

        test column_vsort-$type-5.3 {
            Sort presorted column -decreasing -increasing 
        } -body {
            vsort_verify_presorted $type -decreasing -increasing
        } -result 0

    }

    #
    # -nocase tests

    foreach type {string any} {
        # Although the remaining tests 2.0 onward include mixed case in sample
        # data, explicitly test just to make sure
        test column_vsort-$type-nocase-1.0 {
            Sort column
        } -body {
            set ta [tarray::column create $type {abc Abc def dEg _}]
            tarray::column vsort ta
            set ta
        } -result [crep $type {Abc _ abc dEg def}] -match column

        test column_vsort-$type-nocase-1.1 {
            Sort column -nocase
        } -body {
            set ta [tarray::column create $type {abc Abc def dEg _}]
            tarray::column vsort -nocase ta
            set ta
        } -result [crep $type {_ abc Abc def dEg}] -match column

        test column_vsort-$type-nocase-1.2 {
            Sort column -decreasing
        } -body {
            set ta [tarray::column create $type {abc Abc def dEg _}]
            tarray::column vsort -decreasing ta
            set ta
        } -result [crep $type {def dEg abc _ Abc}] -match column

        test column_vsort-$type-nocase-1.3 {
            Sort column -decreasing
        } -body {
            set ta [tarray::column create $type {abc Abc def dEg _}]
            tarray::column vsort -nocase -decreasing ta
            set ta
        } -result [crep $type {dEg def abc Abc _}] -match column

        test column_vsort-$type-nocase-1.4 {
            Sort column -increasing
        } -body {
            set ta [tarray::column create $type {abc Abc def dEg _}]
            tarray::column vsort -increasing ta
            set ta
        } -result [crep $type {Abc _ abc dEg def}] -match column

        test column_vsort-$type-nocase-1.5 {
            Sort column -nocase -increasing
        } -body {
            set ta [tarray::column create $type {abc Abc def dEg _}]
            tarray::column vsort -nocase -increasing ta
            set ta
        } -result [crep $type {_ abc Abc def dEg}] -match column

        test column_vsort-$type-nocase-2.0 {
            Sort column
        } -body {
            vsort_verify $type -nocase
        } -result 0

        test column_vsort-$type-nocase-3.0 {
            Sort column -increasing -nocase
        } -body {
            vsort_verify $type -increasing -nocase
        } -result 0

        test column_vsort-$type-nocase-4.0 {
            Sort column -decreasing -nocase
        } -body {
            vsort_verify $type -decreasing -nocase
        } -result 0

        test column_vsort-$type-nocase-5.0 {
            Sort presorted column -increasing -increasing -nocase
        } -body {
            vsort_verify_presorted $type  -increasing -increasing -nocase
        } -result 0

        test column_vsort-$type-nocase-5.1 {
            Sort presorted column -increasing -decreasing -nocase
        } -body {
            vsort_verify_presorted $type -increasing -decreasing -nocase
        } -result 0

        test column_vsort-$type-nocase-5.2 {
            Sort presorted column -decreasing -decreasing -nocase
        } -body {
            vsort_verify_presorted $type -decreasing -decreasing -nocase
        } -result 0

        test column_vsort-$type-nocase-5.3 {
            Sort presorted column -decreasing -increasing  -nocase
        } -body {
            vsort_verify_presorted $type -decreasing -increasing -nocase
        } -result 0

        #
        # Tests for -indirect
        # We test that -indirect is in effect by testing order of elements
        # that are equal in the second -nocase sort. They should be in the
        # order of the indices array, not in the order of the original
        # We do this for type "any" using -nocase but how do we test
        # similarly for other types ? TBD
        test column_vsort-$type-indirect-1.0 {
            Sort -indirect $type
        } -body {
            set tcol [tarray::column create $type {a A b B}]
            set indices [tarray::column sort -indices $tcol]
            set expected {1 0 3 2}
            compare_tcols_lists int [tarray::column vsort -indirect $tcol -nocase indices] $expected $indices $expected
        } -result 0

        set testnum 0
        foreach ind_type {byte uint wide double} {
            test column_vsort-$type-indirect-1.0.[incr testnum] {
                Sort -indirect $type with $ind_type index column
            } -body {
                set tcol [tarray::column create $type {a A b B}]
                set indices [tarray::column create $ind_type [tarray::column sort -indices $tcol]]
                set expected {1 0 3 2}
                compare_tcols_lists int [tarray::column vsort -indirect $tcol -nocase indices] $expected $indices $expected
            } -result 0
        }

        test column_vsort-$type-indirect-1.1 {
            Sort -indirect -decreasing $type
        } -body {
            set tcol [tarray::column create $type {A a B b}]
            set indices [tarray::column sort -indices -decreasing $tcol]
            set expected {3 2 1 0}
            compare_tcols_lists int [tarray::column vsort -indirect $tcol -nocase -decreasing indices] $expected $indices $expected
        } -result 0

        test column_vsort-$type-indirect-2.0 {
            Sort -indirect missing argument
        } -body {
            set tcol [tarray::column create $type {a A b B}]
            set indices [tarray::column sort -indices $tcol]
            tarray::column vsort -nocase -indirect indices
        } -result "Missing argument to -indirect option." -returnCodes error

        test column_vsort-$type-indirect-2.2 {
            Sort -indirect any bad index
        } -body {
            set tcol [tarray::column create $type {a A b B}]
            set indices [tarray::column create int {0 1 2 4 3}]
            tarray::column vsort -indirect $tcol -nocase indices
        } -result {tarray index 4 out of bounds.} -returnCodes error

        test column_vsort-$type-indirect-2.3 {
            Sort -indirect any negative index
        } -body {
            set tcol [tarray::column create $type {a A b B}]
            set indices [tarray::column create int {0 -1 2 3}]
            tarray::column vsort -indirect $tcol -nocase indices
        } -result {tarray index -1 out of bounds.} -returnCodes error
    }

    #
    # Tests for multithreaded sorts
    if {![catch {tarray::unsupported::config sort_mt_threshold}]} {
        tarray::unsupported::config sort_mt_enable_any 1
        foreach type {any string boolean byte double int uint wide} {
            test column_vsort-$type-2.0 {
                Sort column
            } -setup {
                set old_thresh [tarray::unsupported::config sort_mt_threshold]
                tarray::unsupported::config sort_mt_threshold 50
            } -cleanup {
                tarray::unsupported::config sort_mt_threshold $old_thresh
            } -body {
                vsort_verify $type
            } -result 0

            test column_vsort-$type-3.0 {
                Sort column -increasing
            } -setup {
                set old_thresh [tarray::unsupported::config sort_mt_threshold]
                tarray::unsupported::config sort_mt_threshold 50
            } -cleanup {
                tarray::unsupported::config sort_mt_threshold $old_thresh
            } -body {
                vsort_verify $type -increasing
            } -result 0

            test column_vsort-$type-4.0 {
                Sort column -decreasing
            } -setup {
                set old_thresh [tarray::unsupported::config sort_mt_threshold]
                tarray::unsupported::config sort_mt_threshold 50
            } -cleanup {
                tarray::unsupported::config sort_mt_threshold $old_thresh
            } -body {
                vsort_verify $type -decreasing
            } -result 0

            test column_vsort-$type-5.0 {
                Sort presorted column -increasing -increasing
            } -setup {
                set old_thresh [tarray::unsupported::config sort_mt_threshold]
                tarray::unsupported::config sort_mt_threshold 50
            } -cleanup {
                tarray::unsupported::config sort_mt_threshold $old_thresh
            } -body {
                vsort_verify_presorted $type -increasing -increasing
            } -result 0

            test column_vsort-$type-5.1 {
                Sort presorted column -increasing -decreasing
            } -setup {
                set old_thresh [tarray::unsupported::config sort_mt_threshold]
                tarray::unsupported::config sort_mt_threshold 50
            } -cleanup {
                tarray::unsupported::config sort_mt_threshold $old_thresh
            } -body {
                vsort_verify_presorted $type -increasing -decreasing
            } -result 0

            test column_vsort-$type-5.2 {
                Sort presorted column -decreasing -decreasing
            } -setup {
                set old_thresh [tarray::unsupported::config sort_mt_threshold]
                tarray::unsupported::config sort_mt_threshold 50
            } -cleanup {
                tarray::unsupported::config sort_mt_threshold $old_thresh
            } -body {
                vsort_verify_presorted $type -decreasing -decreasing
            } -result 0

            test column_vsort-$type-5.3 {
                Sort presorted column -decreasing -increasing 
            } -setup {
                set old_thresh [tarray::unsupported::config sort_mt_threshold]
                tarray::unsupported::config sort_mt_threshold 50
            } -cleanup {
                tarray::unsupported::config sort_mt_threshold $old_thresh
            } -body {
                vsort_verify_presorted $type -decreasing -increasing
            } -result 0
        }

        # TBD - need to test sort -nocase for multithreaded sorts
        # TBD - need to test sort -indirect for multithreaded sorts
    }

}

::tcltest::cleanupTests
