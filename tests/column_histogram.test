# column histogram tests

source testutil.tcl

namespace eval tarray::test {
    
    proc verify_histogram {srccol result args} {
        # Result table must have exactly two columns
        set cnames [tarray::table cnames $result]
        if {[llength $cnames] != 2} {
            return "Result table has [llength $cnames] column instead of expected 2."
        }
        lassign [tarray::table columns $result] catcol datacol
        set ncat [tarray::column size $catcol]

        array set opts [tarray::parseargs args {
            {cnames.arg {LowerBound Data}}
            {collect.radio count {count sum indices values}}
            min.arg
            max.arg
        }]

        if {[lindex $cnames 0] != [lindex $opts(cnames) 0] ||
            [lindex $cnames 0] != [lindex $opts(cnames) 0]} {
            return "Column names $cnames do not match expected names $opts(cnames)."
        }

        set cattype [tarray::column type $srccol]

        if {$cattype != [tarray::column type $catcol]} {
            return "Category column differs in type. Expected $cattype, got [tarray::column type $catcol]."
        }

        # Check that catcol has no duplicates
        set categories [tarray::column values $srccol]
        if {[llength $categories] != [llength [lsort $categories]]} {
            return "Values in category column are not unique."
        }
        
        # Now verify each data column
        switch -exact -- $opts(collect) {
            count {
                if {[tarray::column::type $datacol] ne "int"} {
                    return "Data column (count) is not of type 'int'."
                }
                set counts [tarray::column zeroes $ncat]
                # Note catlist will be sorted already!
                set catlist [tarray::column values $catcol]
                tarray::column loop val $srccol {
                    if {[info exists opts(min)] && $val < $opts(min)} {
                        continue
                    }
                    if {[info exists opts(max)] && $val > $opts(max)} continue
                    set pos [lsearch -bisect [expr {$cattype eq "double" ? "-real" : "-integer"}] $catlist $val]
                    if {$pos < 0} {
                        return "Value $val smaller than first lower bound [lindex $catlist 0]."
                    }
                    tarray::column vfill counts [expr {1+[tarray::column index $counts $pos]}] $pos 
                }
                if {![tarray::column identical $counts $datacol]} {
                    return "Counts:\n$counts\ndiffer from result:\n$datacol."
                }
                return ""
            }
            sum {
                if {[tarray::column type $srccol] eq "double"} {
                    if {[tarray::column::type $datacol] ne "double"} {
                        return "Data column (sum) is not of type 'double'."
                    }
                    set sums [tarray::column zeroes $ncat double]
                } else {
                    if {[tarray::column::type $datacol] ne "wide"} {
                        return "Data column (sum) is not of type 'wide'."
                    }
                    set sums [tarray::column zeroes $ncat wide]
                }
                # Note catlist will be sorted already!
                set catlist [tarray::column values $catcol]
                tarray::column loop val $srccol {
                    if {[info exists opts(min)] && $val < $opts(min)} continue
                    if {[info exists opts(max)] && $val > $opts(max)} continue
                    set pos [lsearch -bisect [expr {$cattype eq "double" ? "-real" : "-integer"}] $catlist $val]
                    if {$pos < 0} {
                        return "Value $val smaller than first lower bound [lindex $catlist 0]"
                    }
                    tarray::column vfill sums [expr {$val+[tarray::column index $sums $pos]}] $pos 
                }
                if {![tarray::column identical $sums $datacol]} {
                    return "Counts:\n$counts\ndiffer from result:\n$datacol."
                }
                return ""
            }
            indices { set valtype int }
            values { set valtype $cattype }
        }
        
        # Only -indices and -values handled from this point
        if {[tarray::column::type $datacol] ne "any"} {
            return "Data column ($opts(collect)) is not of type 'any'."
        }

        # Verify each nested column for -values and -indices
        tarray::column loop i col $datacol {
            if {[tarray::column type $col] ne $valtype} {
                return "Nested value column type [tarray::column type $datacol] is not the expected type $valtype."
            }
            tarray::column loop j val [tarray::column values $col] {
                if {$opts(collect) eq "indices"} {
                    set val [tarray::column index $srccol $val]
                }
                if {([info exists opts(min)] && $val < $opts(min)) ||
                    ([info exists opts(max)] && $val > $opts(max))} {
                    continue
                }

                set lower_bound [tarray::column index $catcol $i]
                if {$lower_bound > $val} {
                    return "Value $val is smaller than lower bound $lower_bound."
                }
                set upper_index [expr {$i + 1}]
                if {$upper_index < $ncat} {
                    set upper_bound [tarray::column index $catcol $upper_index]
                    if {$upper_bound < $val} {
                        return "Value $val is > than upper bound $upper_bound."
                    }
                }
            }
        }

        # Now ensure that every value in the source column is accounted for.

        # Collect values present in result
        array set result_values {}
        tarray::column loop i col $datacol {
            tarray::column loop j val $col {
                if {$opts(collect) eq "indices"} {
                    set val [tarray::column index $srccol $val]
                }
                set result_values($val) $val
            }
        }

        tarray::column loop srcval $srccol {
            if {([info exists opts(min)] && $srcval < $opts(min)) ||
                ([info exists opts(max)] && $srcval > $opts(max))} {
                continue
            }
            if {![info exists result_values($srcval)]} {
                return "Value $srcval not found in result."
            }
        }

        return ""
    }

    # Special cases
    foreach type {any string boolean byte double int uint wide} {
        # Must have positive interval count
        foreach compute {count sum indices values} {
            test column_histogram-$type-$compute-1.0 {
                Error (count==0) column histogram $compute ($type) 
            } -body {
                tarray::column histogram -$compute [samplecolumn $type] 0
            } -result "Number of buckets must be greater than zero." -returnCodes error
        }
        # Treatment of empty columns
        foreach compute {count sum indices values} {
            test column_histogram-$type-$compute-1.1 {
                Error empty column histogram $compute ($type) 
            } -body {
                tarray::column histogram -$compute [newcolumn $type] 1
            } -result "Cannot determine min-max values for an empty column." -returnCodes error
        }
        if {$type in {any string}} {
            test column_histogram-$type-$compute-1.2 {
                Empty column histogram $compute ($type) 
            } -body {
                tarray::column histogram -min 0 -max 1 -$compute [newcolumn $type] 2
            } -result "Operation is invalid for type $type." -returnCodes error
        } elseif {$type ne "boolean"} {
            test column_histogram-$type-$compute-1.2 {
                Empty column histogram $compute ($type) 
            } -body {
                tarray::column histogram -min 0 -max 1 -$compute [newcolumn $type] 2
            } -result [newtable2 {LowerBound Data} [newcolumn $type [list 0 [expr {$type eq "double" ? 0.5 : 1}]]] [newcolumn any [list [newcolumn $type] [newcolumn $type]]]]
        }
    }

    proc testdef {id comment type init count args} {
        test column_histogram-$type-$id "$comment, args: $args" -setup {
            set C [newcolumn $type $init]
        } -body {
            verify_histogram $C [tarray::column histogram {*}$args $C $count] {*}$args
        } -result ""
        test column_histogram-$type-span-$id $comment -setup {
            set C [newspancolumn $type $init]
        } -body {
            verify_histogram $C [tarray::column histogram {*}$args $C $count] {*}$args
        } -result ""
    }
    
    # Basic tests
    foreach type {byte int uint wide double} {
        
        foreach collect {{} -count -sum -indices -values} {
            testdef ${collect}-2.0 "Histogram - unit step" $type {0 1 2 3 4 5} 6 {*}$collect
            testdef ${collect}-2.1 "Histogram - single interval" $type {0 1 2 3 4 5} 1 {*}$collect
            testdef ${collect}-2.2.0 "Histogram - general" $type {100 249 120 170 190 195 201 200} 5 {*}$collect
            testdef ${collect}-2.2.1 "Histogram - general" $type [samplerange $type] 10 {*}$collect
            testdef ${collect}-2.2.2 "Histogram - random" $type [tarray::column values [tarray::column random $type 10000]] 10 {*}$collect
            if {$type ne "byte"} {
                testdef ${collect}-2.2.3 "Histogram - random" $type [tarray::column values [tarray::column series 100000]] 1000 {*}$collect
            }

            # -min tests
            testdef ${collect}-2.3.0 "Histogram - -min below minimum" $type {100 249 120 170 190 195 201 200} 5 {*}$collect -min 50
            testdef ${collect}-2.3.1 "Histogram - -min equal minimum" $type {100 249 120 170 190 195 201 200} 5 {*}$collect -min 100
            testdef ${collect}-2.3.2 "Histogram - -min above minimum" $type {100 249 120 170 190 195 201 200} 5 {*}$collect -min 120
            testdef ${collect}-2.3.3 "Histogram - -min equal maximum" $type {100 249 120 170 190 195 201 200} 5 {*}$collect -min 249
            if {$type eq "double"} {
                testdef ${collect}-2.3.3.1 "Histogram - -min equal maximum fractional" $type {.0100 .0249 .0120 .0170 .0190 .0195 .0201 .0200} 5 {*}$collect -min .0249
            }
            test column_histogram-$type-count-2.3.4 {
                Histogram - -min above maximum in column
            } -body {
                set C [newcolumn $type {100 249 120 170 190 195 201 200}]
                tarray::column histogram -min 250 $C 5
            } -result "Invalid bucket range 250-249(.0)?\." -match regexp -returnCodes error

            # -max tests
            test column_histogram-$type-count-2.4.0 {
                Equal intervals - -max below minimum
            } -body {
                set C [newcolumn $type {100 249 120 170 190 195 201 200}]
                tarray::column histogram -max 90 $C 5
            } -result "Invalid bucket range 100(.0)?-90\." -returnCodes error -match regexp
            testdef ${collect}-2.4.1 "Histogram - -max equal minimum" $type {100 249 120 170 190 195 201 200} 5 {*}$collect -max 100
            testdef ${collect}-2.4.2 "Histogram - -max above minimum" $type {100 249 120 170 190 195 201 200} 5 {*}$collect -max 120
            testdef ${collect}-2.4.3 "Histogram - -max equal maximum" $type {100 249 120 170 190 195 201 200} 5 {*}$collect -max 249
            testdef ${collect}-2.4.4 "Histogram - -max above maximum" $type {100 249 120 170 190 195 201 200} 5 {*}$collect -max 250
        }
    }

    if {0} {
        # Basic tests for double - separated because interval limits differ from integer cases
        testcount 2.0 "Histogram - unit step" double {0 1 2 3 4 5} 6 {.0 0.8333333333333334 1.6666666666666667 2.5 3.3333333333333335 4.166666666666667} {1 1 1 1 1 1}
        testcount 2.1 "Histogram - single interval" double {0 1 2 3 4 5} 1 {0} {6}
        testcount 2.2 "Histogram" double {0 .00001 .003 .0002 .5 .04} 6 {0.0 0.08333333333333333 0.16666666666666666 0.25 0.3333333333333333 0.41666666666666663} {5 0 0 0 0 1}
        testcount 2.3 "Histogram" double {0 .00001 .00002 .00003 .00004 .00005} 6 {0.0 8.333333333333334e-6 1.6666666666666667e-5 2.5e-5 3.3333333333333335e-5 4.166666666666667e-5} {1 1 1 1 1 1}
        testcount 2.4 "Histogram" double {-10e100 0 10e100} 10 {-1e+101 -8e+100 -6e+100 -3.999999999999999e+100 -1.9999999999999996e+100 0.0 2.0000000000000012e+100 3.999999999999999e+100 6.0000000000000005e+100 8.000000000000002e+100} {1 0 0 0 0 1 0 0 0 1}
        testcount 2.5 "Histogram - -min below minimum" double {0 .00001 .003 .0002 .5 .04} 5 {.0002 0.10016000000000001 0.20012000000000002 0.30008 0.40004} {3 0 0 0 1} -min .0002
        testcount 2.6 "Histogram - -min equal minimum" double {-.000004 .00001 .003 .0002 .5 .04} 5 {.0002 0.10016000000000001 0.20012000000000002 0.30008 0.40004} {3 0 0 0 1} -min -0.000004
        testcount 3.1 "Histogram - -min equal minimum" double {100 249 120 170 190 195 201 200} 5 {100 130 160 190 220} {2 0 1 4 1} -min 100
        testcount 3.2 "Histogram - -min above minimum" double {100 249 120 170 190 195 201 200} 5 {120 146 172 198 224} {1 1 2 2 1} -min 120
        testcount 3.3 "Histogram - -min equal maximum" double {100 249 120 170 190 195 201 200} 5 {249 250 251 252 253} {1 0 0 0 0} -min 249
    }    

    # Following caused memory overwrite at one point
    test column_histogram-crash-1.0 {
        Crash because of integer overflow resulting in negative bucket index
    } -setup {
        # Nothing specifically magic about these numbers other than
        # the integer overflow on difference. Just happens to be
        # the random values generated that triggered the crash
        set C [newcolumn int {-2098313040 923121517 2133372464}]
    } -body {
        tarray::column histogram $C 10
    } -result {tarray_table {LowerBound Data} {{tarray_column int {-2098313040 -1675144489 -1251975938 -828807387 -405638836 17529715 440698266 863866817 1287035368 1710203919}} {tarray_column int {1 0 0 0 0 0 0 1 0 1}}}}

    # Test limits of each type
    foreach {type limits} {
        byte {0 255}
        int {-2147483648 0 2147483647}
        uint {0 0xffffffff}
        wide {-9223372036854775807 9223372036854775807}
        wide {-9223372036854775808 9223372036854775806}
    } {
        foreach collect {{} -count -sum -indices -values} {
            testdef limits${collect}-1.0 "Histogram - limits" $type $limits 1 {*}$collect
            testdef limits${collect}-1.1 "Histogram - limits" $type $limits 2 {*}$collect
            testdef limits${collect}-1.2 "Histogram - limits" $type $limits 3 {*}$collect
        }
    }

    # Special case for full wide range
    set limits {-9223372036854775808 9223372036854775807}
    foreach collect {{} -count -sum -indices -values} {
        testdef column_histogram-wide-limits${collect}-1.3 "Histogram - limits full wide tange" $type $limits 2 {*}$collect
        # This case fails when full wide range and number of bins is 1

        test column_histogram-wide-limits-1.1 {
            Test limits of each type
        } -setup {
            set C [newcolumn wide $limits]
        } -body {
            # This fails because the step size does not fit in a column
            tarray::column histogram $C 1
        } -result "integer value too large to represent" -returnCodes error
    }


    
    # Basic test for boolean
    # Basic test (error) for string, any
}

::tcltest::cleanupTests
