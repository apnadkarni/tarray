# tarray column create

source [file join [file dirname [info script]] testutil.tcl]

namespace eval tarray::test {
    variable type
    variable type2
    variable num
    variable value
    variable values
    variable good
    variable bad

    namespace import ::tcltest::test

    proc format_number {val type} {
        if {$type eq "double"} {
            return [format %g $val]
        }
        return $val
    }

    # Tests for creating empty and large tarrays
    foreach type {any string boolean byte double int uint wide} {
        test column_create-$type-1.0 {
            Test creation of empty column
        } -body {
            tarray::column create $type
        } -result [crep $type {}]
        test column_create-$type-1.1 {
            Test creation of empty column with preallocation
        } -body {
            tarray::column create $type {} 1000
        } -result [crep $type {}]

        #
        # Tests for creating large columns
        set num -1
        test column_create-large-$type-1.[incr num] {
            Test creation of column with large initializer
        } -body {
            tarray::column create $type [largelist $type]
        } -result [crep $type [largelist $type]] -match column
    }

    #
    # Tests for creating various lengths with valid values in standard format
    foreach {type values} [array get good] {
        set num -1
        foreach value $values {
            test column_create-$type-2.[incr num] {
                Test creation of column with initializer
            } -body {
                tarray::column create $type $value
            } -result [crep $type $value] -match column
        }
    }

    #
    # Tests for creating from other columns
    proc column_cast_expected_value {srctype dsttype} {
        if {$srctype eq "boolean"} {return [lrepeat 1000 1 0 1]}
        if {$srctype eq "double" && $dsttype in {any string}} {
            return [lrepeat 1000 1.0 0.0 3.0]
        }
        return [lrepeat 1000 1 0 3]
    }
            
    foreach type {any string boolean byte double int uint wide} {
        foreach type2 {any string boolean byte double int uint wide} {
            test column_create-$type2-to-$type-1.0 {
                Test creation from column
            } -setup {
                set srccol [tarray::column create $type2 [lrepeat 1000 1 0 3]]
            } -body {
                tarray::column create $type $srccol
            } -result [newcolumn $type [column_cast_expected_value $type2 $type]]
        }
    }

    #
    # Tests to ensure string reps are correct when converting int<->uint
    test column_create-int-to-uint-2.0 {
        Test string rep on int->uint conversion
    } -setup {
        set col [tarray::column create int {0 2147483647 1}]
        llength $col ;# Force string generation
    } -body {
        tarray::column create uint $col[set col {}] ;# Change ref count to 1
    } -result [newcolumn uint {0 0x7fffffff 1}]
    
    test column_create-uint-to-int-2.0 {
        Test string rep on uint->int conversion
    } -setup {
        set col [tarray::column create uint {0 2147483647 1}]
        llength $col ;# Force string generation
    } -body {
        tarray::column create int $col[set col {}] ;# Change ref count to 1
    } -result [newcolumn int {0 0x7fffffff 1}]
    
    

            
    #
    # Tests for invalid types
    foreach {type values} [array get bad] {
        set num -1
        foreach value $values {
            test column_create-$type-invalid-1.[incr num] {
                Test invalid values raise error in tarray creation
            } -body {
                tarray::column create $type [list $value]
            } -result * -match glob -returnCodes error
            test column_create-$type-invalid-1.[incr num] {
                Test invalid values raise error in tarray creation
            } -body {
                tarray::column create $type [tarray::column create any [list $value]]
            } -result * -match glob -returnCodes error
            test column_create-$type-invalid-1.[incr num] {
                Test invalid values raise error in tarray creation
            } -body {
                tarray::column create $type [tarray::column create string [list $value]]
            } -result * -match glob -returnCodes error
        }
    }
    # Tests for invalid numeric range conversions
    foreach type {int uint wide double} {
        set num -1
        foreach value {-1 256} {
            if {$value < 0 && $type eq "uint"} continue
            test column_create-$type-to-byte-invalid-1.[incr num] {
                Test overflow from $type to byte
            } -setup {
                set C [newcolumn $type $value]
            } -body {
                tarray::column create byte $C
            } -result "Value [format_number $value $type] does not fit in a byte." -returnCodes error
        }
    }
    foreach type {uint wide double} {
        set num -1
        foreach value {-2147483649 2147483648} {
            if {$value < 0 && $type eq "uint"} continue
            test column_create-$type-to-int-invalid-1.[incr num] {
                Test overflow from $type to int
            } -setup {
                set C [newcolumn $type $value]
            } -body {
                tarray::column create int $C
            } -result "Value [format_number $value $type] does not fit in a int." -returnCodes error
        }
    }

    foreach type {int wide double} {
        set num -1
        foreach value {-1 4294967296} {
            if {$value > 2147483647 && $type eq "int"} continue
            test column_create-$type-to-uint-invalid-1.[incr num] {
                Test overflow from $type to uint
            } -setup {
                set C [newcolumn $type $value]
            } -body {
                tarray::column create uint $C
            } -result "Value [format_number $value $type] does not fit in a uint." -returnCodes error
        }
    }
    
    set num -1
    foreach value {-18446744073709551616 18446744073709551616} {
        test column_create-double-to-wide-invalid-1.[incr num] {
            Test overflow from double to wide
        } -setup {
            set C [newcolumn double $value]
        } -body {
            tarray::column create wide $C
        } -result "Value [format_number $value double] does not fit in a wide." -returnCodes error
    }
    
    # Test fractional doubles cannot be stored as integers
    foreach type {byte int uint wide} {
        test column_create-double-to-$type-fraction-1.0 {
            Test double conversion to fraction
        } -setup {
            set C [newcolumn double 1.1]
        } -body {
            tarray::column create $type $C
        } -result "Value 1.1 does not fit in a $type." -returnCodes error
    }

    # Special test for wide -> 0x8000000000000000 allowed but not
    # [expr 0x8000000000000000] (i.e. decimal format)
    # TBD - because not sure whether this should be allowed or not.
    # Currently Tcl8 extension allows, Tcl 9 does not
    test column_create-wide-overflow-1.0 {
        Verify 0x8000000000000000 accepted as wide
    } -body {
        tarray::column create wide 0x8000000000000000
    } -result "tarray_column wide {-9223372036854775808}" -constraints TBD

    test column_create-wide-overflow-1.1 {
        Verify 9223372036854775808 not accepted as wide
    } -body {
        tarray::column create wide 9223372036854775808
    } -result "Value 9223372036854775808 does not fit in a 64-bit integer.|integer value too large to represent" -returnCodes error -match regexp


    # bitmap0/1 tests

    test column_bitmap0-1.0 {
        Create empty bitmap
    } -body {
        tarray::column bitmap0
    } -result {tarray_column boolean {}}

    test column_bitmap0-1.1 {
        Create empty bitmap
    } -body {
        tarray::column bitmap0 0
    } -result {tarray_column boolean {}}

    test column_bitmap0-1.2 {
        Create bitmap size 1
    } -body {
        tarray::column bitmap0 1
    } -result {tarray_column boolean {0}}
    
    test column_bitmap0-1.3 {
        Create bitmap
    } -body {
        tarray::column bitmap0 9
    } -result {tarray_column boolean {0 0 0 0 0 0 0 0 0}}

    test column_bitmap0-1.4 {
        Create bitmap error
    } -body {
        tarray::column bitmap0 foo
    } -result {expected integer but got "foo"} -returnCodes error

    test column_bitmap0-2.0 {
        Create bitmap with init list
    } -body {
        tarray::column bitmap0 9 {0 8}
    } -result {tarray_column boolean {1 0 0 0 0 0 0 0 1}}

    test column_bitmap0-2.0.1 {
        Create bitmap with init list that grows column
    } -body {
        tarray::column bitmap0 8 {0 9 8}
    } -result {tarray_column boolean {1 0 0 0 0 0 0 0 1 1}}

    test column_bitmap0-2.0.2 {
        Create bitmap with init list with error on growing column
    } -body {
        tarray::column bitmap0 8 {0 9}
    } -result "tarray index 9 out of bounds." -returnCodes error
    
    test column_bitmap0-2.1 {
        Create bitmap with init index column
    } -body {
        tarray::column bitmap0 8 [tarray::column create int {3 4}]
    } -result {tarray_column boolean {0 0 0 1 1 0 0 0}}

    test column_bitmap0-2.1.1 {
        Create bitmap with init index column that grows column
    } -body {
        tarray::column bitmap0 8 [tarray::column create int {9 10 8}]
    } -result {tarray_column boolean {0 0 0 0 0 0 0 0 1 1 1}}

    test column_bitmap0-2.1.2 {
        Create bitmap with init index column error growing column
    } -body {
        tarray::column bitmap0 8 [tarray::column create int {10 8}]
    } -result "tarray index 10 out of bounds." -returnCodes error

    test column_bitmap0-2.2 {
        Create bitmap with init boolean column
    } -body {
        tarray::column bitmap0 5 [tarray::column bitmap0 4 {1 3}]
    } -result {tarray_column boolean {0 1 0 1 0}}

    test column_bitmap0-2.2.1 {
        Create bitmap with init boolean column that grows
    } -body {
        tarray::column bitmap0 5 [tarray::column bitmap0 32 {6 4 3}]
    } -result "tarray index 6 out of bounds." -returnCodes error

    test column_bitmap0-2.2.2 {
        Create bitmap with init boolean column error growing
    } -body {
        tarray::column bitmap0 4 [tarray::column bitmap0 7 {6 4 3}]
    } -result "tarray index 6 out of bounds." -returnCodes error

    test column_bitmap1-1.0 {
        Create empty bitmap
    } -body {
        tarray::column bitmap1
    } -result {tarray_column boolean {}}

    test column_bitmap1-1.1 {
        Create empty bitmap
    } -body {
        tarray::column bitmap1 0
    } -result {tarray_column boolean {}}

    test column_bitmap1-1.2 {
        Create bitmap size 1
    } -body {
        tarray::column bitmap1 1
    } -result {tarray_column boolean {1}}
    
    test column_bitmap1-1.3 {
        Create bitmap
    } -body {
        tarray::column bitmap1 9
    } -result {tarray_column boolean {1 1 1 1 1 1 1 1 1}}

    test column_bitmap1-1.4 {
        Create bitmap error
    } -body {
        tarray::column bitmap1 foo
    } -result {expected integer but got "foo"} -returnCodes error

    test column_bitmap1-2.0 {
        Create bitmap with init list
    } -body {
        tarray::column bitmap1 9 {1 2 3 4 5 6 7}
    } -result {tarray_column boolean {1 0 0 0 0 0 0 0 1}}

    test column_bitmap1-2.0.1 {
        Create bitmap with init list that grows column
    } -body {
        tarray::column bitmap1 8 {0 9 8}
    } -result {tarray_column boolean {0 1 1 1 1 1 1 1 0 0}}

    test column_bitmap1-2.0.2 {
        Create bitmap with init list with error on growing column
    } -body {
        tarray::column bitmap1 8 {0 9}
    } -result "tarray index 9 out of bounds." -returnCodes error
    
    test column_bitmap1-2.1 {
        Create bitmap with init index column
    } -body {
        tarray::column bitmap1 8 [tarray::column create int {3 4}]
    } -result {tarray_column boolean {1 1 1 0 0 1 1 1}}

    test column_bitmap1-2.1.1 {
        Create bitmap with init index column that grows column
    } -body {
        tarray::column bitmap1 8 [tarray::column create int {9 10 8}]
    } -result {tarray_column boolean {1 1 1 1 1 1 1 1 0 0 0}}

    test column_bitmap1-2.1.2 {
        Create bitmap with init index column error growing column
    } -body {
        tarray::column bitmap1 8 [tarray::column create int {10 8}]
    } -result "tarray index 10 out of bounds." -returnCodes error

    test column_bitmap1-2.2 {
        Create bitmap with init boolean column
    } -body {
        tarray::column bitmap1 5 [tarray::column bitmap0 4 {1 3}]
    } -result {tarray_column boolean {1 0 1 0 1}}

    test column_bitmap1-2.2.1 {
        Create bitmap with init boolean column that grows
    } -body {
        tarray::column bitmap1 5 [tarray::column bitmap0 32 {6 4 3}]
    } -result "tarray index 6 out of bounds." -returnCodes error

    test column_bitmap1-2.2.2 {
        Create bitmap with init boolean column error growing
    } -body {
        tarray::column bitmap1 4 [tarray::column bitmap0 7 {6 4 3}]
    } -result "tarray index 6 out of bounds." -returnCodes error

    ###

    test column_zeroes-$type-1.0 {
        Create an empty column of zeroes of default type
    } -body {
        tarray::column zeroes 0
    } -result [tarray::column create int]

    test column_zeroes-$type-1.1 {
        Create an column of zeroes of default type
    } -body {
        tarray::column zeroes 3
    } -result [tarray::column create int {0 0 0}]

    foreach type {any boolean byte double int uint wide} {
        test column_zeroes-$type-1.0 {
            Create an empty column of zeroes
        } -body {
            tarray::column zeroes 0 $type
        } -result [tarray::column create $type]

        test column_zeroes-$type-1.1 {
            Create an column of zeroes
        } -body {
            tarray::column zeroes 3 $type
        } -result [tarray::column create $type {0 0 0}]
    }

    ###

    test column_ones-$type-1.0 {
        Create an empty column of ones of default type
    } -body {
        tarray::column ones 0
    } -result [tarray::column create int]

    test column_ones-$type-1.1 {
        Create an column of ones of default type
    } -body {
        tarray::column ones 3
    } -result [tarray::column create int {1 1 1}]

    foreach type {any boolean byte double int uint wide} {
        test column_ones-$type-1.0 {
            Create an empty column of ones
        } -body {
            tarray::column ones 0 $type
        } -result [tarray::column create $type]

        test column_ones-$type-1.1 {
            Create an column of ones
        } -body {
            tarray::column ones 3 $type
        } -result [tarray::column create $type {1 1 1}]
    }

}
::tcltest::cleanupTests
