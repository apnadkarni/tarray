# tarray column create

source testutil.tcl

namespace eval tarray::test {
    namespace import ::tcltest::test

    # Tests for creating empty and large tarrays
    foreach type {any string boolean byte double int uint wide} {
        test column-create-$type-1.0 {
            Test creation of empty column
        } -body {
            tarray::column create $type
        } -result [crep $type {}]
        test column-create-$type-1.1 {
            Test creation of empty column with preallocation
        } -body {
            tarray::column create $type {} 1000
        } -result [crep $type {}]

        #
        # Tests for creating large columns
        set num -1
        test column-create-large-$type-1.[incr num] {
            Test creation of column with large initializer
        } -body {
            tarray::column create $type [largelist $type]
        } -result [crep $type [largelist $type]] -match column
    }

    #
    # Tests for creating various lengths with valid values in standard format
    foreach {type values} [array get good] {
        set num -1
        foreach value $values {
            test column-create-$type-2.[incr num] {
                Test creation of column with initializer
            } -body {
                tarray::column create $type $value
            } -result [crep $type $value] -match column
        }
    }

    #
    # Tests for creating from other columns
    proc column_cast_expected_value {srctype dsttype} {
        if {$srctype eq "boolean"} {return {1 0 1}}
        if {$srctype eq "double" && $dsttype in {any string}} {
            return {1.0 0.0 3.0}
        }
        return {1 0 3}
    }
            
    foreach type {any string boolean byte double int uint wide} {
        foreach type2 {any string boolean byte double int uint wide} {
            test column-create-$type2-to-$type-1.0 {
                Test creation from column
            } -setup {
                set srccol [tarray::column create $type2 {1 0 3}]
            } -body {
                tarray::column create $type $srccol
            } -result [newcolumn $type [column_cast_expected_value $type2 $type]]
        }
    }

    #
    # Tests to ensure string reps are correct when converting int<->uint
    test column-create-int-to-uint-2.0 {
        Test string rep on int->uint conversion
    } -setup {
        set col [tarray::column create int {0 -1 1}]
        llength $col ;# Force string generation
    } -body {
        tarray::column create uint $col[set col {}] ;# Change ref count to 1
    } -result [newcolumn uint {0 4294967295 1}]
    
    test column-create-uint-to-int-2.0 {
        Test string rep on uint->int conversion
    } -setup {
        set col [tarray::column create uint {0 4294967295 1}]
        llength $col ;# Force string generation
    } -body {
        tarray::column create int $col[set col {}] ;# Change ref count to 1
    } -result [newcolumn int {0 -1 1}]
    
    

            
    #
    # Tests for invalid types
    # NOTE: tests for wide are expected to fail because Tcl_GetWideIntFromObj
    # does not fail on wideint overflow (3.3 and 3.4)
    foreach {type values} [array get bad] {
        set num -1
        foreach value $values {
            test column-create-$type-3.[incr num] {
                Test invalid values raise error in tarray creation
            } -body {
                tarray::column create $type [list $value]
            } -result * -match glob -returnCodes error
        }
    }

}
::tcltest::cleanupTests
