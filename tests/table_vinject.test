# column vinject tests

source testutil.tcl

namespace eval tarray::test {


    test table_vinject-list-1.0 {
        Vinject single element list at start of empty table
    } -body { 
        set types {string boolean uint}
        vtab_change_and_verify $types {} [samplerows $types 0 0] vinject [samplerows $types 0 0] 0
    } -result 0

    test table_vinject-list-1.1 {
        Vinject single element list at end of empty table
    } -body { 
        set types {boolean string int wide}
        vtab_change_and_verify $types {} [samplerows $types 0 0] vinject [samplerows $types 0 0] end
    } -result 0

    test table_vinject-list-1.2 {
        Vinject list at start of empty column
    } -body {
        set types {boolean any int wide}
        vtab_change_and_verify $types {} [samplerows $types 0 1] vinject [samplerows $types 0 1] 0
    } -result 0

    test table_vinject-list-2.0 {
        Vinject multiple element at start of table
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 10] [samplerows $types 11 15 0 10] vinject [samplerows $types 11 15] 0
    } -result 0

    test table_vinject-list-2.1 {
        Vinject multiple element at start of table
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 10] [samplerows $types 11 15 0 10] vinject [samplerows $types 11 15] 0
    } -result 0

    test table_vinject-list-2.2 {
        Vinject multiple element at end of table
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 100 11 15] vinject [samplerows $types 11 15] end
    } -result 0

    test table_vinject-list-2.3 {
        Vinject multiple element at penultimate position
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 99 11 15 100 100] vinject [samplerows $types 11 15] 100
    } -result 0

    test table_vinject-list-2.4 {
        Vinject multiple elements in middle
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 50 11 15 51 100] vinject [samplerows $types 11 15] 51
    } -result 0

    test table_vinject-list-2.5 {
        Vinject elements in middle of column
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 9 0 9 10 100] vinject [samplerows $types 0 9] 10
    } -result 0

    test table_vinject-list-2.6 {
        Vinject multiple elements in middle extending column
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 94 10 19 95 100] vinject [samplerows $types 10 19] 95
    } -result 0

    test table_vinject-list-2.7 {
        Vinject multiple elements in middle extending column
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 94 0 100 95 100] vinject [samplerows $types 0 100] 95
    } -result 0

    test table_vinject-list-2.8 {
        Vinject elements after last element
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 100 0 100] vinject [samplerows $types 0 100] 101
    } -result 0

    test table_vinject-list-3.0 {
        Vinject zero elements
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types] [samplerows $types] vinject {} 100
    } -result 0

    test table_vinject-list-3.1 {
        Vinject elements at negative index
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types] [samplerows $types] vinject [samplerows $types 0 1] -1
    } -result "*index -1*out of bounds*" -match glob -returnCodes error

    test table_vinject-list-3.2 {
        Vinject elements at out of bounds index
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 100] vinject [samplerows $types 0 1] 102
    } -result "*index 102*out of bounds*" -match glob -returnCodes error


    test table_vinject-table-1.0 {
        Vinject single element table at start of empty table
    } -body { 
        set types {any boolean uint}
        vtab_change_and_verify $types {} [samplerows $types 0 0] vinject [sampletable $types 0 0] 0
    } -result 0

    test table_vinject-table-1.1 {
        Vinject single element table at end of empty table
    } -body { 
        set types {boolean string int wide}
        vtab_change_and_verify $types {} [samplerows $types 0 0] vinject [sampletable $types 0 0] end
    } -result 0

    test table_vinject-table-1.2 {
        Vinject table at start of empty column
    } -body {
        set types {boolean any int wide}
        vtab_change_and_verify $types {} [samplerows $types 0 1] vinject [sampletable $types 0 1] 0
    } -result 0

    test table_vinject-table-2.0 {
        Vinject multiple element at start of table
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 10] [samplerows $types 11 15 0 10] vinject [sampletable $types 11 15] 0
    } -result 0

    test table_vinject-table-2.1 {
        Vinject multiple element at start of table
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 10] [samplerows $types 11 15 0 10] vinject [sampletable $types 11 15] 0
    } -result 0

    test table_vinject-table-2.2 {
        Vinject multiple element at end of table
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 100 11 15] vinject [sampletable $types 11 15] end
    } -result 0

    test table_vinject-table-2.3 {
        Vinject multiple element at penultimate position
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 99 11 15 100 100] vinject [sampletable $types 11 15] 100
    } -result 0

    test table_vinject-table-2.4 {
        Vinject multiple elements in middle
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 50 11 15 51 100] vinject [sampletable $types 11 15] 51
    } -result 0

    test table_vinject-table-2.5 {
        Vinject elements in middle of column
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 9 0 9 10 100] vinject [sampletable $types 0 9] 10
    } -result 0

    test table_vinject-table-2.6 {
        Vinject multiple elements in middle extending column
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 94 10 19 95 100] vinject [sampletable $types 10 19] 95
    } -result 0

    test table_vinject-table-2.7 {
        Vinject multiple elements in middle extending column
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 94 0 100 95 100] vinject [sampletable $types 0 100] 95
    } -result 0

    test table_vinject-table-2.8 {
        Vinject elements after last element
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 100 0 100] vinject [sampletable $types 0 100] 101
    } -result 0

    test table_vinject-table-3.0 {
        Vinject zero elements
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types] [samplerows $types] vinject [newtable $types {}] 100
    } -result 0

    test table_vinject-table-3.1 {
        Vinject elements at negative index
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types] [samplerows $types] vinject [sampletable $types 0 1] -1
    } -result "*index -1*out of bounds*" -match glob -returnCodes error

    test table_vinject-table-3.2 {
        Vinject elements at out of bounds index
    } -body {
        set types {boolean any string int wide double byte uint}
        vtab_change_and_verify $types [samplerows $types 0 100] [samplerows $types 0 100] vinject [sampletable $types 0 1] 102
    } -result "*index 102*out of bounds*" -match glob -returnCodes error

    #
    # Verify string rep regeneration

    test table_vinject-stringrep-1.0 {
        Verify string representation is updated on unshared object - bug 18
    } -body {
        set ta {tarray_table {f0 f1 f2} {{tarray_column int {99}} {tarray_column int {99}} {tarray_column int {99}}}}
        tarray::table vinject ta {{0 1 2}} 1
        set ta
    } -result {tarray_table {f0 f1 f2} {{tarray_column int {99 0}} {tarray_column int {99 1}} {tarray_column int {99 2}}}}

    ################################################################
    # Verify -columns

    test table_vinject-columnsopt-1.0 {
        Verify insert all columns using names
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set newrow {1 ninetynine 99 99.0}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vinject -columns {col0 col1 col2 col3} tab [list $newrow] 0
        trequal $tab $def [linsert $init 0 $newrow]
    } -result 1

    test table_vinject-columnsopt-1.1 {
        Verify insert list, all columns using names out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vinject -columns {1 col0 3 col2} tab [list {ninetynine 1 99.0 99} {hundred 0 100.0 100}] 1
        trequal $tab $def [linsert $init 1 {1 ninetynine 99 99.0} {0 hundred 100 100.0}]
    } -result 1

    test table_vinject-columnsopt-1.2 {
        Verify growing table, all columns using names out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vinject -columns {1 col0 3 col2} tab [list {ninetynine 1 99.0 99} {hundred 0 100.0 100}] end
        trequal $tab $def [linsert $init end {1 ninetynine 99 99.0} {0 hundred 100 100.0}]
    } -result 1

    test table_vinject-columnsopt-1.3 {
        Verify insert into empty table
    } -setup {
        set def {col0 boolean col1 any col2 int col3 double}
        set newrow {1 ninetynine 99 99.0}
        set tab [tarray::table create $def {}]
    } -body {
        tarray::table vinject -columns {1 col0 3 col2} tab [lrepeat 2 {ninetynine 1 99.0 99}] end
        trequal $tab $def [lrepeat 2 {1 ninetynine 99 99.0}]
    } -result 1

    test table_vinject-columnsopt-2.0 {
        Verify insert subset columns
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vinject -columns {col1 2} tab [list {ninetynine 99}] 0
    } -result "All columns in a table must be specified in a column map when extending the table." -returnCodes error
    
    test table_vinject-columnsopt-2.1 {
        Verify inserting subset columns out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vinject -columns {2 col1} tab {{99 ninetynine} {100 hundred}} 1
    } -result "All columns in a table must be specified in a column map when extending the table." -returnCodes error

    test table_vinject-columnsopt-3.0 {
        Verify inserting non-existent column position
    } -body {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
        tarray::table vinject -columns {col0 col1 col2 col3 5} tab [list {0 0 0 0 0}] 0
    } -result "Column index '5' out of bounds." -returnCodes error

    test table_vinject-columnsopt-3.1 {
        Verify inserting non-existent column name
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vinject -columns {col0 col1 col2 col3 col5} tab [list {0 0 0 0 0}] 0
    } -result "No column with name 'col5'." -returnCodes error

    test table_vinject-columnsopt-3.2 {
        Verify inserting duplicate column names
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vinject -columns {col0 col1 col2 col1} tab [list {0 0 0 0}] 0
    } -result "Column index '1' specified multiple times in column list." -returnCodes error

    test table_vinject-columnsopt-3.3 {
        Verify filling duplicate column positions
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vinject -columns {col0 col1 col2 col3 col1} tab {{0 0 0 0 0}} 0
    } -result "Column index '1' specified multiple times in column list." -returnCodes error

    test table_vinject-columnsopt-3.4 {
        Verify filling duplicate column positions
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vinject -columns {col0 col1 col2 col3 col1} tab [list {0 0 0 0}] 0
    } -result "Column index '1' specified multiple times in column list." -returnCodes error

    test table_vinject-columnsopt-3.5 {
        Verify insufficient data width
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vinject -columns {col0 col1 col2 col3} tab {{0 0 0}} 0
    } -result "Row or table width 3 does not match destination width 4." -returnCodes error
    
    test table_vinject-columnsopt-3.6 {
        Verify empty column list
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vinject -columns {} tab [list {0 0 0 0}] 0
    } -result "A column map must have at least one column specified." -returnCodes error

    test table_vinject-columnsopt-3.8 {
        Verify inserting negative column position
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vinject -columns {0 1 2 -1} tab [list {0 0 0 0}] end
    } -result "Column index '-1' out of bounds." -returnCodes error


}

::tcltest::cleanupTests
