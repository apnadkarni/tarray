# column put tests

source testutil.tcl

namespace eval tarray::test {

    # args - position init
    proc puttest {type pass_as_list nvalues args} {
        variable sample

        if {[llength $args]} {
            set pos [lindex $args 0]
            set posargs [list $pos]
            
            if {[llength $args] > 1} {
                set init [lindex $args 1]
            } else {
                set init [samplerange $type]
            }
        } else {
            set pos end
            set posargs [list ]
            set init [samplerange $type]
        }

        if {$pos eq "end"} {
            set lpos [llength $init]; # NOT same as "end" index for lrange
        } else {
            set lpos $pos
        }

        set changes [lrange $sample($type) end-[expr {$nvalues-1}] end]
        if {$lpos == [llength $init]} {
            set expected [concat $init $changes]
        } else {
            set expected [lreplace $init $lpos [expr {$lpos+[llength $changes]-1}] {*}$changes]
        }
        if {$pass_as_list} {
            return [col_change_and_verify $type $init $expected put $changes {*}$posargs]
        } else {
            return [col_change_and_verify $type $init $expected put [tarray::column create $type $changes] {*}$posargs]
        }
    }

    # Unshared object version of above
    # args - position init
    proc puttest_u {type pass_as_list nvalues args} {
        variable sample

        if {[llength $args]} {
            set pos [lindex $args 0]
            set posargs [list $pos]
            
            if {[llength $args] > 1} {
                set init [lindex $args 1]
            } else {
                set init [samplerange $type]
            }
        } else {
            set pos end
            set posargs [list ]
            set init [samplerange $type]
        }

        if {$pos eq "end"} {
            set lpos [llength $init]; # NOT same as "end" index for lrange
        } else {
            set lpos $pos
        }

        set changes [lrange $sample($type) end-[expr {$nvalues-1}] end]
        if {$lpos == [llength $init]} {
            set expected [concat $init $changes]
        } else {
            set expected [lreplace $init $lpos [expr {$lpos+[llength $changes]-1}] {*}$changes]
        }
        if {$pass_as_list} {
            set result [tarray::column put [newcolumn $type $init] $changes {*}$posargs]
        } else {
            set result [tarray::column put [newcolumn $type $init] [tarray::column create $type $changes] {*}$posargs]
        }
        if {[clequal $result  $type $expected]} {
            return 0
        } else {
            return 1
        }
    }

    proc puttest_valuelist {type args} {
        return [puttest $type 1 {*}$args]
    }

    # Unshared object version of above
    proc puttest_valuelist_u {type args} {
        return [puttest_u $type 1 {*}$args]
    }

    proc puttest_valuecolumn {type args} {
        return [puttest $type 0 {*}$args]
    }

    # Unshared object version of above
    proc puttest_valuecolumn_u {type args} {
        return [puttest_u $type 0 {*}$args]
    }

    # Note two general types of tests - via a temp variable and directly
    # from the create return value. The difference is that in the
    # former case the value ref count is > 1, and the object needs to
    # be dup'ed while in the latter the ref count is 1 and the called
    # command can directly use it.
    # Also, when modifying a temp variable tests have to confirm that
    # the original is not modified


    foreach type {boolean string any byte double int uint wide} {
        
        #
        # column put valuelist pos

        test column_put-list-$type-1.0 {
            Put a single value into an empty column (shared)
        } -body {
            puttest_valuelist $type 1 0 {}
        } -result 0
        
        test column_put-list-$type-1.1 {
            Put a single value into an empty column (unshared tclobj, default position)
        } -body {
            tarray::column put [newcolumn $type {}] [samplerange $type 0 0] 
        } -result [crep $type [samplerange $type 0 0]] -match column

        test column_put-list-$type-2.0 {
            Test storing of leading elements (shared tclobj)
        } -body {
            puttest_valuelist $type 100 0
        } -result 0 

        test column_put-list-$type-2.1 {
            Test storing of leading elements (unshared tclobj)
        } -body {
            puttest_valuelist_u $type 128 0
        } -result 0 

        test column_put-list-$type-2.2 {
            Test storing of trailing elements (shared tclobj)
        } -body {
            puttest_valuelist $type 10 63 [samplerange $type 0 63]
        } -result 0 

        test column_put-list-$type-2.3 {
            Test storing of trailing elements (shared tclobj)
        } -body {
            puttest_valuelist $type 10 64 [samplerange $type 0 63]
        } -result 0 

        test column_put-list-$type-2.4 {
            Test storing of trailing elements (unshared tclobj, default end)
        } -body {
            puttest_valuelist_u $type 1
        } -result 0 

        test column_put-list-$type-2.5 {
            Test storing of trailing elements (unshared tclobj, specified end)
        } -body {
            puttest_valuelist_u $type 20 end
        } -result 0 

        test column_put-list-$type-2.6 {
            Test storing of middle elements (unshared tclobj)
        } -body {
            puttest_valuelist_u $type 10 127
        } -result 0 

        test column_put-list-$type-2.7 {
            Test storing of middle elements (shared tclobj, extend length)
        } -body {
            puttest_valuelist_u $type 500 400 [samplerange $type 0 450]
        } -result 0 

        test column_put-list-$type-2.8 {
            Test storing of elements using end
        } -body {
            tarray::column put [samplecolumn $type 0 9] [samplerange $type end-2 end] end-3
        } -result [crep $type [samplerange $type 0 6 end-2 end]] -match column

        test column_put-list-$type-3.0 {
            Test out of bound index
        } -body {
            tarray::column put [samplecolumn $type 0 10] [samplerange $type 0 2] 12

        } -result {*index 12 out of bounds*} -returnCodes error -match glob

        test column_put-list-$type-3.1 {
            Test negative index
        } -body {
            tarray::column put [samplecolumn $type 0 10] [samplerange $type 0 2] -1
        } -result {*index -1 out of bounds*} -returnCodes error -match glob

        if {$type ne "any" && $type ne "string"} {
            test column_put-list-$type-3.3 {
                Test invalid values
            } -body {
                tarray::column put [samplecolumn $type 0 10] [badvalues $type] 0
            } -result {*expected*but got*} -returnCodes error -match glob
        }

        
        #
        # column put valuecolumn pos

        test column_put-column-$type-1.0 {
            Put a single value into an empty column (shared)
        } -body {
            puttest_valuecolumn $type 1 0 {}
        } -result 0
        
        test column_put-column-$type-1.1 {
            Put a single value into an empty column (unshared tclobj, default position)
        } -body {
            tarray::column put [newcolumn $type {}] [samplecolumn $type 0 0] 
        } -result [crep $type [samplerange $type 0 0]] -match column

        test column_put-column-$type-2.0 {
            Test storing of leading elements (shared tclobj)
        } -body {
            puttest_valuecolumn $type 100 0
        } -result 0 

        test column_put-column-$type-2.1 {
            Test storing of leading elements (unshared tclobj)
        } -body {
            puttest_valuecolumn_u $type 128 0
        } -result 0 

        test column_put-column-$type-2.2 {
            Test storing of trailing elements (shared tclobj)
        } -body {
            puttest_valuecolumn $type 10 63 [samplerange $type 0 63]
        } -result 0 

        test column_put-column-$type-2.3 {
            Test storing of trailing elements (shared tclobj)
        } -body {
            puttest_valuecolumn $type 10 64 [samplerange $type 0 63]
        } -result 0 

        test column_put-column-$type-2.4 {
            Test storing of trailing elements (unshared tclobj, default end)
        } -body {
            puttest_valuecolumn_u $type 1
        } -result 0 

        test column_put-column-$type-2.5 {
            Test storing of trailing elements (unshared tclobj, specified end)
        } -body {
            puttest_valuecolumn_u $type 20 end
        } -result 0 

        test column_put-column-$type-2.6 {
            Test storing of middle elements (unshared tclobj)
        } -body {
            puttest_valuecolumn_u $type 10 127
        } -result 0 

        test column_put-column-$type-2.7 {
            Test storing of middle elements (shared tclobj, extend length)
        } -body {
            puttest_valuecolumn_u $type 500 400 [samplerange $type 0 450]
        } -result 0 

        test column_put-list-$type-2.8 {
            Test storing of elements using end
        } -body {
            tarray::column put [samplecolumn $type 0 9] [newcolumn $type [samplerange $type end-2 end]] end-3
        } -result [crep $type [samplerange $type 0 6 end-2 end]] -match column

        test column_put-column-$type-3.0 {
            Test out of bound index
        } -body {
            tarray::column put [samplecolumn $type 0 10] [samplecolumn $type 0 2] 12

        } -result {*index 12 out of bounds*} -returnCodes error -match glob

        test column_put-column-$type-3.1 {
            Test negative index
        } -body {
            tarray::column put [samplecolumn $type 0 10] [samplecolumn $type 0 2] -1
        } -result {*index -1 out of bounds*} -returnCodes error -match glob

        if {$type ne "any" && $type ne "string"} {
            test column_put-column-$type-3.3 {
                Test invalid values
            } -body {
                tarray::column put [samplecolumn $type 0 10] [newcolumn $type [badvalues $type]] 0
            } -result {*expected*but got*} -returnCodes error -match glob
        }


    }

    ::tcltest::cleanupTests
}
