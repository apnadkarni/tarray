# column insert tests

source [file join [file dirname [info script]] testutil.tcl]

namespace eval tarray::test {
    variable type

    # Note two general types of tests - via a temp variable and directly
    # from the create return value. The difference is that in the
    # former case the value ref count is > 1, and the object needs to
    # be dup'ed while in the latter the ref count is 1 and the called
    # command can directly use it.
    # Also, when modifying a temp variable tests have to confirm that
    # the original is not modified

    foreach type {boolean string any byte double int uint wide } {

        test column_insert-value-$type-1.0 {
            Insert one element at start of empty column (shared)
        } -body {
            col_change_and_verify $type {} [samplerange $type 0 0] insert [samplevalue $type] 0 1
        } -result 0

        test column_insert-value-$type-1.1 {
            Insert one element at end of empty column (unshared)
        } -body {
            tarray::column insert [newcolumn $type] [samplevalue $type] end 1
        } -result [crep $type [samplerange $type 0 0]] -match column

        test column_insert-value-$type-2.0 {
            Insert one element at start of column (shared)
        } -body {
            set values [samplerange $type 0 100]
            set val [samplevalue $type end]
            col_change_and_verify $type $values [linsert $values 0 $val] insert $val 0 1
        } -result 0

        test column_insert-value-$type-2.1 {
            Insert multiple element at start of column (unshared)
        } -body {
            tarray::column insert [newcolumn $type [largelist $type]] [lindex [largelist $type] end] 0 10
        } -result [crep $type [linsert [largerange $type] 0 {*}[listrepeat 10 [lindex [largelist $type] end]]]] -match column

        test column_insert-value-$type-2.2 {
            Insert multiple element at start of column (unshared)
        } -body {
            tarray::column insert [newcolumn $type [samplerange $type]] [samplevalue $type 0] end 10
        } -result [crep $type [linsert [samplerange $type] end {*}[listrepeat 10 [samplevalue $type 0]]]] -match column

        test column_insert-value-$type-2.3 {
            Insert elements at end of column (shared)
        } -body {
            set values [samplerange $type 0 100]
            set val [samplevalue $type 0]
            col_change_and_verify $type $values [linsert $values end {*}[listrepeat 27 $val]] insert $val end 27
        } -result 0

        test column_insert-value-$type-2.4 {
            Insert multiple element in middle (unshared)
        } -body {
            tarray::column insert [newcolumn $type [samplerange $type]] [samplevalue $type 0] 64 7
        } -result [crep $type [linsert [samplerange $type] 64 {*}[listrepeat 7 [samplevalue $type 0]]]] -match column

        test column_insert-value-$type-2.5 {
            Insert elements in middle of column (shared)
        } -body {
            set values [samplerange $type]
            set val [samplevalue $type end]
            col_change_and_verify $type $values [linsert $values 63 {*}[listrepeat  8 $val]] insert $val 63 8
        } -result 0

        test column_insert-value-$type-2.6 {
            Insert multiple element in middle extending column (unshared)
        } -body {
            tarray::column insert [newcolumn $type [samplerange $type 0 49]] [samplevalue $type end] 48 4
        } -result [crep $type [linsert [samplerange $type 0 49] 48 {*}[listrepeat 4 [samplevalue $type end]]]] -match column

        test column_insert-value-$type-2.7 {
            Insert elements in middle of column extending it (shared)
        } -body {
            set values [largerange $type 0 31]
            set val [lindex [largelist  $type] end]
            col_change_and_verify $type $values [linsert $values 30 {*}[listrepeat  8 $val]] insert $val 30 8
        } -result 0

        test column_insert-value-$type-2.8 {
            Insert elements after last element (shared)
        } -body {
            set values [samplerange $type 0 31]
            set val [samplevalue $type end]
            col_change_and_verify $type $values [linsert $values end {*}[listrepeat  8 $val]] insert $val 32 8
        } -result 0

        test column_insert-value-$type-2.9 {
            Insert multiple element in middle (unshared)
        } -body {
            tarray::column insert [newcolumn $type [samplerange $type]] [samplevalue $type 0] end-2 10
        } -result [crep $type [linsert [samplerange $type] end-2 {*}[listrepeat 10 [samplevalue $type 0]]]] -match column

        test column_insert-value-$type-3.0 {
            Insert zero elements (unshared)
        } -body {
            tarray::column insert [newcolumn $type [samplerange $type]] [samplevalue $type end] 10 0
        } -result [crep $type [samplerange $type]] -match column

        test column_insert-value-$type-3.1 {
            Insert negative number of elements (shared)
        } -body {
            set values [samplerange $type 0 31]
            set val [samplevalue $type end]
            col_change_and_verify $type $values $values insert $val 30 -1
        } -result "Invalid count -1*" -returnCodes error -match glob

        test column_insert-value-$type-3.2 {
            Insert elements at negative index (unshared)
        } -body {
            tarray::column insert [newcolumn $type [samplerange $type]] [samplevalue $type end] -1 1
        } -result "*index -1*out of bounds*" -match glob -returnCodes error

        test column_insert-value-$type-3.3 {
            Insert elements at out of bounds index (unshared)
        } -body {
            tarray::column insert [newcolumn $type [samplerange $type 0 10]] [samplevalue $type end] 12 1
        } -result "*index 12*out of bounds*" -match glob -returnCodes error

        test column_insert-value-$type-3.4 {
            Insert elements at out of bounds index (unshared)
        } -body {
            tarray::column insert [samplecolumn $type] [samplevalue $type end] end+1 1
        } -result "*index*out of bounds*" -match glob -returnCodes error
    }

    ################################################################ 
    # Same tests as above for span based columns
    
    foreach type {boolean string any byte double int uint wide } {

        test column_insert-span-value-$type-1.0 {
            Insert one element at start of empty column (shared)
        } -body {
            spancol_change_and_verify $type {} [samplerange $type 0 0] insert [samplevalue $type] 0 1
        } -result 0

        test column_insert-span-value-$type-1.1 {
            Insert one element at end of empty column (unshared)
        } -body {
            tarray::column insert [newspancolumn $type] [samplevalue $type] end 1
        } -result [crep $type [samplerange $type 0 0]] -match column

        test column_insert-span-value-$type-2.0 {
            Insert one element at start of column (shared)
        } -body {
            set values [samplerange $type 0 100]
            set val [samplevalue $type end]
            spancol_change_and_verify $type $values [linsert $values 0 $val] insert $val 0 1
        } -result 0

        test column_insert-span-value-$type-2.1 {
            Insert multiple element at start of column (unshared)
        } -body {
            tarray::column insert [newspancolumn $type [largelist $type]] [lindex [largelist $type] end] 0 10
        } -result [crep $type [linsert [largerange $type] 0 {*}[listrepeat 10 [lindex [largelist $type] end]]]] -match column

        test column_insert-span-value-$type-2.2 {
            Insert multiple element at start of column (unshared)
        } -body {
            tarray::column insert [newspancolumn $type [samplerange $type]] [samplevalue $type 0] end 10
        } -result [crep $type [linsert [samplerange $type] end {*}[listrepeat 10 [samplevalue $type 0]]]] -match column

        test column_insert-span-value-$type-2.3 {
            Insert elements at end of column (shared)
        } -body {
            set values [samplerange $type 0 100]
            set val [samplevalue $type 0]
            spancol_change_and_verify $type $values [linsert $values end {*}[listrepeat 27 $val]] insert $val end 27
        } -result 0

        test column_insert-span-value-$type-2.4 {
            Insert multiple element in middle (unshared)
        } -body {
            tarray::column insert [newspancolumn $type [samplerange $type]] [samplevalue $type 0] 64 7
        } -result [crep $type [linsert [samplerange $type] 64 {*}[listrepeat 7 [samplevalue $type 0]]]] -match column

        test column_insert-span-value-$type-2.5 {
            Insert elements in middle of column (shared)
        } -body {
            set values [samplerange $type]
            set val [samplevalue $type end]
            spancol_change_and_verify $type $values [linsert $values 63 {*}[listrepeat  8 $val]] insert $val 63 8
        } -result 0

        test column_insert-span-value-$type-2.6 {
            Insert multiple element in middle extending column (unshared)
        } -body {
            tarray::column insert [newspancolumn $type [samplerange $type 0 49]] [samplevalue $type end] 48 4
        } -result [crep $type [linsert [samplerange $type 0 49] 48 {*}[listrepeat 4 [samplevalue $type end]]]] -match column

        test column_insert-span-value-$type-2.7 {
            Insert elements in middle of column extending it (shared)
        } -body {
            set values [largerange $type 0 31]
            set val [lindex [largelist  $type] end]
            spancol_change_and_verify $type $values [linsert $values 30 {*}[listrepeat  8 $val]] insert $val 30 8
        } -result 0

        test column_insert-span-value-$type-2.8 {
            Insert elements after last element (shared)
        } -body {
            set values [samplerange $type 0 31]
            set val [samplevalue $type end]
            spancol_change_and_verify $type $values [linsert $values end {*}[listrepeat  8 $val]] insert $val 32 8
        } -result 0

        test column_insert-span-value-$type-2.9 {
            Insert multiple element in middle (unshared)
        } -body {
            tarray::column insert [newspancolumn $type [samplerange $type]] [samplevalue $type 0] end-2 10
        } -result [crep $type [linsert [samplerange $type] end-2 {*}[listrepeat 10 [samplevalue $type 0]]]] -match column

        test column_insert-span-value-$type-3.0 {
            Insert zero elements (unshared)
        } -body {
            tarray::column insert [newspancolumn $type [samplerange $type]] [samplevalue $type end] 10 0
        } -result [crep $type [samplerange $type]] -match column

        test column_insert-span-value-$type-3.1 {
            Insert negative number of elements (shared)
        } -body {
            set values [samplerange $type 0 31]
            set val [samplevalue $type end]
            spancol_change_and_verify $type $values $values insert $val 30 -1
        } -result "Invalid count -1*" -returnCodes error -match glob

        test column_insert-span-value-$type-3.2 {
            Insert elements at negative index (unshared)
        } -body {
            tarray::column insert [newspancolumn $type [samplerange $type]] [samplevalue $type end] -1 1
        } -result "*index -1*out of bounds*" -match glob -returnCodes error

        test column_insert-span-value-$type-3.3 {
            Insert elements at out of bounds index (unshared)
        } -body {
            tarray::column insert [newspancolumn $type [samplerange $type 0 10]] [samplevalue $type end] 12 1
        } -result "*index 12*out of bounds*" -match glob -returnCodes error

        test column_insert-span-value-$type-3.4 {
            Insert elements at out of bounds index (unshared)
        } -body {
            tarray::column insert [samplespancolumn $type] [samplevalue $type end] end+1 1
        } -result "*index*out of bounds*" -match glob -returnCodes error
    }
    ::tcltest::cleanupTests
}
