# column vdelete tests

source testutil.tcl

namespace eval tarray::test {

    #
    # column vdelete index

    foreach type {boolean string any byte double int uint wide} {

        test column_vdelete-index-$type-1.0 {
            Test deletion of first element 
        } -body {
            vchange_and_verify_col $type [largelist $type] vdelete 0 [lrange [largelist $type] 1 end]
        } -result 0

        test column_vdelete-index-$type-2.0 {
            Test deletion of last object
        } -body {
            vchange_and_verify_col $type $sample($type) vdelete [list [expr {[llength $sample($type)]-1}]] [lrange $sample($type) 0 end-1]
        } -result 0

        test column_vdelete-index-$type-3.0 {
            Test deletion of end element
        } -body {
            vchange_and_verify_col $type [largelist $type] vdelete [list end] [lrange [largelist $type] 0 end-1]
        } -result 0

        set n -1
        foreach i {1 7 8 9 31 32 33 63 64 65 254} {
            test column_vdelete-index-$type-4.[incr n] {
                Test deletion of intermediate element
            } -body {
                vchange_and_verify_col $type [largelist $type] vdelete [list $i] [concat [lrange [largelist $type] 0 $i-1] [lrange [largelist $type] $i+1 end]]
            } -result 0
        }

        test column_vdelete-index-$type-5.0 {
            Test deletion of out-of-range index
        } -body {
            set ta [samplecolumn $type]
            cequal $ta [tarray::column vdelete ta [expr {[llength $sample($type)] + 10}]]
        } -result 1

        test column_vdelete-index-$type-5.1 {
            Test deletion of out-of-range index (+1)
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete ta [llength $sample($type)]
            set ta
        } -result [crep $type $sample($type)] -match column

        test column_vdelete-index-$type-5.2 {
            Test deletion of negative index
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete  ta -1
            set ta
        } -result [crep $type $sample($type)] -match column

        test column_vdelete-index-$type-5.3 {
            Test deletion of invalid syntax index
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete ta nonintsyntax
        } -returnCodes error -match glob -result *

        test column_vdelete-index-$type-6.0 {
            Test deletion of element from single element column
        } -body {
            vchange_and_verify_col $type [list 100] vdelete [list 0] {}
        } -result 0

        test column_vdelete-index-$type-7.0 {
            Test attempt to vdelete element from empty column
        } -body {
            vchange_and_verify_col $type {} vdelete [list 0] {}
        } -result 0
    }

    #
    # column vdelete index list

    foreach type {boolean string any byte double int uint wide} {

        test column_vdelete-indexlist-$type-1.0 {
            Test deletion of leading elements
        } -body {
            vchange_and_verify_col $type [largelist $type] vdelete [list {0 1 2}] [lrange [largelist $type] 3 end]
        } -result 0 

        test column_vdelete-indexlist-$type-1.1 {
            Test deletion of leading elements (out of order)
        } -body {
            vchange_and_verify_col $type [largelist $type] vdelete [list {0 2 1 3}] [lrange [largelist $type] 4 end]
        } -result 0

        test column_vdelete-indexlist-$type-1.2 {
            Test deletion of leading elements (reverse order)
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete ta {2 1 0}
            set ta
        } -result [crep $type [lrange $sample($type) 3 end]] -match column

        test column_vdelete-indexlist-$type-2.0 {
            Test deletion of trailing elements
        } -body {
            set i [llength $sample($type)]
            incr i -2
            vchange_and_verify_col $type $sample($type) vdelete [list [list $i [incr i]]] [lrange $sample($type) 0 end-2]
        } -result 0

        test column_vdelete-indexlist-$type-2.1 {
            Test deletion of trailing elements (shared tclobj, out of order)
        } -body {
            set i [llength $sample($type)]
            set ta [samplecolumn $type]
            vchange_and_verify_col $type $sample($type) vdelete [list [list [incr i -1] [incr i -2] [incr i]]] [lrange $sample($type) 0 end-3]
        } -result 0

        test column_vdelete-indexlist-$type-2.3 {
            Test deletion of trailing elements (reverse order)
        } -body {
            set ta [samplecolumn $type]
            set i [llength $sample($type)]
            tarray::column vdelete ta [list [incr i -1] [incr i -1] [incr i -1]]
            set ta
        } -result [crep $type [lrange $sample($type) 0 end-3]] -match column

        test column_vdelete-indexlist-$type-3.0 {
            Test deletion of intermediate (ordered)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion from list must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            vchange_and_verify_col $type $sample($type) vdelete [list [lsort -increasing -integer $indices]] $l2
        } -result 0

        test column_vdelete-indexlist-$type-3.1 {
            Test deletion of intermediate (reverse ordered)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 [largelist $type]
            # Deletion from list must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            vchange_and_verify_col $type [largelist $type] vdelete [list [lsort -decreasing -integer $indices]] $l2
        } -result 0

        test column_vdelete-indexlist-$type-3.2 {
            Test deletion of intermediate (random order)
        } -body {
            # Note duplicate
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 $sample($type)
            # Deletion must take place back to front. -unique to remove dups
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set ta [samplecolumn $type]
            vchange_and_verify_col $type $sample($type) vdelete [list $indices] $l2
        } -result 0

        test column_vdelete-indexlist-$type-4.0 {
            Test deletion of out-of-range
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            set ta [samplecolumn $type]
            cequal [tarray::column vdelete ta [lsort -increasing -integer $indices]] [crep $type $l2]
        } -result 1

        test column_vdelete-indexlist-$type-4.1 {
            Test deletion of out-of-range (random indices)
        } -body {
            # Note duplicate 33
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 [largelist $type]
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength [largelist $type]]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            set ta [largecolumn $type]
            tarray::column vdelete ta $indices
            clequal $ta $type $l2
        } -result 1

        test column_vdelete-indexlist-$type-5.0 {
            Test deletion of invalid syntax indices
        } -body {
            set indices {1 notinteger 63}
            set ta [samplecolumn $type]
            tarray::column vdelete ta $indices
        } -returnCodes error -match glob -result *

        test column_vdelete-indexlist-$type-5.1 {
            Test deletion of end keyword
        } -body {
            # Note "end" is invalid in a index list
            set indices {1 end 63}
            set ta [samplecolumn $type]
            tarray::column vdelete ta $indices
        } -returnCodes error -match glob -result *

        test column_vdelete-indexlist-$type-6.0 {
            Test deletion of all indices from column
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set l [lrange $sample($type) 0 3]
            set ta [newcolumn $type $l]
            vchange_and_verify_col $type $l vdelete [list $indices] {}
        } -result 0

        test column_vdelete-indexlist-$type-6.1 {
            Test deletion of all indices from column (shared)
        } -body {
            set l [lrange $sample($type) 0 3]
            set ta [newcolumn $type $l]
            vchange_and_verify_col $type $l vdelete [list {0 1 2 3}] {}
        } -result 0

        test column_vdelete-indexlist-$type-6.2 {
            Test deletion of all indices from column (random order)
        } -body {
            set l [lrange $sample($type) 0 3]
            set ta [newcolumn $type $l]
            vchange_and_verify_col $type $l vdelete [list {1 0 3 2}] {}
        } -result 0

        test column_vdelete-indexlist-$type-7.0 {
            Test attempt to vdelete element from empty column (shared)
        } -body {
            set ta [newcolumn $type {}]
            vchange_and_verify_col $type {} vdelete [list {0 1 2}] {}
        } -result 0

        test column_vdelete-indexlist-$type-8.0 {
            vdelete duplicate indices
        } -body {
            set ta [samplecolumn $type]
            vchange_and_verify_col $type $sample($type) vdelete [list {0 0 1}] [lrange $sample($type) 2 end]
        } -result 0

        test column_vdelete-indexlist-$type-8.1 {
            vdelete duplicate indices
        } -body {
            set ta [samplecolumn $type]
            vchange_and_verify_col $type $sample($type) vdelete [list {4 4}] [concat [lrange $sample($type) 0 3] [lrange $sample($type) 5 end]]
        } -result 0

    }

    #
    # column vdelete indicesarray

    foreach type {boolean string any byte double int uint wide} {

        test column_vdelete-indices-$type-1.0 {
            Test deletion of leading elements
        } -body {
            vchange_and_verify_col $type $sample($type) vdelete [list [indexcolumn  0 1]] [lrange $sample($type) 2 end]
        } -result 0

        test column_vdelete-indices-$type-1.1 {
            Test deletion of leading elements (out of order)
        } -body {
            vchange_and_verify_col $type [largelist $type] vdelete [list [indexcolumn {0 2 1 3}]] [lrange [largelist $type] 4 end]
        } -result 0

        test column_vdelete-indices-$type-1.2 {
            Test deletion of leading elements (reverse order)
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete ta [indexcolumn {2 1 0}]
            set ta
        } -result [crep $type [lrange $sample($type) 3 end]] -match column

        test column_vdelete-indices-$type-2.0 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -2
            set ta [samplecolumn $type]
            vchange_and_verify_col $type $sample($type) vdelete [list [newcolumn int [list $i [incr i]]]] [lrange $sample($type) 0 end-2]
        } -result 0

        test column_vdelete-indices-$type-2.1 {
            Test deletion of trailing elements (unshared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -3
            set ta [samplecolumn $type]
            tarray::column vdelete ta [newcolumn int [list $i [incr i] [incr i]] ]
            set ta
        } -result [crep $type [lrange $sample($type) 0 end-3]] -match column

        test column_vdelete-indices-$type-2.2 {
            Test deletion of trailing elements (out of order)
        } -body {
            set i [llength $sample($type)]
            set ta [samplecolumn $type]
            vchange_and_verify_col $type $sample($type) vdelete [list [indexcolumn [incr i -1] [incr i -2] [incr i]]] [samplerange $type 0 end-3]
        } -result 0

        test column_vdelete-indices-$type-2.3 {
            Test deletion of trailing elements (unshared tclobj, reverse order)
        } -body {
            set i [llength $sample($type)]
            set ta [samplecolumn $type]
            tarray::column vdelete ta [indexcolumn [incr i -1] [incr i -1] [incr i -1]]
            set ta
        } -result [crep $type [samplerange $type 0 end-3]] -match column

        test column_vdelete-indices-$type-3.0 {
            Test deletion of intermediate (ordered)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 [largelist $type]
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            # Explicitly order indices
            set indices [tarray::column sort [indexcolumn $indices]]
            vchange_and_verify_col $type [largelist $type] vdelete [list $indices] $l2
        } -result 0

        test column_vdelete-indices-$type-3.1 {
            Test deletion of intermediate (reverse order)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set indices [tarray::column sort -decreasing [indexcolumn $indices]]
            set ta [samplecolumn $type]
            tarray::column vdelete ta $indices
            cequal $ta [crep $type $l2]
        } -result 1

        test column_vdelete-indices-$type-3.2 {
            Test deletion of intermediate (random order)
        } -body {
            # Note duplicate
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 [largelist $type]
            # Deletion must take place back to front. -unique to remove dups
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            vchange_and_verify_col $type [largelist $type] vdelete [list [indexcolumn $indices]] $l2
        } -result 0

        test column_vdelete-indices-$type-4.0 {
            Test deletion of out-of-range (increasing indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            set indices [tarray::column sort -increasing [indexcolumn $indices]]
            set ta [samplecolumn $type]
            tarray::column vdelete ta $indices
            cequal $ta [crep $type $l2]
        } -result 1

        test column_vdelete-indices-$type-4.1 {
            Test deletion of out-of-range (reverse indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            set ta [samplecolumn $type]
            set indices [tarray::column sort -decreasing [indexcolumn $indices]]
            tarray::column vdelete ta $indices
            cequal $ta [crep $type $l2]
        } -result 1

        test column_vdelete-indices-$type-4.2 {
            Test deletion of out-of-range (random indices)
        } -body {
            # Note duplicate 33
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            set ta [samplecolumn $type]
            cequal [tarray::column vdelete ta [indexcolumn $indices]] [crep $type $l2]
        } -result 1

        test column_vdelete-indices-$type-5.0 {
            Test deletion of invalid syntax indices
        } -body {
            set indices {1 notinteger 63}
            set ta [samplecolumn $type]
            tarray::column vdelete ta $indices
        } -returnCodes error -match glob -result *

        test column_vdelete-indices-$type-5.1 {
            Test deletion of end keyword
        } -body {
            # Note "end" is invalid in a index list
            set indices {1 end 63}
            set ta [samplecolumn $type]
            tarray::column vdelete ta [indexcolumn $indices]
        } -returnCodes error -match glob -result *

        test column_vdelete-indices-$type-6.0 {
            Test deletion of all indices from column
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set l [lrange $sample($type) 0 3]
            set ta [newcolumn $type $l]
            vchange_and_verify_col $type $l vdelete [list [indexcolumn $indices]] {}
        } -result 0

        test column_vdelete-indices-$type-6.1 {
            Test deletion of all indices from column
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set l [lrange $sample($type) 0 3]
            set ta [newcolumn $type $l]
            vchange_and_verify_col $type $l vdelete [list [lsort -integer -decreasing $indices]] {}
        } -result 0

        test column_vdelete-indices-$type-6.2 {
            Test deletion of all indices from column
        } -body {
            set l [lrange $sample($type) 0 3]
            vchange_and_verify_col $type $l vdelete [list [indexcolumn {0 1 2 3}]] {}
        } -result 0

        test column_vdelete-indices-$type-7.0 {
            Test attempt to vdelete element from empty column
        } -body {
            vchange_and_verify_col $type {} vdelete [list [indexcolumn {0 1 2}]] {}
        } -result 0

        test column_vdelete-indices-$type-8.0 {
            vdelete duplicate indices
        } -body {
            vchange_and_verify_col $type $sample($type) vdelete [list [indexcolumn {0 0 1}]] [lrange $sample($type) 2 end]
        } -result 0

    }


    #
    # column vdelete range

    foreach type {boolean string any byte double int uint wide} {

        test column_vdelete-range-$type-1.0 {
            Test deletion of leading elements
        } -body {
            vchange_and_verify_col $type $sample($type) vdelete {0 1} [lrange $sample($type) 2 end]
        } -result 0

        test column_vdelete-range-$type-2.0 {
            Test deletion of trailing elements
        } -body {
            set i [llength $sample($type)]
            incr i -1
            vchange_and_verify_col $type $sample($type) vdelete [list 127 $i] [lrange $sample($type) 0 126]
        } -result 0

        test column_vdelete-range-$type-2.1 {
            Test deletion of trailing elements
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete ta 129 end
            set ta
        } -result [crep $type [lrange $sample($type) 0 128]] -match column

        test column_vdelete-range-$type-3.0 {
            Test deletion of intermediate
        } -body {
            vchange_and_verify_col $type [largelist $type] vdelete [list 63 127] [concat [lrange [largelist $type] 0 62] [lrange [largelist $type] 128 end]]
        } -result 0

        test column_vdelete-range-$type-4.0 {
            Test deletion of out-of-range
        } -body {
            set i [llength $sample($type)]
            set ta [samplecolumn $type]
            tarray::column vdelete ta $i [incr i 10]
            set ta
        } -result [crep $type $sample($type)] -match column

        test column_vdelete-range-$type-4.1 {
            Test deletion of out-of-range
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete ta -4 2
            set ta
        } -result [crep $type [lrange $sample($type) 3 end]] -match column

        test column_vdelete-range-$type-4.2 {
            Test deletion of out-of-range
        } -body {
            set i [llength $sample($type)]
            set ta [samplecolumn $type]
            tarray::column vdelete ta 130 [incr i 100]
            set ta
        } -result [crep $type [lrange $sample($type) 0 129]] -match column

        test column_vdelete-range-$type-4.3 {
            Test deletion of out-of-range
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete ta -10 0
            set ta
        } -result [crep $type [lrange $sample($type) 1 end]] -match column

        test column_vdelete-range-$type-4.4 {
            Test deletion of reversed range limits
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete ta 60 40
            set ta
        } -result [crep $type $sample($type)] -match column

        test column_vdelete-range-$type-5.0 {
            Test deletion of invalid syntax start index
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete ta foo 10
            set ta
        } -returnCodes error -match glob -result *

        test column_vdelete-range-$type-5.1 {
            Test deletion of invalid syntax end index
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete ta 0 foo
        } -returnCodes error -match glob -result *

        test column_vdelete-range-$type-6.0 {
            Test deletion of all indices from column
        } -body {
            vchange_and_verify_col $type $sample($type) vdelete [list 0 end] {}
        } -result 0

        test column_vdelete-range-$type-6.1 {
            Test deletion of all indices from column (random order)
        } -body {
            set i [llength $sample($type)]
            set ta [samplecolumn $type 0 3]
            tarray::column vdelete ta 0 [incr i -1]
            set ta
        } -result [crep $type {}] -match column

        test column_vdelete-range-$type-7.0 {
            Test attempt to vdelete element from empty column
        } -body {
            vchange_and_verify_col $type {} vdelete [list 0 0] {}
        } -result 0

        test column_vdelete-range-$type-8.0 {
            vdelete single element range
        } -body {
            vchange_and_verify_col $type $sample($type) vdelete [list 0 0] [lrange $sample($type) 1 end]
        } -result 0

        test column_vdelete-range-$type-8.1 {
            vdelete single element range (unshared, trailing)
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete ta end end; # Verify return val, not ta
        } -result [crep $type [lrange $sample($type) 0 end-1]] -match column

        test column_vdelete-range-$type-8.1 {
            vdelete single element range (unshared, random)
        } -body {
            set ta [samplecolumn $type]
            tarray::column vdelete ta 32 32
            set ta;             # Verify ta, not return value
        } -result [crep $type [concat [lrange $sample($type) 0 31] [lrange $sample($type) 33 end]]] -match column
    }

    ::tcltest::cleanupTests
}
