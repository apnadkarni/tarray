# xtal list operation tests

source testutil.tcl

namespace eval tarray::test::xtal_list {
    namespace path ::tarray::test
    set L {zero one two {3 three}}
    set I {33 -11 22 44 22}
    proc fn {arg} {return $arg}

    ################################################################
    # List construction

    test xtal-list-1.0 {Construct list} -body {
        xtal::xtal { l = {} }
        set l
    } -result {}

    test xtal-list-1.1 {Construct list} -body {
        xtal::xtal {
            i = 11
            {i, 1.0, "a string, $i, [fn 99]", 'a string, $i, [fn 99]', fn(100)}
        }
    } -result {11 1.0 {a string, 11, 99} {a string, $i, [fn 99]} 100}
            
    test xtal-list-1.2 {Construct multiline list} -body {
        xtal::xtal {
            i = 11
            l = {i,
                1.0
                ,
                "a string, $i, [fn 99]"
                , 'a string, $i, [fn 99]',
                fn(100)
            }
        }
        set l
    } -result {11 1.0 {a string, 11, 99} {a string, $i, [fn 99]} 100}
    
    test xtal-list-2.0 {Construct list syntax error} -body {
        xtal::xtal { l = {10 11} }
    } -result "Parse error*" -match glob -returnCodes error
    
    test xtal-list-2.1 {Construct list syntax error} -body {
        xtal::xtal {
            l = {
                10
                11
            }
        }
    } -result "Parse error*" -match glob -returnCodes error
    
    ################################################################
    # List indexing
    test xtal-list-index-1.0 {Literal list scalar index} -body {
        xtal::xtal {
            {100, 200, 300, 400}[0]
        }
    } -result 100

    test xtal-list-index-1.1 {Literal list scalar index} -body {
        xtal::xtal {
            i = 2
            {100, 200, 300, 400}[i]
        }
    } -result 300

    test xtal-list-index-1.2 {Literal list scalar index} -body {
        xtal::xtal {
            {100, 200, 300, 400}[% @@ - 1]
        }
    } -result 400

    test xtal-list-index-2.0 {list variable scalar index} -body {
        xtal::xtal {L[0]}
    } -result zero

    test xtal-list-index-2.1 {list variable scalar index} -body {
        xtal::xtal {i = 1 ; L[i]}
    } -result one
    
    test xtal-list-index-2.2 {list variable scalar index} -body {
        xtal::xtal {L[%L-1]}
    } -result {3 three}

    test xtal-list-index-2.3 {list variable scalar index} -body {
        xtal::xtal {i = 2 ; L[%@@-i]}
    } -result two

    test xtal-list-index-3.0 {Literal list negative scalar index} -body {
        xtal::xtal {{100, 200, 300, 400}[- 1]}
    } -result "list index out of range" -returnCodes error
    
    test xtal-list-index-3.1 {Literal list out of bounds scalar index} -body {
        xtal::xtal {i = %L; L[i]}
    } -result "list index out of range" -returnCodes error
    
    test xtal-list-index-3.2 {Literal list non-integer scalar index} -body {
        xtal::xtal {i = "notanint"; L[i]}
    } -result "list index out of range" -returnCodes error

    test xtal-list-index-3.3 {Literal list non-integer scalar index} -body {
        xtal::xtal {i = 1.0; L[i]}
    } -result "bad index*" -match glob -returnCodes error

    test xtal-list-index-3.4 {Literal list empty index} -body {
        xtal::xtal {L[]}
    } -result "Parse error*" -match glob -returnCodes error

    #
    # Indexlists
    test xtal-list-indexlist-1.0 {Literal list indexlist} -body {
        xtal::xtal {
            {100, 200, 300, 400}[{0,2}]
        }
    } -result {100 300}

    test xtal-list-indexlist-1.1 {Literal list indexlist} -body {
        xtal::xtal {
            i = {3,0,1}
            {100, 200, 300, 400}[i]
        }
    } -result {400 100 200}
    
    test xtal-list-indexlist-1.2 {Literal list empty indexlist} -body {
        xtal::xtal {
            {100, 200, 300, 400}[{}]
        }
    } -result {}

    test xtal-list-indexlist-2.0 {list variable indexlist} -body {
        xtal::xtal {L[{0,3}]}
    } -result {zero {3 three}}

    test xtal-list-indexlist-2.1 {list variable indexlist} -body {
        xtal::xtal {i = {3,2,1,0} ; L[i]}
    } -result {{3 three} two one zero}
    
    test xtal-list-indexlist-2.2 {list variable indexlist} -body {
        xtal::xtal {i = {} ; L[i]}
    } -result {}

    test xtal-list-indexlist-2.3 {list variable indexlist} -body {
        xtal::xtal {
            I = {1,2,3,0}
            I[I]
        }
    } -result {2 3 0 1}

    test xtal-list-indexlist-3.0 {Literal list negative indexlist} -body {
        xtal::xtal {{100, 200, 300, 400}[{-1, 0}]}
    } -result "list index out of range" -returnCodes error
    
    test xtal-list-indexlist-3.1 {Literal list negative indexlist} -body {
        xtal::xtal {i = {0, %L}; L[i]}
    } -result "list index out of range" -returnCodes error
    
    #
    # Index columns
    test xtal-list-indexcolumn-1.0 {Literal list indexcolumn} -body {
        xtal::xtal {
            {100, 200, 300, 400}[@int {0,2}]
        }
    } -result {100 300}

    test xtal-list-indexcolumn-1.1 {Literal list indexcolumn} -body {
        xtal::xtal {
            i = @int {3,0,1}
            {100, 200, 300, 400}[i]
        }
    } -result {400 100 200}
    
    test xtal-list-indexcolumn-1.2 {Literal list empty indexcolumn} -body {
        xtal::xtal {
            {100, 200, 300, 400}[@int {}]
        }
    } -result {}

    test xtal-list-indexcolumn-2.0 {list variable indexcolumn} -body {
        xtal::xtal {L[@int {0,3}]}
    } -result {zero {3 three}}

    test xtal-list-indexcolumn-2.1 {list variable indexcolumn} -body {
        xtal::xtal {i = @int {3,2,1,0} ; L[i]}
    } -result {{3 three} two one zero}
    
    test xtal-list-indexcolumn-2.2 {list variable indexcolumn} -body {
        xtal::xtal {i = @int {} ; L[i]}
    } -result {}

    test xtal-list-indexcolumn-3.0 {list negative indexcolumn} -body {
        xtal::xtal {{100, 200, 300, 400}[@int {-1, 0}]}
    } -result "list index out of range" -returnCodes error
    
    test xtal-list-indexcolumn-3.1 {list negative indexcolumn} -body {
        xtal::xtal {i = @int {0, %L}; L[i]}
    } -result "list index out of range" -returnCodes error

    ################################################################
    # range tests

    test xtal-list-range-1.0 {list range} -body {
        xtal::xtal {L[0:0]}
    } -result zero

    test xtal-list-range-1.1 {list range} -body {
        xtal::xtal {L[ %L-1 : %@@-1 ]}
    } -result {{3 three}}

    test xtal-list-range-1.2 {list range} -body {
        xtal::xtal {L[0:%L-1]}
    } -result {zero one two {3 three}}
    
    test xtal-list-range-1.3 {list range} -body {
        xtal::xtal {{100, "two hundred" , 300.0}[0:%L]}
    } -result {100 {two hundred} 300.0}
    
    test xtal-list-range-1.4 {list empty range} -body {
        xtal::xtal {L[0:-1]}
    } -result {}

    test xtal-list-range-1.5 {list empty range} -body {
        xtal::xtal {L[3:1]}
    } -result {}
    
    test xtal-list-range-1.6 {list range empty upper} -body {
        xtal::xtal {L[0:]}
    } -result {zero one two {3 three}}
    
    test xtal-list-range-2.0 {list empty range} -body {
        xtal::xtal {L[:1]}
    } -result "Parse error*" -match glob -returnCodes error 

    test xtal-list-range-2.1 {list empty range} -body {
        xtal::xtal {L["zero":1]}
    } -result "bad index*" -match glob -returnCodes error 

    test xtal-list-range-2.2 {list empty range} -body {
        xtal::xtal {L[0:"one"]}
    } -result "bad index*" -match glob -returnCodes error 

    ################################################################
    # selector indexes tests
    test xtal-list-selector-1.0 {list selector ==} -body {
        xtal::xtal {I[I == 22]}
    } -result {22 22}
    
    test xtal-list-selector-1.1 {list selector ==} -body {
        xtal::xtal {I[I == 23]}
    } -result {}
    
    test xtal-list-selector-1.2 {list selector !=} -body {
        xtal::xtal {I[I != 22]}
    } -result {33 -11 44}
    
    test xtal-list-selector-1.3 {list selector !=} -body {
        xtal::xtal {I[I != 23]}
    } -result $I

    test xtal-list-selector-1.4 {list selector ==} -body {
        xtal::xtal {I[@@ == 22]}
    } -result {22 22}

    test xtal-list-selector-1.5 {list selector !=} -body {
        xtal::xtal {I[@@ != 22]}
    } -result {33 -11 44}

    test xtal-list-selector-2.0 {list selector ~} -body {
        xtal::xtal {L[L ~ ".o$"]}
    } -result {zero two}
    
    test xtal-list-selector-2.1 {list selector ~} -body {
        xtal::xtal {L[L ~ ".x$"]}
    } -result {}

    test xtal-list-selector-2.2 {list selector !~} -body {
        xtal::xtal {L[L !~ ".o$"]}
    } -result {one {3 three}}
    
    test xtal-list-selector-2.3 {list selector !~} -body {
        xtal::xtal {L[@@ !~ ".o$"]}
    } -result {one {3 three}}

    set testnum -1
    foreach op {> < >= <=} {
        test xtal-list-selector-err-1.[incr testnum] "list selector $op" -body {
            xtal::xtal "I\[@@ $op 30\]"
        } -result "The specified selector operator is invalid for lists." -returnCodes error
    }

    ################################################################
    # selector + range
    test xtal-list-selector-range-1.0 {list selector ==} -body {
        xtal::xtal {I[I == 22 && 3:]}
    } -result {22}
    
    test xtal-list-selector-range-1.1 {list selector ==} -body {
        xtal::xtal {I[0:1 && I == 22]}
    } -result {}
    
    test xtal-list-selector-range-1.2 {list selector !=} -body {
        xtal::xtal {I[I != 22 && 1:%I-1]}
    } -result {33 -11 44}
    
    test xtal-list-selector-range-1.3 {list selector !=} -body {
        xtal::xtal {I[I != 23 && 0:2]}
    } -result [lrange $I 0 2]

    test xtal-list-selector-range-1.4 {list selector ==} -body {
        xtal::xtal {I[@@ == 22 && 0:%I]}
    } -result {22 22}

    test xtal-list-selector-range-1.5 {list selector !=} -body {
        xtal::xtal {I[0:2 && @@ != 22]}
    } -result {33 -11}

    test xtal-list-selector-range-2.0 {list selector ~} -body {
        xtal::xtal {L[0:1 && @@ ~ ".o$"]}
    } -result {zero}
    
    test xtal-list-selector-range-2.1 {list selector ~} -body {
        xtal::xtal {L[0:%I && L ~ ".x$"]}
    } -result {}

    test xtal-list-selector-range-2.2 {list selector !~} -body {
        xtal::xtal {L[L !~ ".o$" && %L-1:%L]}
    } -result {{3 three}}
    
    set testnum -1
    foreach op {> < >= <=} {
        test xtal-list-selector-range-err-1.[incr testnum] "list selector $op" -body {
            xtal::xtal "I\[0:3  && @@ $op 30\]"
        } -result "The specified selector operator is invalid for lists." -returnCodes error
        test xtal-list-selector-range-err-1.[incr testnum] "list selector $op" -body {
            xtal::xtal "I\[@@ $op 30 && 0:2 \]"
        } -result "The specified selector operator is invalid for lists." -returnCodes error
    }

    # TBD - tests with || instead of &&
}

::tcltest::cleanupTests
