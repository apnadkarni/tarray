# xtal column operation tests

source testutil.tcl

namespace eval tarray::test::xtal_column {
    namespace path ::tarray::test
    proc fn {arg} {return $arg}
    set I {} ;# TBD - delete
    set LC {zero one two {3 three} string STRING}
    set L {33 11 22 44 22}

    ################################################################
    # Column construction

    foreach type {boolean byte int uint wide double string any} {
        test xtal-column-$type-1.0 {Construct column} -body "xtal::xtal {col = @$type} ; set col" -result [list tarray_column $type {}]
        test xtal-column-$type-1.1 {Construct column} -body "xtal::xtal {col = @$type {}} ; set col" -result [list tarray_column $type {}]
        test xtal-column-$type-1.2 {Construct column syntax error} -body "xtal::xtal {col = @$type {0 1}}" -result "Parse error*" -match glob -returnCodes error
    }

    foreach type {boolean byte int uint wide string any} {
        test xtal-column-$type-2.0 {Construct column} -body "xtal::xtal {col = @$type {0,fn(1)}} ; set col" -result [list tarray_column $type {0 1}]
        test xtal-column-$type-2.1 {
            Construct column multiline
        } -body [string map [list %TYPE% $type] {
            xtal::xtal {
                col = @%TYPE% {
                    0,
                    fn(1),
                    0
                }
            }
        }] -result [newcolumn $type {0 1 0}]
    }
    test xtal-column-double-2.0 {Construct column} -body "xtal::xtal {col = @double {0.0,fn(1),-1e-20}} ; set col" -result [list tarray_column double {0.0 1.0 -1e-20}]
    
    test xtal-column-string-3.0 {Construct column} -body {
        xtal::xtal {
            i = 11
            @string {i, 1.0, "a string, $i, [fn 99]", 'a string, $i, [fn 99]', fn(100)}
        }
    } -result [newcolumn string {11 1.0 {a string, 11, 99} {a string, $i, [fn 99]} 100}]
            
    test xtal-column-any-3.0 {Construct multiline column} -body {
        xtal::xtal {
            i = 11
            c = @any {i,
                1.0
                ,
                "a string, $i, [fn 99]"
                , 'a string, $i, [fn 99]',
                fn(100)
            }
        }
        set c
    } -result [newcolumn any {11 1.0 {a string, 11, 99} {a string, $i, [fn 99]} 100}]
    
    foreach type {boolean byte int uint wide double string any} {
        test xtal-column-create-range-$type-1.0 {
            Create column from range
        } -body "xtal::xtal {@$type 0:10:2}" -result [newcolumn $type {0 2 4 6 8}]
        if {$type ni {byte uint}} {
            test xtal-column-create-range-$type-1.1 {
                Create column from range - default step
            } -body "xtal::xtal {@$type -1:3}" -result [newcolumn $type {-1 0 1 2}]

            test xtal-column-create-range-$type-1.2 {
                Create column from range - negative step
            } -body "xtal::xtal {@$type 2:-2:-1}" -result [newcolumn $type {2 1 0 -1}]
        }
        if {$type in {string any}} {
            test xtal-column-create-range-$type-1.3 {
                Create column from range - cast
            } -body "xtal::xtal {@$type 1.0:5.0:1}" -result [newcolumn $type {1.0 2.0 3.0 4.0}]
        } else {
            test xtal-column-create-range-$type-1.3 {
                Create column from range - cast
            } -body "xtal::xtal {@$type 1.0:5.0:1}" -result [newcolumn $type {1 2 3 4}]
        }
        
        test xtal-column-create-range-$type-2.0 {
            Create column from range (syntax error)
        } -body "xtal::xtal {@$type 10}" -result "Parse error*" -returnCodes error -match glob
    }
    
    ################################################################
    # Column indexing
    foreach type {byte int uint wide string any} {
        test xtal-column-$type-index-1.0 {
            Literal column scalar index
        } -body " xtal::xtal { @$type {10, 20, 30, 40}\[0\] } " -result 10

        test xtal-column-$type-index-1.1 {
            Literal column scalar index
        } -body " xtal::xtal { i = 2; @$type {10, 20, 30, 40}\[i\] } " -result 30

        test xtal-column-$type-index-1.2 {
            Literal column scalar index
        } -body " xtal::xtal { @$type {10, 20, 30, 40}\[ % @@ - 1\] } " -result 40

        test xtal-column-$type-index-2.0 {
            Literal column scalar index
        } -body " xtal::xtal { c = @$type {10, 20, 30, 40} ; c\[0 \] } " -result 10

        test xtal-column-$type-index-2.1 {
            Literal column scalar index
        } -body " xtal::xtal { i = 2 ; c = @$type {10, 20, 30, 40} ; c\[ i\] } " -result 30

        test xtal-column-$type-index-2.2 {
            Literal column scalar index
        } -body " xtal::xtal { c = @$type {10, 20, 30, 40} ; c\[%c-1\] } " -result 40

        test xtal-column-$type-index-2.3 {
            Literal column scalar index
        } -body " xtal::xtal { i = 3 ; c = @$type {10, 20, 30, 40} ; c\[%@@-i\] } " -result 20
    }

    test xtal-column-boolean-index-1.0 {
        Literal column scalar index
    } -body " xtal::xtal { @boolean {1, 0, 0, 1}\[0\] } " -result 1

    test xtal-column-boolean-index-1.1 {
        Literal column scalar index
    } -body " xtal::xtal { i = 2; c = @boolean {1, 0, 0, 1}; c\[i\] } " -result 0
     test xtal-column-double-index-1.0 {
        Literal column scalar index
    } -body " xtal::xtal { @double {1, 0, 1.1e10, 1}\[0\] } " -result 1.0

    test xtal-column-double-index-1.1 {
        Literal column scalar index
    } -body " xtal::xtal { i = 2; c = @double {1, 0, 1.1e100, 1}; c\[i\] } " -result 1.1e+100
    
    foreach type {boolean byte int uint wide double string any} {
        test xtal-column-$type-index-3.0 {
            Literal column scalar index out of bounds
        } -body " xtal::xtal { @$type {0, 0, 0, 0}\[- 1\] } " -result "tarray index -1 out of bounds." -returnCodes error

        test xtal-column-$type-index-3.1 {
            Literal column scalar index out of bounds
        } -body " xtal::xtal { i = 4 ; c = @$type {0, 0, 0, 0}; c\[i\] } " -result "tarray index 4 out of bounds." -returnCodes error

        test xtal-column-$type-index-3.2 {
            Literal column scalar index non-integer
        } -body " xtal::xtal { c = @$type {0, 0, 0, 0}; c\['notanint'\] } " -result "expected integer but got \"notanint\"" -returnCodes error

        test xtal-column-$type-index-3.3 {
            Literal column scalar index non-integer
        } -body " xtal::xtal { i = 0.0 ; c = @$type {0, 0, 0, 0}; c\[i\] } " -result "expected integer but got \"0.0\"" -returnCodes error

        test xtal-column-$type-index-3.4 {
            Literal column scalar index non-integer
        } -body " xtal::xtal { c = @$type {0, 0, 0, 0}; c\[ \] } " -result "Parse error *" -match glob -returnCodes error

    }

    # Indexlists
    foreach type {byte int uint wide string any} {
        test xtal-column-$type-indexlist-1.0 {
            Literal column scalar indexlist
        } -setup { set i 2 } -body " xtal::xtal { @$type {10, 20, 30, 40}\[{0,i,%@@-1}\] } " -result [newcolumn $type {10 30 40}]

        test xtal-column-$type-indexlist-1.1 {
            Literal column scalar indexlist
        } -body " xtal::xtal { i = {3, 0, 1} ; @$type {10, 20, 30, 40}\[i\] } " -result [newcolumn $type {40 10 20}]

        test xtal-column-$type-indexlist-1.2 {
            Literal column scalar indexlist
        } -body " xtal::xtal { i = {} ; @$type {10, 20, 30, 40}\[i\] } " -result [newcolumn $type {}]

        test xtal-column-$type-indexlist-2.0 {
            Literal column scalar indexlist
        } -body " xtal::xtal { c = @$type {10, 20, 30, 40} ; c\[ {2, 0} \] } " -result [newcolumn $type {30 10}]

        test xtal-column-$type-indexlist-2.1 {
            Literal column scalar indexlist
        } -body " xtal::xtal { i = {3,2,1,0} ; c = @$type {10, 20, 30, 40} ; c\[ i\] } " -result [newcolumn $type {40 30 20 10}]

        test xtal-column-$type-indexlist-2.2 {
            Literal column scalar indexlist
        } -body " xtal::xtal { i = {} ; c = @$type {10, 20, 30, 40} ; c\[ i\] } " -result [newcolumn $type {}]

    }

    test xtal-column-boolean-indexlist-1.0 {
        Literal column scalar indexlist
    } -body " xtal::xtal { @boolean {1, 0, 0, 1}\[{0,3,1}\] } " -result [newcolumn boolean {1 1 0}]

    test xtal-column-boolean-indexlist-1.1 {
        Literal column scalar indexlist
    } -body " xtal::xtal { i = {0, 1, 2}; c = @boolean {1, 0, 0, 1}; c\[i\] } " -result [newcolumn boolean {1 0 0}]
    
    test xtal-column-double-indexlist-1.0 {
        Literal column scalar indexlist
    } -body " xtal::xtal { @double {1, 0, 1.1e10, 1}\[{0,3}\] } " -result [newcolumn double {1 1}]

    test xtal-column-double-indexlist-1.1 {
        Literal column scalar indexlist
    } -body " xtal::xtal { i = {0, 2}; c = @double {1, 0, 1.1e100, 1}; c\[i\] } " -result [newcolumn double {1 1.1e+100}]
    
    foreach type {boolean byte int uint wide double string any} {
        test xtal-column-$type-indexlist-3.0 {
            Literal column scalar indexlist out of bounds
        } -body " xtal::xtal { @$type {0, 0, 0, 0}\[{0, -1}\] } " -result "tarray index -1 out of bounds." -returnCodes error

        test xtal-column-$type-indexlist-3.1 {
            Literal column scalar indexlist out of bounds
        } -body " xtal::xtal { i = {3,4} ; c = @$type {0, 0, 0, 0}; c\[i\] } " -result "tarray index 4 out of bounds." -returnCodes error

        test xtal-column-$type-indexlist-3.2 {
            Literal column scalar indexlist non-integer
        } -body " xtal::xtal { c = @$type {0, 0, 0, 0}; c\['notanint'\] } " -result "expected integer but got \"notanint\"" -returnCodes error

        test xtal-column-$type-indexlist-3.3 {
            Literal column scalar indexlist non-integer
        } -body " xtal::xtal { i = {0, 0.0} ; c = @$type {0, 0, 0, 0}; c\[i\] } " -result "expected integer but got \"0.0\"" -returnCodes error

    }

    # Index columns
    foreach type {byte int uint wide string any} {
        test xtal-column-$type-indexcolumn-1.0 {
            Literal column scalar indexcolumn
        } -body " xtal::xtal { @$type {10, 20, 30, 40}\[@int {0,2}\] } " -result [newcolumn $type {10 30}]

        test xtal-column-$type-indexcolumn-1.1 {
            Literal column scalar indexcolumn
        } -body " xtal::xtal { i = @int {3, 0, 1} ; @$type {10, 20, 30, 40}\[i\] } " -result [newcolumn $type {40 10 20}]

        test xtal-column-$type-indexcolumn-1.2 {
            Literal column scalar indexcolumn
        } -body " xtal::xtal { i = @int {} ; @$type {10, 20, 30, 40}\[i\] } " -result [newcolumn $type {}]

        test xtal-column-$type-indexcolumn-2.0 {
            Literal column scalar indexcolumn
        } -body " xtal::xtal { c = @$type {10, 20, 30, 40} ; c\[ @int {2, 0} \] } " -result [newcolumn $type {30 10}]

        test xtal-column-$type-indexcolumn-2.1 {
            Literal column scalar indexcolumn
        } -body " xtal::xtal { i = @int {3,2,1,0} ; c = @$type {10, 20, 30, 40} ; c\[ i\] } " -result [newcolumn $type {40 30 20 10}]

        test xtal-column-$type-indexcolumn-2.2 {
            Literal column scalar indexcolumn
        } -body " xtal::xtal { i = @int {} ; c = @$type {10, 20, 30, 40} ; c\[ i\] } " -result [newcolumn $type {}]

    }

    test xtal-column-boolean-indexcolumn-1.0 {
        Literal column scalar indexcolumn
    } -body " xtal::xtal { @boolean {1, 0, 0, 1}\[@int {0,3,1}\] } " -result [newcolumn boolean {1 1 0}]

    test xtal-column-boolean-indexcolumn-1.1 {
        Literal column scalar indexcolumn
    } -body " xtal::xtal { i = @int {0, 1, 2}; c = @boolean {1, 0, 0, 1}; c\[i\] } " -result [newcolumn boolean {1 0 0}]
    
    test xtal-column-double-indexcolumn-1.0 {
        Literal column scalar indexcolumn
    } -body " xtal::xtal { @double {1, 0, 1.1e10, 1}\[@int {0,3}\] } " -result [newcolumn double {1 1}]

    test xtal-column-double-indexcolumn-1.1 {
        Literal column scalar indexcolumn
    } -body " xtal::xtal { i = @int {0, 2}; c = @double {1, 0, 1.1e100, 1}; c\[i\] } " -result [newcolumn double {1 1.1e+100}]
    
    foreach type {boolean byte int uint wide double string any} {
        test xtal-column-$type-indexcolumn-3.0 {
            Literal column scalar indexcolumn out of bounds
        } -body " xtal::xtal { @$type {0, 0, 0, 0}\[@int {0, -1}\] } " -result "tarray index -1 out of bounds." -returnCodes error

        test xtal-column-$type-indexcolumn-3.1 {
            Literal column scalar indexcolumn out of bounds
        } -body " xtal::xtal { i = @int {3,4} ; c = @$type {0, 0, 0, 0}; c\[i\] } " -result "tarray index 4 out of bounds." -returnCodes error

        test xtal-column-$type-indexcolumn-3.2 {
            Literal column scalar indexcolumn non-integer
        } -body " xtal::xtal { i = @double {0, 1} ; c = @$type {0, 0, 0, 0}; c\[i\] } " -result "Invalid index list*" -match glob -returnCodes error

    }

    ################################################################
    # range tests

    foreach type {boolean byte int uint wide double string any} {
        test xtal-column-$type-range-1.0 {column range} -setup {
            set c [samplecolumn $type]
        } -body { 
            xtal::xtal {c[0:0]}
        } -result [samplecolumn $type 0 0]
        
        test xtal-column-$type-range-1.1 {column range} -setup {
            set c [samplecolumn $type 0 9]
        } -body { 
            xtal::xtal {c[ %c-1 : %@@-1 ]}
        } -result [samplecolumn $type 9 9]

        test xtal-column-$type-range-1.2 {column range} -setup {
            set c [samplecolumn $type 0 9]
        } -body { 
            xtal::xtal {c[ 0 : %c-1 ]}
        } -result [samplecolumn $type 0 9]

        test xtal-column-$type-range-1.3 {column range} -setup {
            set c [samplecolumn $type]
        } -body { 
            xtal::xtal {c[0:%c]}
        } -result [samplecolumn $type]

        test xtal-column-$type-range-1.4 {column empty range} -setup {
            set c [samplecolumn $type]
        } -body { 
            xtal::xtal {c[0:-1]}
        } -result [newcolumn $type]

        test xtal-column-$type-range-1.5 {column empty range} -setup {
            set c [samplecolumn $type]
        } -body { 
            xtal::xtal {c[3:1]}
        } -result [newcolumn $type]

        test xtal-column-$type-range-1.6 {column upper unspecified} -setup {
            set c [samplecolumn $type]
        } -body { 
            xtal::xtal {c[1:]}
        } -result [samplecolumn $type 1 end]
        
        test xtal-column-$type-range-2.0 {column lower unspecified} -setup {
            set c [samplecolumn $type]
        } -body { 
            xtal::xtal {c[:1]}
        } -result "Parse error*" -match glob -returnCodes error 

        test xtal-column-$type-range-2.1 {column lower unspecified} -setup {
            set c [samplecolumn $type]
        } -body { 
            xtal::xtal {c[:]}
        } -result "Parse error*" -match glob -returnCodes error 

        test xtal-column-$type-range-2.2 {column lower unspecified} -setup {
            set c [samplecolumn $type]
        } -body { 
            xtal::xtal {c["zero":1]}
        } -result "Invalid index*" -match glob -returnCodes error 

        test xtal-column-$type-range-2.3 {column lower unspecified} -setup {
            set c [samplecolumn $type]
        } -body { 
            xtal::xtal {c[0:"one"]}
        } -result "Invalid index*" -match glob -returnCodes error 
    }

    ################################################################
    # selector indexes tests
    foreach type {byte int uint wide double string any} {
        test xtal-column-$type-selector-1.0 {column selector ==} -body {
            xtal::xtal {I[I == 22]}
        } -setup {
            set I [newcolumn $type $L]
        } -result [newcolumn $type {22 22}]

        test xtal-column-$type-selector-1.0.1 {column selector ==} -body {
            xtal::xtal {I[22 == I]}
        } -setup {
            set I [newcolumn $type $L]
        } -result [newcolumn $type {22 22}]

        test xtal-column-$type-selector-1.1 {column selector ==} -body {
            xtal::xtal {I[I == 23]}
        } -setup {
            set I [newcolumn $type $L]
        } -result [newcolumn $type {}]

        test xtal-column-$type-selector-1.1.1 {column selector ==} -body {
            xtal::xtal {I[23 == I]}
        } -setup {
            set I [newcolumn $type $L]
        } -result [newcolumn $type {}]

        test xtal-column-$type-selector-1.2 {column selector !=} -body {
            xtal::xtal {I[I != 22]}
        } -setup {
            set I [newcolumn $type $L]
        } -result [newcolumn $type {33 11 44}]

        test xtal-column-$type-selector-1.2.1 {column selector !=} -body {
            xtal::xtal {I[22 != I]}
        } -setup {
            set I [newcolumn $type $L]
        } -result [newcolumn $type {33 11 44}]

        test xtal-column-$type-selector-1.3 {column selector !=} -body {
            xtal::xtal {I[I != 23]}
        } -setup {
            set I [newcolumn $type $L]
        } -result [newcolumn $type $L]

        test xtal-column-$type-selector-1.3.1 {column selector !=} -body {
            xtal::xtal {I[23 != I]}
        } -setup {
            set I [newcolumn $type $L]
        } -result [newcolumn $type $L]

        test xtal-column-$type-selector-1.4 {column selector ==} -body {
            xtal::xtal {I[@@ == 22]}
        } -setup {
            set I [newcolumn $type $L]
        } -result [newcolumn $type {22 22}]

        test xtal-column-$type-selector-1.4.1 {column selector ==} -body {
            xtal::xtal {I[22 == @@]}
        } -setup {
            set I [newcolumn $type $L]
        } -result [newcolumn $type {22 22}]

        test xtal-column-$type-selector-1.5 {column selector !=} -body {
            xtal::xtal {I[@@ != 22]}
        } -setup {
            set I [newcolumn $type $L]
        } -result [newcolumn $type {33 11 44}]

        test xtal-column-$type-selector-1.5.1 {column selector !=} -body {
            xtal::xtal {I[22 != @@]}
        } -setup {
            set I [newcolumn $type $L]
        } -result [newcolumn $type {33 11 44}]

    }

    # Booleans are not tested above so do them
    test xtal-column-boolean-selector-1.0 {column selector ==} -body {
        xtal::xtal {I[I == 0 ]}
    } -setup {
        set I [newcolumn boolean {0 1 1 0 1}]
    } -result [newcolumn boolean {0 0}]

    test xtal-column-boolean-selector-1.0.1 {column selector ==} -body {
        xtal::xtal {I[1 == I]}
    } -setup {
        set I [newcolumn boolean {0 1 1 0 1}]
    } -result [newcolumn boolean {1 1 1}]

    test xtal-column-boolean-selector-1.1 {column selector !=} -body {
        xtal::xtal {I[I != 1 ]}
    } -setup {
        set I [newcolumn boolean {0 1 1 0 1}]
    } -result [newcolumn boolean {0 0}]

    test xtal-column-boolean-selector-1.1.1 {column selector !=} -body {
        xtal::xtal {I[0 != I]}
    } -setup {
        set I [newcolumn boolean {0 1 1 0 1}]
    } -result [newcolumn boolean {1 1 1}]

    # String / any specific tests for case sensitivity, regexp etc.
    foreach type {string any} {
        test xtal-column-$type-selector-2.0 {
            column selector == case sensitivity
        } -setup {
            set C [newcolumn $type $LC]
        } -body {
            xtal::xtal {C[C == "string"]}
        } -result [newcolumn $type [list "string"]]

        test xtal-column-$type-selector-2.0.1 {
            column selector == case sensitivity
        } -setup {
            set C [newcolumn $type $LC]
        } -body {
            xtal::xtal {C["STRING" == C]}
        } -result [newcolumn $type [list "STRING"]]

        test xtal-column-$type-selector-2.1 {
            column selector =^ case sensitivity
        } -setup {
            set C [newcolumn $type $LC]
        } -body {
            xtal::xtal {C[C =^ "STRING"]}
        } -result [newcolumn $type [list "string" "STRING"]]

        test xtal-column-$type-selector-2.1.1 {
            column selector =^ case sensitivity
        } -setup {
            set C [newcolumn $type $LC]
        } -body {
            xtal::xtal {C["string" =^ C]}
        } -result [newcolumn $type [list "string" "STRING"]]

        test xtal-column-$type-selector-2.2 {
            column selector =^ case sensitivity
        } -setup {
            set C [newcolumn $type $LC]
        } -body {
            xtal::xtal {C[@@ =^ "StRinG"]}
        } -result [newcolumn $type [list "string" "STRING"]]

        test xtal-column-$type-selector-2.2.1 {
            column selector =^ case sensitivity
        } -setup {
            set C [newcolumn $type $LC]
        } -body {
            xtal::xtal {C["string" =^ @@]}
        } -result [newcolumn $type [list "string" "STRING"]]

        test xtal-column-$type-selector-2.3 {
            column selector != case sensitivity
        } -setup {
            set C [newcolumn $type $LC]
        } -body {
            xtal::xtal {C[C != "string"]}
        } -result [newcolumn $type {zero one two {3 three} STRING}]

        test xtal-column-$type-selector-2.3.1 {
            column selector != case sensitivity
        } -setup {
            set C [newcolumn $type $LC]
        } -body {
            xtal::xtal {C["string" != C]}
        } -result [newcolumn $type {zero one two {3 three} STRING}]

        test xtal-column-$type-selector-2.4 {
            column selector !^ case sensitivity
        } -setup {
            set C [newcolumn $type $LC]
        } -body {
            xtal::xtal {C[C !^ "STRING"]}
        } -result [newcolumn $type {zero one two {3 three}}]

        test xtal-column-$type-selector-2.4.1 {
            column selector !^ case sensitivity
        } -setup {
            set C [newcolumn $type $LC]
        } -body {
            xtal::xtal {C["string" !^ @@]}
        } -result [newcolumn $type {zero one two {3 three}}]

        test xtal-column-$type-selector-3.0 {column selector ~} -body {
            xtal::xtal {C[C ~ "s.*"]}
        } -setup {
            set C [newcolumn $type $LC]
        } -result [newcolumn $type string]

        test xtal-column-$type-selector-3.0.1 {column selector ~} -body {
            xtal::xtal {C["s.*" ~ C]}
        } -setup {
            set C [newcolumn $type $LC]
        } -result "The right hand operand of operator ~ cannot be a vector." -returnCodes error

        test xtal-column-$type-selector-3.1 {column selector ~^} -body {
            xtal::xtal {C[C ~^ "s.*"]}
        } -setup {
            set C [newcolumn $type $LC]
        } -result [newcolumn $type {string STRING}]

        test xtal-column-$type-selector-3.1.1 {column selector ~^} -body {
            xtal::xtal {C["s.*" ~^ C]}
        } -setup {
            set C [newcolumn $type $LC]
        } -result "The right hand operand of operator ~^ cannot be a vector." -returnCodes error

        test xtal-column-$type-selector-3.2 {column selector ~^} -body {
            xtal::xtal {C[@@ ~^ "G$"]}
        } -setup {
            set C [newcolumn $type $LC]
        } -result [newcolumn $type {string STRING}]

        test xtal-column-$type-selector-3.2.1 {column selector ~^} -body {
            xtal::xtal {C["G$" ~^ @@]}
        } -setup {
            set C [newcolumn $type $LC]
        } -result "The right hand operand of operator ~^ cannot be a vector." -returnCodes error

        test xtal-column-$type-selector-3.3 {column selector ~^} -body {
            xtal::xtal {C[@@ ~^ "x$"]}
        } -setup {
            set C [newcolumn $type $LC]
        } -result [newcolumn $type {}]

        test xtal-column-$type-selector-4.0 {column selector !~} -body {
            xtal::xtal {C[C !~ "^s"]}
        } -setup {
            set C [newcolumn $type $LC]
        } -result [newcolumn $type {zero one two {3 three} STRING}]

        test xtal-column-$type-selector-4.0.1 {column selector !~} -body {
            xtal::xtal {C["^s" !~ C]}
        } -setup {
            set C [newcolumn $type $LC]
        } -result "The right hand operand of operator !~ cannot be a vector." -returnCodes error

        test xtal-column-$type-selector-4.1 {column selector !~^} -body {
            xtal::xtal {C[C !~^ "^s"]}
        } -setup {
            set C [newcolumn $type $LC]
        } -result [newcolumn $type {zero one two {3 three}}]

        test xtal-column-$type-selector-4.1.1 {column selector !~^} -body {
            xtal::xtal {C["^s" !~^ C]}
        } -setup {
            set C [newcolumn $type $LC]
        } -result "The right hand operand of operator !~^ cannot be a vector." -returnCodes error
    }
    
    foreach type {boolean byte int uint wide double} {
        test xtal-column-$type-selector-5.0 {column selector ~} -body {
            xtal::xtal {C[C ~ "0"]}
        } -setup {
            set C [newcolumn $type $L]
        } -result "Operation is invalid for type $type." -returnCodes error

        test xtal-column-$type-selector-5.0.1 {column selector !~^} -body {
            xtal::xtal {C["^s" ~ C]}
        } -setup {
            set C [newcolumn $type $L]
        } -result "The right hand operand of operator ~ cannot be a vector." -returnCodes error
        
        test xtal-column-$type-selector-5.1 {column selector !~} -body {
            xtal::xtal {C[C !~ "0"]}
        } -setup {
            set C [newcolumn $type $L]
        } -result "Operation is invalid for type $type." -returnCodes error
    }

    # Comparison operators
    set testnum -1
    foreach type {byte int uint wide double string any} {
        foreach op {> < >= <= > < >= <=} operand {22 44 11 33 50 10 50 10} res {{33 44} {33 11 22 22} {33 11 22 44 22} {33 11 22 22} {} {} {} {}} {
            test xtal-column-$type-selector-6.[incr testnum] "Column $op" -setup {
                set c [newcolumn $type $L]
            } -body {
                xtal::xtal "c\[c $op $operand\]"
            } -result [newcolumn $type $res]
            
            test xtal-column-$type-selector-6.[incr testnum] "Column $op" -setup {
                set c [newcolumn $type $L]
            } -body {
                xtal::xtal "c\[@@ $op $operand\]"
            } -result [newcolumn $type $res]
        }
        
        foreach op {> < >= <= > < >= <=} operand {22 22 33 22 10 50 10 50} res {{11} {33 44} {33 11 22 22} {33 22 44 22} {} {} {} {}} {
            test xtal-column-$type-selector-6.[incr testnum] "Column $op" -setup {
                set c [newcolumn $type $L]
            } -body {
                xtal::xtal "c\[$operand $op c\]"
            } -result [newcolumn $type $res]
            
            test xtal-column-$type-selector-6.[incr testnum] "Column $op" -setup {
                set c [newcolumn $type $L]
            } -body {
                xtal::xtal "c\[$operand $op @@ \]"
            } -result [newcolumn $type $res]

        }

        if {$type ni {any string}} {
            foreach op {> < >= <= > < >= <=} operand {22 22 33 22 10 50 10 50} res {{11} {33 44} {33 11 22 22} {33 22 44 22} {} {} {} {}} {
                test xtal-column-$type-selector-6.[incr testnum] "Column $op" -setup {
                    set c [newcolumn $type $L]
                } -body {
                    xtal::xtal "c\[c $op 'astring'\]"
                } -result "expected * but got \"astring\"" -returnCodes error -match glob
                test xtal-column-$type-selector-6.[incr testnum] "Column $op" -setup {
                    set c [newcolumn $type $L]
                } -body {
                    xtal::xtal "c\[c $op \"\"\]"
                } -result "expected * but got \"\"" -returnCodes error -match glob
            }
        }
    }

    foreach op {> < >= <= > < >= <=} {
        test xtal-column-boolean-selector-6.[incr testnum] "Column boolean $op" -setup {
            set c [newcolumn boolean {0 1 1 0 1}]
        } -body {
            xtal::xtal "c\[$operand $op c\]"
        } -result "Operation is invalid for type boolean." -returnCodes error

        test xtal-column-boolean-selector-6.[incr testnum] "Column boolean $op" -setup {
            set c [newcolumn boolean {0 1 1 0 1}]
        } -body {
            xtal::xtal "c\[c $op $operand\]"
        } -result "Operation is invalid for type boolean." -returnCodes error
    }
                   
    ################################################################
    # selector && range
    foreach type {byte int uint wide double string any} {
        test xtal-column-$type-selector-and-range-1.0 {column selector ==} -body {
            xtal::xtal {c[c == 22 && 3:]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {22}]
        
        test xtal-column-$type-selector-and-range-1.0.1 {column selector ==} -body {
            xtal::xtal {c[3: && c == 22]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {22}]
        
        test xtal-column-$type-selector-and-range-1.1 {column selector ==} -body {
            xtal::xtal {c[0:1 && c == 22]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {}]
        
        test xtal-column-$type-selector-and-range-1.1.1 {column selector ==} -body {
            xtal::xtal {c[22 == c && 0:1]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {}]
        
        test xtal-column-$type-selector-and-range-1.2 {column selector !=} -body {
            xtal::xtal {c[c != 22 && 1:%c-1]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {11 44}]
        
        test xtal-column-$type-selector-and-range-1.2.1 {column selector !=} -body {
            xtal::xtal {c[1:%c-1 && c != 22]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {11 44}]
        
        test xtal-column-$type-selector-and-range-1.2.2 {column selector !=} -body {
            xtal::xtal {c[1:0 && c != 22]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {}]
        
        test xtal-column-$type-selector-and-range-1.3 {column selector !=} -body {
            xtal::xtal {c[c != 23 && 0:2]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type [lrange $L 0 2]]

        test xtal-column-$type-selector-and-range-1.4 {column selector ==} -body {
            xtal::xtal {c[@@ == 22 && 0:%c]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {22 22}]

        test xtal-column-$type-selector-and-range-1.4.1 {column selector ==} -body {
            xtal::xtal {c[0:%c && 22 == @@]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {22 22}]

        test xtal-column-$type-selector-and-range-1.5 {column selector !=} -body {
            xtal::xtal {c[0:2 && @@ != 22]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {33 11}]
    }

    foreach type {any string} {
        test xtal-column-$type-selector-and-range-2.0 {column selector ~} -body {
            xtal::xtal {c[0:1 && @@ ~ ".o$"]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type {zero}]
        
        test xtal-column-$type-selector-and-range-2.0.1 {column selector ~} -body {
            xtal::xtal {c[@@ ~ ".o$" && 0:1]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type {zero}]
        
        test xtal-column-$type-selector-and-range-2.1 {column selector ~} -body {
            xtal::xtal {c[0:%I && c ~ ".x$"]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type {}]

        test xtal-column-$type-selector-and-range-2.2 {column selector !~} -body {
            xtal::xtal {c[c !~ ".o$" && %c-1:%c]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type {STRING}]
        
        test xtal-column-$type-selector-and-range-2.3 {column selector ~} -body {
            xtal::xtal {c[0:2 && c ~ "s.*"]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type {}]

        test xtal-column-$type-selector-2.3.1 {column selector ~} -body {
            xtal::xtal {c[0:2 && "s.*" ~ c]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result "The right hand operand of operator ~ cannot be a vector." -returnCodes error

        test xtal-column-$type-selector-and-range-2.4 {column selector ~} -body {
            xtal::xtal {c[2:100 && c ~ "s.*"]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type string]

        test xtal-column-$type-selector-and-range-2.5 {column selector ~^} -body {
            xtal::xtal {c[0: && c ~^ "s.*"]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type {string STRING}]

        test xtal-column-$type-selector-and-range-2.5.1 {column selector ~^} -body {
            xtal::xtal {c[c ~^ "s.*" && 0:]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type {string STRING}]

        test xtal-column-$type-selector-and-range-2.6 {column selector ~^} -body {
            xtal::xtal {c[c ~^ "s.*" && 0:%c]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type {string STRING}]

        test xtal-column-$type-selector-and-range-2.6.1 {column selector ~^} -body {
            xtal::xtal {c[c ~^ "s.*" && %c-2:%c]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type {string STRING}]

        test xtal-column-$type-selector-and-range-2.6.2 {column selector ~^} -body {
            xtal::xtal {c["s.*" ~^ c && 0:]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result "The right hand operand of operator ~^ cannot be a vector." -returnCodes error
    }    

    # TBD - op >, <, >=, <= for selector-and-range
    # TBD - boolean selector-and-range

    ################################################################
    # selector || range
    foreach type {byte int uint wide double string any} {
        test xtal-column-$type-selector-or-range-1.0 {column selector ==} -body {
            xtal::xtal {c[c == 22 || 1:3]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {11 22 44 22}]
        
        test xtal-column-$type-selector-or-range-1.0.1 {column selector ==} -body {
            xtal::xtal {c[3: || c == 22]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {22 44 22}]
        
        test xtal-column-$type-selector-or-range-1.1 {column selector ==} -body {
            xtal::xtal {c[0:1 || c == 22]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {33 11 22 22}]
        
        test xtal-column-$type-selector-or-range-1.1.1 {column selector ==} -body {
            xtal::xtal {c[22 == c || 0:1]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {33 11 22 22}]
        
        test xtal-column-$type-selector-or-range-1.2 {column selector !=} -body {
            xtal::xtal {c[c != 22 || 1:%c-3]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {33 11 22 44}]
        
        test xtal-column-$type-selector-or-range-1.2.1 {column selector !=} -body {
            xtal::xtal {c[1:%c-1 || c != 22]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type $L]
        
        test xtal-column-$type-selector-or-range-1.3 {column selector !=} -body {
            xtal::xtal {c[c != 23 || 0:2]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type $L]

        test xtal-column-$type-selector-or-range-1.4 {column selector ==} -body {
            xtal::xtal {c[@@ == 22 || 0:1]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {33 11 22 22}]

        test xtal-column-$type-selector-or-range-1.4.1 {column selector ==} -body {
            xtal::xtal {c[0:-1 || 22 == @@]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {22 22}]

        test xtal-column-$type-selector-or-range-1.4.2 {column selector ==} -body {
            xtal::xtal {c[3:%c || 22 == @@]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {22 44 22}]

        test xtal-column-$type-selector-or-range-1.5 {column selector !=} -body {
            xtal::xtal {c[0:2 || @@ != 22]}
        } -setup {
            set c [newcolumn $type $L]
        } -result [newcolumn $type {33 11 22 44}]
    }

    foreach type {string any} {
        test xtal-column-$type-selector-or-range-2.0 {column selector ~} -body {
            xtal::xtal {c[0:1 || @@ ~ ".o$"]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type {zero one two}]

        test xtal-column-$type-selector-or-range-2.1 {column selector !~} -body {
            xtal::xtal {c[c !~ ".o$" || %c-2:%c-1]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type {one {3 three} string STRING}]

        test xtal-column-$type-selector-or-range-2.2 {column selector ~^} -body {
            xtal::xtal {c[0:%c-2 || c ~^ "s.*"]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result [newcolumn $type $LC]

        test xtal-column-$type-selector-or-range-2.3 {column selector ~} -body {
            xtal::xtal {c[0:%c-2 || "s.*" ~ c]}
        } -setup {
            set c [newcolumn $type $LC]
        } -result "The right hand operand of operator ~ cannot be a vector." -returnCodes error
    }
    
    
    # TBD - op >, <, >=, <= for selector-or-range
    # TBD - boolean selector-or-range

    ################################################################
    # Compound expressions
    foreach type {byte int uint wide double} {
        test xtal-column-$type-selector-compound-1.0 "column $type compound selector" -setup {
            set c [newcolumn $type $L]
        } -body {
            xtal::xtal { c[c < 33 && c > 20] }
        } -result [newcolumn $type {22 22}]

        test xtal-column-$type-selector-compound-1.1 "column $type compound selector" -setup {
            set c [newcolumn $type $L]
        } -body {
            xtal::xtal { c[c > 33 && @@ < 20] }
        } -result [newcolumn $type {}]

        test xtal-column-$type-selector-compound-1.2 "column $type compound selector" -setup {
            set c [newcolumn $type $L]
        } -body {
            xtal::xtal { c[@@ <= 22 || c > 40] }
        } -result [newcolumn $type {11 22 44 22}]

        test xtal-column-$type-selector-compound-1.3 "column $type compound selector" -setup {
            set c [newcolumn $type $L]
        } -body {
            xtal::xtal { c[c == 44 || c > 30 && c < 40] }
        } -result [newcolumn $type {33 44}]

        test xtal-column-$type-selector-compound-1.4 "column $type compound selector" -setup {
            set c [newcolumn $type $L]
        } -body {
            xtal::xtal { c[(c == 44 || c > 30) && c < 40] }
        } -result [newcolumn $type {33}]
    }
            
    foreach type {string any} {
        test xtal-column-$type-selector-compound-1.0 {
            list selector && selector
        } -setup {
            set c [newcolumn $type $LC]
        } -body {
            xtal::xtal {c[c ~ "o" && @@ ~ "e"]}
        } -result [newcolumn $type {zero one}]

        test xtal-column-$type-selector-compound-1.1 {
            list selector && selector
        } -setup {
            set c [newcolumn $type $LC]
        } -body {
            xtal::xtal {c[c ~ "o" || @@ ~^ "^s"]}
        } -result [newcolumn $type {zero one two string STRING}]

        test xtal-column-$type-selector-compound-1.2 {
            list selector && || selector
        } -setup {
            set c [newcolumn $type $LC]
        } -body {
            xtal::xtal {c[(@@ ~ "r" || @@ ~ "n") && c ~ "o"]}
        } -result [newcolumn $type {zero one}]

        test xtal-column-$type-selector-compound-1.3 {
            list selector && || selector
        } -setup {
            set c [newcolumn $type $LC]
        } -body {
            xtal::xtal {c[@@ ~ "r" || @@ ~ "n" && c ~ "o"]}
        } -result [newcolumn $type {zero one {3 three} string}]
    }

    foreach type {byte int uint wide double string any} {
        test xtal-column-$type-selector-compound-2.0 "column $type compound selector" -setup {
            set c [newcolumn $type $L]
        } -body {
            xtal::xtal { c[c < 33 && 0] }
        } -result "Invalid logical and operation on a column and a scalar." -returnCodes error

        test xtal-column-$type-selector-compound-2.1 "column $type compound selector" -setup {
            set c [newcolumn $type $L]
            set i 1
        } -body {
            xtal::xtal { c[c < 33 || i] }
        } -result "Invalid logical or operation on a column and a scalar." -returnCodes error
    }

    
    
    ################################################################
    # Assignments

    foreach type {boolean byte int uint wide double string any} {
        test xtal-column-$type-assign-1.0 {column assignment} -body {
            xtal::xtal { l2 = l } ; set l2
        } -setup {
            set l [newcolumn $type $L]
        } -result [newcolumn $type $L]
        
        ################################################################
        # column assign index
        test xtal-column-$type-assign-index-1.0 {column assign index} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[0] = 10 }
        } -result [newcolumn $type [lreplace $L 0 0 10]]

        test xtal-column-$type-assign-index-1.1 {column assign last index} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[%l] = "10" }
        } -result [newcolumn $type [linsert $L end 10]]
        
        test xtal-column-$type-assign-index-1.2 {column assign last index} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal {i = 2;  l[i] = 20}
        } -result [newcolumn $type [lreplace $L 2 2 20]]
        
        test xtal-column-$type-assign-index-1.3 {column assign last index} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[%l-1] = "10" }
        } -result [newcolumn $type [lreplace $L end end 10]]

        test xtal-column-$type-assign-index-1.3.1 {column assign last index} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[%@@-1] = "10" }
        } -result [newcolumn $type [lreplace $L end end 10]]

        test xtal-column-$type-assign-index-2.0 {column assign index} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[-1] = "10" }
        } -result "tarray index -1 out of bounds." -returnCodes error
        
        test xtal-column-$type-assign-index-2.1 {column assign index} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[%l+1] = "10" }
        } -result "tarray index 6 out of bounds." -returnCodes error
        
        test xtal-column-$type-assign-index-2.2 {column assign index} -setup {
            unset -nocomplain l
        } -body {
            xtal::xtal { l[0] = "10" }
        } -result "can't read \"l\": no such variable" -returnCodes error

    }
    
    ################################################################
    # list assign indexlist
    foreach type {boolean byte int uint wide double string any} {
        test xtal-column-$type-assign-indexlist-1.0 {column assign indexlist} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{0,1}] = {10, 20} }
        } -result [newcolumn $type [lreplace $L 0 1 10 20]]

        test xtal-column-$type-assign-indexlist-1.1 {column assign indexlist} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{1,0}] = {10, 20} }
        } -result [newcolumn $type [lreplace $L 0 1 20 10]]

        test xtal-column-$type-assign-indexlist-1.1.1 {column assign indexlist} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal "l\[{0,1}\] = @$type {10, 20}"
        } -result [newcolumn $type [lreplace $L 0 1 10 20]]

        test xtal-column-$type-assign-indexlist-1.1.2 {column assign indexlist} -setup {
            set l [newcolumn $type $L]
            set rvalue [newcolumn $type { 5 10 20}]
        } -body {
            xtal::xtal { l[{1,2}] = rvalue[0:1]}
        } -result [newcolumn $type [lreplace $L 1 2 5 10]]

        test xtal-column-$type-assign-indexlist-1.2 {column assign last indexlist} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{%l-1,%l}] = {10, 20} }
        } -result [newcolumn $type [lreplace $L end end 10 20]]
        
        test xtal-column-$type-assign-indexlist-1.3 {column assign indexlist out of order} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{2,1}] = {10, 20} } 
        } -result [newcolumn $type [lreplace $L 1 2 20 10]]
        
        test xtal-column-$type-assign-indexlist-1.4 {column assign empty indexlist} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{}] = {} }
        } -result [newcolumn $type $L]

        test xtal-column-$type-assign-indexlist-1.5 {column assign empty indexlist} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{}] = {} }
        } -result [newcolumn $type $L]
        
        test xtal-column-$type-assign-indexlist-1.5.1 {column assign empty indexlist} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{}] = {10} }
        } -result "Number of indices (0) not same as number of values (1)." -returnCodes error
        
        test xtal-column-$type-assign-indexlist-1.6 {column assign indexlist vars} -setup {
            set l [newcolumn $type $L]
            set i 1
        } -body {
            xtal::xtal { l[{i+1,i}] = {10, 20} }
        } -result [newcolumn $type [lreplace $L 1 2 20 10]]

        test xtal-column-$type-assign-indexlist-1.7 {column assign indexlist extend} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{%l,%l+1}] = {"100", "100"} }
        } -result [newcolumn $type [linsert $L end 100 100]]
        
        test xtal-column-$type-assign-indexlist-1.8 {column assign indexlist extend} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{%@@,%@@+2, %@@+1}] = {"10","20","30" } }
        } -result  [newcolumn $type [linsert $L end 10 30 20]]

        test xtal-column-$type-assign-indexlist-1.8.1 {column assign indexlist extend} -setup {
            set l [newcolumn $type $L]
            set rvalue [newcolumn $type {10 20 30}]
        } -body {
            xtal::xtal { l[{%l,%l+2, %l+1}] = rvalue }
        } -result  [newcolumn $type [linsert $L end 10 30 20]]

        test xtal-column-$type-assign-indexlist-2.0 {column assign indexlist} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{-1,0}] = {10, 20} }
        } -result "tarray index -1 out of bounds." -returnCodes error
        
        test xtal-column-$type-assign-indexlist-2.1 {column assign indexlist} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{0,%@@+1}] = {10, 20} }
        } -result "tarray index 6 out of bounds." -returnCodes error
        
        test xtal-column-$type-assign-indexlist-2.2 {column assign indexlist} -setup {
            unset -nocomplain l
        } -body {
            xtal::xtal { l[{0,1}] = 10 }
        } -result "can't read \"l\": no such variable" -returnCodes error

        test xtal-column-$type-assign-indexlist-2.3 {column assign indexlist extend} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{%l,%l+2}] = {"10","20" } }
        } -result "tarray index 7 out of bounds." -returnCodes error

        test xtal-column-$type-assign-indexlist-2.4 {column assign indexlist} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{0,1}] = {10, 20, 30}}
        } -result "Number of indices (2) not same as number of values (3)." -returnCodes error

        test xtal-column-$type-assign-indexlist-2.5 {column assign indexlist} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[{0,1,2}] = {10, 20}}
        } -result "Number of indices (3) not same as number of values (2)." -returnCodes error

        test xtal-column-$type-assign-indexlist-2.6 {column assign indexlist} -setup {
            set l [newcolumn $type $L]
            set rvalue [newcolumn $type {10 20}]
        } -body {
            xtal::xtal { l[{0,1,2}] = rvalue}
        } -result "Number of indices (3) not same as number of values (2)." -returnCodes error
        # TBD - tests with rvalue column of a different type
    }
    
    ################################################################
    # list assign indexcolumn
    foreach type {boolean byte int uint wide double string any} {
        test xtal-column-$type-assign-indexcolumn-1.0 {column assign indexcolumn} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {0,1}] = {10, 20} }
        } -result [newcolumn $type [lreplace $L 0 1 10 20]]

        test xtal-column-$type-assign-indexcolumn-1.1 {column assign indexcolumn} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {1,0}] = {10, 20} }
        } -result [newcolumn $type [lreplace $L 0 1 20 10]]

        test xtal-column-$type-assign-indexcolumn-1.1.1 {column assign indexcolumn} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal "l\[@int {0,1}\] = @$type {10, 20}"
        } -result [newcolumn $type [lreplace $L 0 1 10 20]]

        test xtal-column-$type-assign-indexcolumn-1.1.2 {column assign indexcolumn} -setup {
            set l [newcolumn $type $L]
            set rvalue [newcolumn $type { 5 10 20}]
        } -body {
            xtal::xtal { l[@int {1,2}] = rvalue[0:1]}
        } -result [newcolumn $type [lreplace $L 1 2 5 10]]

        test xtal-column-$type-assign-indexcolumn-1.1.3 {column assign indexcolumn} -setup {
            set l [newcolumn $type $L]
            set rvalue [newcolumn $type { 5 10 20}]
        } -body {
            xtal::xtal { l[@int {1,2}] = rvalue}
        } -returnCodes error -result "Number of indices (2) not same as number of values (3)."

        test xtal-column-$type-assign-indexcolumn-1.2 {column assign last indexcolumn} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {%l-1,%l}] = {10, 20} }
        } -result [newcolumn $type [lreplace $L end end 10 20]]
        
        test xtal-column-$type-assign-indexcolumn-1.3 {column assign indexcolumn out of order} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {2,1}] = {10, 20} } 
        } -result [newcolumn $type [lreplace $L 1 2 20 10]]
        
        test xtal-column-$type-assign-indexcolumn-1.4 {column assign empty indexcolumn} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {}] = {} }
        } -result [newcolumn $type $L]

        test xtal-column-$type-assign-indexcolumn-1.5 {column assign empty indexcolumn} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {}] = 10 }
        } -result "Number of indices (0) not same as number of values (1)." -returnCodes error

        test xtal-column-$type-assign-indexcolumn-1.6 {column assign indexcolumn vars} -setup {
            set l [newcolumn $type $L]
            set i 1
        } -body {
            xtal::xtal { l[@int {i+1,i}] = {10, 20} }
        } -result [newcolumn $type [lreplace $L 1 2 20 10]]

        test xtal-column-$type-assign-indexcolumn-1.7 {column assign indexcolumn extend} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {%@@,%@@+1}] = {"100", "200"} }
        } -result [newcolumn $type [linsert $L end 100 200]]
        
        test xtal-column-$type-assign-indexcolumn-1.8 {column assign indexcolumn extend} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {%l,%l+2, %l+1}] = {"10","20","30" } }
        } -result  [newcolumn $type [linsert $L end 10 30 20]]

        test xtal-column-$type-assign-indexcolumn-1.8.1 {column assign indexcolumn extend} -setup {
            set l [newcolumn $type $L]
            set rvalue [newcolumn $type {10 20 30}]
        } -body {
            xtal::xtal { l[@int {%l,%l+2, %l+1}] = rvalue }
        } -result  [newcolumn $type [linsert $L end 10 30 20]]

        test xtal-column-$type-assign-indexcolumn-2.0 {column assign indexcolumn} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {-1,0}] = 10 }
        } -result "Number of indices (2) not same as number of values (1)." -returnCodes error
        
        test xtal-column-$type-assign-indexcolumn-2.1 {column assign indexcolumn} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {0,%l+1}] = {"10", "20"} }
        } -result "tarray index 6 out of bounds." -returnCodes error
        
        test xtal-column-$type-assign-indexcolumn-2.2 {column assign indexcolumn} -setup {
            unset -nocomplain l
        } -body {
            xtal::xtal { l[@int {0,1}] = 10 }
        } -result "can't read \"l\": no such variable" -returnCodes error

        test xtal-column-$type-assign-indexcolumn-2.3 {column assign indexcolumn extend} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {%l,%l+2}] = {"10","20" } }
        } -result "tarray index 7 out of bounds." -returnCodes error

        test xtal-column-$type-assign-indexcolumn-2.4 {column assign indexcolumn} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {0,1}] = {10, 20, 30}}
        } -result "Number of indices (2) not same as number of values (3)." -returnCodes error

        test xtal-column-$type-assign-indexcolumn-2.5 {column assign indexcolumn} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[@int {0,1,2}] = {10, 20}}
        } -result "Number of indices (3) not same as number of values (2)." -returnCodes error

        test xtal-column-$type-assign-indexcolumn-2.6 {column assign indexcolumn} -setup {
            set l [newcolumn $type $L]
            set rvalue [newcolumn $type {10 20}]
        } -body {
            xtal::xtal { l[@int {0,1,2}] = rvalue}
        } -result "Number of indices (3) not same as number of values (2)." -returnCodes error
        # TBD - tests with rvalue column of a different type
    }

    ################################################################
    # list range assignment
    #
    foreach type {boolean byte int uint wide double string any} {
        test xtal-column-$type-assign-range-1.0 {column assign range} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[1:1] = 0 }
        } -result [newcolumn $type [lreplace $L 1 1 0]]

        test xtal-column-$type-assign-range-1.1 {column assign range} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[0:1] = {0, 1} }
        } -result [newcolumn $type [lreplace $L 0 1 0 1]]

        test xtal-column-$type-assign-range-1.1.1 {column assign range} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[0:1] = @int {0, 1} }
        } -result [newcolumn $type [lreplace $L 0 1 0 1]]

        test xtal-column-$type-assign-range-1.2 {column assign last range} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[%l-1:%l] = {10, 11} }
        } -result [newcolumn $type [lreplace $L end end 10 11 ]]
        
        test xtal-column-$type-assign-range-1.2.1 {column assign last range} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[%l-1:%l] = @int {10, 11} }
        } -result [newcolumn $type [lreplace $L end end 10 11 ]]

        test xtal-column-$type-assign-range-1.3 {column assign range vars} -setup {
            set l [newcolumn $type $L]
            set i 1
        } -body {
            xtal::xtal { l[i:i+1] = {10, 11} }
        } -result [newcolumn $type [lreplace $L 1 2 10 11]]

        test xtal-column-$type-assign-range-1.3.1 {column assign range vars} -setup {
            set l [newcolumn $type $L]
            set i 1
        } -body {
            xtal::xtal { l[i:i+1] = {10, 11, 12} }
        } -result "Source size 3 differs from target column range 1:2." -returnCodes error

        test xtal-column-$type-assign-range-1.4 {column assign range extend} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[%l:%l+1] = {10, 20} }
        } -result [newcolumn $type [linsert $L end 10 20]]
        
        test xtal-column-$type-assign-range-1.5 {column assign range extend} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[%l:%l+2] = {10, 11, 12} }
        } -result  [newcolumn $type [linsert $L end 10 11 12]]

        test xtal-column-$type-assign-range-1.5.1 {column assign range extend} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[%l:%l+2] = {10, 11} }
        } -result "Source size 2 differs from target column range 5:7." -returnCodes error
        
        test xtal-column-$type-assign-range-1.5.2 {column assign range extend} -setup {
            set l [newcolumn $type $L]
            set l2 [newcolumn $type {10 11}]
        } -body {
            xtal::xtal { l[%l:%l+2] = l2}
        } -result "Source size 2 differs from target column range 5:7." -returnCodes error
        
        test xtal-column-$type-assign-range-1.6 {column assign empty range} -setup {
            set l [newcolumn $type $L]
            set l2 [lrepeat [llength $L] 10]
        } -body {
            xtal::xtal { l[0:] = l2 }
        } -result [newcolumn $type [lrepeat [llength $L] 10]]
        
        test xtal-column-$type-assign-range-2.0 {column assign empty range} -setup {
            set l [newcolumn $type $L]
        } -body {
            # TBD - Inconsistent with l[{-1,0,1}] = 10 which raises error
            # and also with the case where l is a list
            xtal::xtal { l[-1:1] = {10, 11, 12} }
        } -result "tarray index -1 out of bounds." -returnCodes error
        
        test xtal-column-$type-assign-range-2.1 {column assign empty range} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[2:1] = 10 }
        } -result "Range lower limit 2 is greater than upper limit 1." -returnCodes error 
        
        test xtal-column-$type-assign-range-2.2 {column assign empty range} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[:] = "x" }
        } -result "Parse error*" -match glob -returnCodes error
        
        test xtal-column-$type-assign-range-2.3 {column assign range} -setup {
            unset -nocomplain l
        } -body {
            xtal::xtal { l[0:1] = "ten" }
        } -result "can't read \"l\": no such variable" -returnCodes error

        test xtal-column-$type-assign-range-2.4 {column assign range} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[0:1] = @int {0, 1, 2} }
        } -result "Source size 3 differs from target column range 0:1." -returnCodes error

        test xtal-column-$type-assign-range-2.5 {column assign range} -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[0:2] = @int {0, 1} }
        } -result "Source size 2 differs from target column range 0:2." -returnCodes error
    }
    
    ################################################################
    #
    foreach type {string any} {
        test xtal-column-$type-assign-selector-1.0 {column assign selector} -setup {
            set l [newcolumn $type $LC]
        } -body {
            xtal::xtal { l[l ~ "o"] = {"x", "y", "z"} }
        } -result [newcolumn $type {x y z {3 three} string STRING}]
        
        test xtal-column-$type-assign-selector-1.1 {column assign selector} -setup {
            set l [newcolumn $type $LC]
            set l2 [newcolumn $type "x"]
        } -body {
            xtal::xtal { l[l ~ "str"] = l2}
        } -result [newcolumn $type {zero one two {3 three} x STRING}]

        test xtal-column-$type-assign-selector-1.2 {column assign selector} -setup {
            set l [newcolumn $type $LC]
        } -body {
            xtal::xtal { l[@@ ~^ "str"] = {'x', 'y'}}
        } -result [newcolumn $type {zero one two {3 three} x y}]

        test xtal-column-$type-assign-selector-compound-1.0 {column assign compound} -setup {
            set l [newcolumn $type $LC]
            set l2 [newcolumn $type {x y}]
        } -body {
            xtal::xtal { l[l ~ "o" && @@ ~^ "E"] = l2}
        } -result [newcolumn $type {x y two {3 three} string STRING}]
        
        test xtal-column-$type-assign-selector-compound-1.1 {column assign compound} -setup {
            set l [newcolumn $type $LC]
        } -body {
            xtal::xtal { l[@@ ~^ "str" || l ~ "z"] = {"x", "y", "z"}}
        } -result [newcolumn $type {x one two {3 three} y z}]
        
        test xtal-column-$type-assign-selector-compound-1.2 {column assign compound} -setup {
            set l [newcolumn $type $LC]
        } -body {
            xtal::xtal { l[l ~ "o" && @@ ~ "g"] = ""}
        } -result [newcolumn $type $LC]

        test xtal-column-$type-assign-selector-compound-1.2.1 {column assign compound} -setup {
            set l [newcolumn $type $LC]
        } -body {
            xtal::xtal { l[l ~ "o" && @@ ~ "g"] = {"x"}}
        } -result "Number of indices (0) not same as number of values (1)." -returnCodes error
    }

    foreach type {byte int uint wide double} {
        test xtal-column-$type-assign-selector-compound-1.0 {
            column assign compound selector
        } -setup {
            set l [newcolumn $type $L]
            set l2 [newcolumn $type {25 26 27}]
        } -body {
            xtal::xtal { l[l > 20 && l < 40] = l2 }
        } -result [newcolumn $type {25 11 26 44 27}]

        test xtal-column-$type-assign-selector-compound-1.1 {
            column assign compound selector
        } -setup {
            set l [newcolumn $type $L]
        } -body {
            xtal::xtal { l[l < 20 || l > 40] = {25, 26} }
        } -result [newcolumn $type {33 25 22 26 22}]
    }

}

# TBD - assignment tests that check for column type conversion correctness

::tcltest::cleanupTests
