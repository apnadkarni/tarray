# table vput tests

source testutil.tcl

namespace eval tarray::test {

    # args - position init
    proc tvputtest {type pass_as_list nvalues args} {
        variable sample

        if {[llength $args]} {
            set pos [lindex $args 0]
            set posargs [list $pos]
            
            if {[llength $args] > 1} {
                set init [lindex $args 1]
            } else {
                set init [samplerows $type]
            }
        } else {
            set pos end
            set posargs [list ]
            set init [samplerows $type]
        }

        if {$pos eq "end"} {
            set lpos [llength $init]; # NOT same as "end" index for lrange
        } else {
            set lpos $pos
        }

        set changes [lrange [samplerows $type] end-[expr {$nvalues-1}] end]
        if {$lpos == [llength $init]} {
            set expected [concat $init $changes]
        } else {
            set expected [lreplace $init $lpos [expr {$lpos+[llength $changes]-1}] {*}$changes]
        }
        if {$pass_as_list} {
            return [vtab_change_and_verify $type $init $expected vput $changes {*}$posargs]
        } else {
            return [vtab_change_and_verify $type $init $expected vput [tarray::table create [col_def $type] $changes] {*}$posargs]
        }
    }

    proc tvputtest_valuelist {type args} {
        return [tvputtest $type 1 {*}$args]
    }

    proc tvputtest_valuetable  {type args} {
        return  [tvputtest $type 0 {*}$args] }


    #
    # table vput valuelist pos

    test table_vput-list-1.0 {
        Vput a single value into an empty table
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuelist $type 1 0 {}
    } -result 0
        
    test table_vput-list-2.0 {
        Test storing of leading elements
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuelist $type 100 0
    } -result 0 

    test table_vput-list-2.1 {
        Test storing of leading elements
    } -body {
        set type {any}
        tvputtest_valuelist $type 128 0
    } -result 0 

    test table_vput-list-2.2 {
        Test storing of trailing elements
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuelist $type 10 63 [samplerows $type 0 63]
    } -result 0 

    test table_vput-list-2.3 {
        Test storing of trailing elements
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuelist $type 10 64 [samplerows $type 0 63]
    } -result 0 

    test table_vput-list-2.4 {
        Test storing of trailing elements (default end)
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuelist $type 1
    } -result 0 

    test table_vput-list-2.5 {
        Test storing of trailing elements (specified end)
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuelist $type 20 end
    } -result 0 

    test table_vput-list-2.6 {
        Test storing of middle elements
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuelist $type 10 127
    } -result 0 

    test table_vput-list-2.7 {
        Test storing of middle elements (extend length)
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuelist $type 500 400 [samplerows $type 0 450]
    } -result 0 

    test table_vput-list-3.0 {
        Test out of bound index
    } -body {
        set type {any string boolean byte double int uint wide}
        set ta [sampletable $type 0 10]
        tarray::table vput ta [samplerows $type 0 2] 12
        } -result {*index 12 out of bounds*} -returnCodes error -match glob

    test table_vput-list-3.1 {
        Test negative index
    } -body {
        set type {any string boolean byte double int uint wide}
        set ta [sampletable $type 0 10]
        tarray::table vput ta [samplerows $type 0 2] -1
    } -result {*index -1 out of bounds*} -returnCodes error -match glob

    test table_vput-list-3.2 {
        Test invalid values
    } -body {
        set type {any string boolean byte double int uint wide}
        set ta [sampletable $type 0 10]
        tarray::table vput ta {{anyvalue stringvalue 0 0 0 0 1.0 0}} 0
    } -result {*expected*but got*} -returnCodes error -match glob

    test table_vput-list-3.3 {
        Test invalid values (wrong table width)
    } -body {
        set type {any string boolean byte double int uint wide}
        set ta [sampletable $type 0 10]
        tarray::table vput ta {{anyvalue stringvalue 0 0 0 0 0}} 0
    } -result {*width 7 does not match*} -returnCodes error -match glob

    #
    # table vput valuecolumn pos

    test table_vput-table-1.0 {
        Vput a single value into an empty table
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuetable $type 1 0 {}
    } -result 0
        
    test table_vput-table-2.0 {
        Test storing of leading elements
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuetable $type 100 0
    } -result 0 

    test table_vput-table-2.1 {
        Test storing of leading elements
    } -body {
        set type {any}
        tvputtest_valuetable $type 128 0
    } -result 0 

    test table_vput-table-2.2 {
        Test storing of trailing elements
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuetable $type 10 63 [samplerows $type 0 63]
    } -result 0 

    test table_vput-table-2.3 {
        Test storing of trailing elements
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuetable $type 10 64 [samplerows $type 0 63]
    } -result 0 

    test table_vput-table-2.4 {
        Test storing of trailing elements (default end)
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuetable $type 1
    } -result 0 

    test table_vput-table-2.5 {
        Test storing of trailing elements (specified end)
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuetable $type 20 end
    } -result 0 

    test table_vput-table-2.6 {
        Test storing of middle elements
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuetable $type 10 127
    } -result 0 

    test table_vput-table-2.7 {
        Test storing of middle elements (shared tclobj, extend length)
    } -body {
        set type {any string boolean byte double int uint wide}
        tvputtest_valuetable $type 500 400 [samplerows $type 0 450]
    } -result 0 

    test table_vput-table-3.0 {
        Test out of bound index
    } -body {
        set type {any string boolean byte double int uint wide}
        set ta [sampletable $type 0 10]
        tarray::table vput ta [sampletable $type 0 2] 12
        } -result {*index 12 out of bounds*} -returnCodes error -match glob

    test table_vput-table-3.1 {
        Test negative index
    } -body {
        set type {any string boolean byte double int uint wide}
        set ta [sampletable $type 0 10]
        tarray::table vput ta [sampletable $type 0 2] -1
    } -result {*index -1 out of bounds*} -returnCodes error -match glob

    test table_vput-table-3.2 {
        Test invalid values (table type)
    } -body {
        set type {uint byte}
        set ta [sampletable $type 0 10]
        tarray::table vput ta [sampletable {any int}] 0
    } -result {*types*are not compatible*} -returnCodes error -match glob

    test table_vput-table-3.3 {
        Test invalid values (wrong table width)
    } -body {
        set type {any string boolean byte double int uint wide}
        set ta [sampletable $type 0 10]
        tarray::table vput ta [sampletable {any string boolean byte double int uint}] 0
    } -result {*width 7 does not match*} -returnCodes error -match glob

    #
    # Verify string rep regeneration

    test table_vput-stringrep-1.0 {
        Verify string representation is updated on unshared object - bug 18
    } -body {
        set ta {tarray_table {f0 f1 f2} {{tarray_column int {99}} {tarray_column int {99}} {tarray_column int {99}}}}
        tarray::table vput ta {{0 1 2}}
        set ta
    } -result {tarray_table {f0 f1 f2} {{tarray_column int {99 0}} {tarray_column int {99 1}} {tarray_column int {99 2}}}}

    #################################################################

    # Verify -columns

    test table_vput-columnsopt-1.0 {
        Verify putting all columns using names
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set newrow {1 ninetynine 99 99.0}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {col0 col1 col2 col3} tab [list $newrow] 0
        trequal $tab $def [lreplace $init 0 0 $newrow]
    } -result 1

    test table_vput-columnsopt-1.1 {
        Verify putting range, all columns using names out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {1 col0 3 col2} tab {{ninetynine 1 99.0 99} {hundred 0 100.0 100}}  0
        trequal $tab $def [lreplace $init 0 1  {1 ninetynine 99 99.0} {0 hundred 100 100.0}]
    } -result 1

    test table_vput-columnsopt-1.2 {
        Verify growing table, all columns using names out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {1 col0 3 col2} tab {{ninetynine 1 99.0 99} {hundred 0 100.0 100}} 5
        trequal $tab $def [linsert $init end  {1 ninetynine 99 99.0} {0 hundred 100 100.0}]
    } -result 1

    test table_vput-columnsopt-1.3 {
        Verify putting empty table
    } -setup {
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def {}]
    } -body {
        tarray::table vput -columns {1 col0 3 col2} tab {{ninetynine 1 99.0 99} {hundred 0 100.0 100}} 0
        trequal $tab $def [list {1 ninetynine 99 99.0} {0 hundred 100 100.0} ]
    } -result 1

    test table_vput-columnsopt-1.4 {
        Verify putting empty table
    } -setup {
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def {}]
    } -body {
        tarray::table vput -columns {1 col0 3 col2} tab {{ninetynine 1 99.0 99} {hundred 0 100.0 100}} 0
        trequal $tab $def [list   {1 ninetynine 99 99.0} {0 hundred 100 100.0}]
    } -result 1

    test table_vput-columnsopt-1.5 {
        Verify growing table, all columns using names out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {1 col0 3 col2} tab {{ninetynine 1 99.0 99} {hundred 0 100.0 100}} end
        trequal $tab $def [linsert $init end  {1 ninetynine 99 99.0} {0 hundred 100 100.0}]
    } -result 1

    test table_vput-columnsopt-2.0 {
        Verify putting subset columns
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {col1 2} tab {{ninetynine 99}} 4
        trequal $tab $def [lreplace $init end end {0 ninetynine 99 4.0}]
    } -result 1

    test table_vput-columnsopt-2.1 {
        Verify putting subset columns unordered, discrete indices
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {3 col0} tab {{99.0 0} {100.0 1}} 1
        trequal $tab $def [lreplace $init 1 2 {0 one 1 99.0} {1 two 2 100.0}]
    } -result 1

    test table_vput-columnsopt-2.2 {
        Verify putting subset columns unordered from table, discrete indices
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {3 col0} tab [tarray::table create {f0 double f1 boolean} {{99.0 0} {100.0 1}}] 1
        trequal $tab $def [lreplace $init 1 2 {0 one 1 99.0} {1 two 2 100.0}]
    } -result 1

    test table_vput-columnsopt-3.0 {
        Verify putting non-existent column position
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {col1 5} tab {{ninetynine 99}} 4
    } -result "Column index '5' out of bounds." -returnCodes error

    test table_vput-columnsopt-3.1 {
        Verify putting non-existent column name
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {col5} tab {{ninetynine 99}} 0
    } -result "No column with name 'col5'." -returnCodes error

    test table_vput-columnsopt-3.2 {
        Verify putting duplicate column names
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {col1 col1} tab [tarray::table create {f0 any f1 any} {{ninetynine ninetynine}}] 0
    } -result "Column index '1' specified multiple times in column list." -returnCodes error

    test table_vput-columnsopt-3.3 {
        Verify putting duplicate column positions
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {0 1 0} tab {{0 astring 0}} 1
    } -result "Column index '0' specified multiple times in column list." -returnCodes error

    test table_vput-columnsopt-3.4 {
        Verify putting duplicate column positions
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {col2 col3 2} tab {{0 0 0}} end
    } -result "Column index '2' specified multiple times in column list." -returnCodes error

    test table_vput-columnsopt-3.5 {
        Verify insufficient data width
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {col0 col1 col2 col3} tab {{0 0 0}} 1
    } -result "Row or table width 3 does not match destination width 4." -returnCodes error

    test table_vput-columnsopt-3.6 {
        Verify insufficient data width
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {col0 col1 col2 col3} tab [tarray::table create {f0 boolean f1 any f2 int} { {0 0 0} }] 0
    } -result "Row or table width 3 does not match destination width 4." -returnCodes error

    test table_vput-columnsopt-3.7 {
        Verify empty column list
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {} tab {{0 0 0 0}} 0
    } -result "A column map must have at least one column specified." -returnCodes error

    test table_vput-columnsopt-3.8 {
        Verify growing table, subset columns 
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {col0 3 col2} tab {{1 99.0 99}} 5
    } -result "All columns in a table must be specified in a column map when extending the table." -returnCodes error

    test table_vput-columnsopt-3.9 {
        Verify putting negative column position
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table vput -columns {col1 -1} tab {{ninetynine 99}} 0
    } -result "Column index '-1' out of bounds." -returnCodes error


}

::tcltest::cleanupTests
