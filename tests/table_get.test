# TBD - sorted indices tarray
# column get tests

source testutil.tcl

namespace eval tarray::test {

    proc test_table_get_indexlist_astable {indexlist {types {any boolean byte double int uint wide}}} {
        set got [tarray::table get -tarray [sampletable $types] $indexlist]
        if {[trequal $got [col_def $types] [samplerows $types $indexlist]]} {
            return ""
        } else {
            return "Returned table != expected"
        }
    }

    proc test_table_get_indices_astable {indexlist {types {any boolean byte double int uint wide}}} {
        set got [tarray::table get -tarray [sampletable $types] [indexcolumn $indexlist]]
        if {[trequal $got [col_def $types] [samplerows $types $indexlist]]} {
            return ""
        } else {
            return "Returned table != expected"
        }
    }

    proc test_table_get_indexlist_aslist {indexlist {types {any boolean byte double int uint wide}}} {
        set got [tarray::table get -list [sampletable $types] $indexlist]
        if {[llequal $types [samplerows $types $indexlist] $got]} {
            return ""
        } else {
            return "Returned list != expected"
        }
    }

    proc test_table_get_indices_aslist {indexlist {types {any boolean byte double int uint wide}}} {
        set got [tarray::table get -list [sampletable $types] [indexcolumn $indexlist]]
        if {[llequal $types [samplerows $types $indexlist] $got]} {
            return ""
        } else {
            return "Returned list != expected"
        }
    }


    # Tests values passed as list returned as a list
    proc test_table_get_indexlist_asdict {indexlist {types {any boolean byte double int uint wide}}} {
        set result [tarray::table get -dict [sampletable $types] $indexlist]
        set expected_rows [samplerows $types $indexlist]
        # Dictionary key is index, row is value
        set rows {}
        foreach index $indexlist {
            lappend rows [dict get $result $index]
        }
        
        if {[llequal $types $rows $expected_rows]} {
            return ""
        } else {
            return "Returned dict != expected"
        }
    }

    # Tests values passed as list returned as a list
    proc test_table_get_indices_asdict {indexlist {types {any boolean byte double int uint wide}}} {
        set result [tarray::table get -dict [sampletable $types] [indexcolumn $indexlist]]
        set expected_rows [samplerows $types $indexlist]
        # Dictionary key is index, row is value
        set rows {}
        foreach index $indexlist {
            lappend rows [dict get $result $index]
        }
        
        if {[llequal $types $rows $expected_rows]} {
            return ""
        } else {
            return "Returned dict != expected"
        }
    }

    ################################################################
    # Tests

    #
    # table get indexlist

    test table_get-indexlist-astable-1.0 {
        Get an empty index list from empty array
    } -body {
        tarray::table get [newtable {}] {}
    } -result [trep {}]

    test table_get-indexlist-astable-1.1 {
        Get the first element in empty array
    } -body {
        tarray::table get [newtable {}] {0}
    } -returnCodes error -result "*index 0 out of bounds" -match glob

    test table_get-indexlist-astable-1.2 {
        Get an empty index list from empty array
    } -body {
        tarray::table get [newtable {int boolean any}] {}
    } -result [trep [list [crep int] [crep boolean] [crep any]]]

    test table_get-indexlist-astable-1.3 {
        Get the first element in empty array
    } -body {
        tarray::table get [newtable {uint boolean any wide}] {0}
    } -returnCodes error -result "*index 0 out of bounds" -match glob

    test table_get-indexlist-astable-2.0 {
        Get the first element
    } -body { test_table_get_indexlist_astable {0} }

    test table_get-indexlist-astable-2.1 {
        Get empty indexlist
    } -body { test_table_get_indexlist_astable {} }
    
    test table_get-indexlist-astable-2.2 {
        Get first and last 
    } -body {
        test_table_get_indexlist_astable [list 0 [expr {[samplesize]-1}]]
    }

    test table_get-indexlist-astable-2.3 {
        Get ordered indexlist
    } -body { test_table_get_indexlist_astable {3 4 50 150} }

    test table_get-indexlist-astable-2.4 {
        Get reverse ordered indexlist
    } -body { test_table_get_indexlist_astable {100 65 30} }

    test table_get-indexlist-astable-2.5 {
        Get random ordered indexlist
    } -body { test_table_get_indexlist_astable {10 0 77 65 82} }

    test table_get-indexlist-astable-2.6 {
        Get indexlist with duplicates
    } -body { test_table_get_indexlist_astable {10 0 77 65 82 77 10} }

    test table_get-indexlist-astable-3.0 {
        Get the end element
    } -body {
        test_table_get_indexlist_astable {0 end}
    } -returnCodes error -result "*expected integer*" -match glob

    test table_get-indexlist-astable-3.1 {
        Get negative index
    } -body {
        test_table_get_indexlist_astable {0 -1}
    } -returnCodes error -result "*out of bounds*" -match glob

    test table_get-indexlist-astable-3.2 {
        Get out of bounds index
    } -body {
        test_table_get_indexlist_astable [list [samplesize]]
    } -returnCodes error -result "*out of bounds*" -match glob

    test table_get-indexlist-astable-4.0 {
        Get indexlist verify -tarray is default 
    } -body {
        tarray::table get -tarray [newtable {int any} {{0 a} {1 b}}] {1 0}
    } -result [trep [list [crep int {1 0}] [crep any {b a}]]]


    # get -list indexlist

    test table_get-indexlist-aslist-1.0 {
        Get an empty index list from empty array
    } -body { tarray::table get -list [newtable {}] {} }

    test table_get-indexlist-aslist-1.1 {
        Get the first element in empty array
    } -body {
        tarray::table get -list [newtable {} {}] {0}
    } -returnCodes error -result "*index 0 out of bounds" -match glob

    test table_get-indexlist-aslist-1.2 {
        Get an empty index list from empty array
    } -body { tarray::table get -list [newtable {any boolean}] {} }

    test table_get-indexlist-aslist-1.3 {
        Get the first element in empty array
    } -body {
        tarray::table get -list [newtable {int wide} {}] {0}
    } -returnCodes error -result "*index 0 out of bounds" -match glob

    test table_get-indexlist-aslist-2.0 {
        Get the first element
    } -body { test_table_get_indexlist_aslist {0} }

    test table_get-indexlist-aslist-2.1 {
        Get empty indexlist
    } -body { test_table_get_indexlist_aslist {} }

    test table_get-indexlist-aslist-2.2 {
        Get first and last 
    } -body {
        test_table_get_indexlist_aslist [list 0 [expr {[samplesize]-1}]]
    }

    test table_get-indexlist-aslist-2.3 {
        Get ordered indexlist
    } -body { test_table_get_indexlist_aslist {3 4 50 150} }

    test table_get-indexlist-aslist-2.4 {
        Get reverse ordered indexlist
    } -body { test_table_get_indexlist_aslist {100 65 30} }

    test table_get-indexlist-aslist-2.5 {
        Get random ordered indexlist
    } -body { test_table_get_indexlist_aslist {10 0 77 65 82} }

    test table_get-indexlist-aslist-2.6 {
        Get indexlist with duplicates
    } -body { test_table_get_indexlist_aslist {10 0 77 65 82 77 10} }

    test table_get-indexlist-aslist-3.0 {
        Get the end element
    } -body {
        test_table_get_indexlist_aslist {0 end}
    } -returnCodes error -result "*expected integer*" -match glob

    test table_get-indexlist-aslist-3.1 {
        Get negative index
    } -body {
        test_table_get_indexlist_aslist {0 -1}
    } -returnCodes error -result "*out of bounds*" -match glob

    test table_get-indexlist-aslist-3.2 {
        Get out of bounds index
    } -body {
        test_table_get_indexlist_aslist [list [samplesize]]
    } -returnCodes error -result "*out of bounds*" -match glob

    #
    # get -dict indexlist

    test table_get-indexlist-asdict-1.0 {
        Get an empty index list from empty array
    } -body { tarray::table get -dict [newtable {}] {} }

    test table_get-indexlist-asdict-1.1 {
        Get the first element in empty array
    } -body {
        tarray::table get -dict [newtable {}] {0}
    } -returnCodes error -result "*index 0 out of bounds" -match glob

    test table_get-indexlist-asdict-2.0 {
        Get the first element
    } -body { test_table_get_indexlist_asdict 0 }

    test table_get-indexlist-asdict-2.1 {
        Get empty indexlist
    } -body { test_table_get_indexlist_asdict {} }

    test table_get-indexlist-asdict-2.2 {
        Get first and last 
    } -body { test_table_get_indexlist_asdict [list 0 [expr {[samplesize]-1}]] }

    test table_get-indexlist-asdict-2.3 {
        Get ordered indexlist
    } -body { test_table_get_indexlist_asdict {3 4 50 150} }

    test table_get-indexlist-asdict-2.4 {
        Get reverse ordered indexlist
    } -body { test_table_get_indexlist_asdict {100 65 30} }

    test table_get-indexlist-asdict-2.5 {
        Get random ordered indexlist
    } -body { test_table_get_indexlist_asdict {10 0 77 65 82} }

    test table_get-indexlist-asdict-2.6 {
        Get indexlist with duplicates
    } -body { test_table_get_indexlist_asdict {10 0 77 65 82 77 10} }

    test table_get-indexlist-asdict-3.0 {
        Get the end element
    } -body {
        test_table_get_indexlist_asdict {0 end}
    } -returnCodes error -result "*expected integer*" -match glob

    test table_get-indexlist-asdict-3.1 {
        Get negative index
    } -body {
        test_table_get_indexlist_asdict {0 -1}
    } -returnCodes error -result "*out of bounds*" -match glob

    test table_get-indexlist-asdict-3.2 {
        Get out of bounds index
    } -body {
        test_table_get_indexlist_asdict [list [samplesize]]
    } -returnCodes error -result "*out of bounds*" -match glob

    # table get indicesarray

    test table_get-indices-astable-1.0 {
        Get an empty index list from empty array
    } -body {
        tarray::table get [newtable {int boolean any}] [indexcolumn {}]
    } -result [trep [list [crep int] [crep boolean] [crep any]]]

    test table_get-indices-astable-1.1 {
        Get the first element in empty array
    } -body {
        tarray::table get [newtable {boolean uint any wide}] [indexcolumn 0]
    } -returnCodes error -result "*index 0 out of bounds" -match glob

    test table_get-indices-astable-2.0 {
        Get the first element
    } -body { test_table_get_indices_astable {0} }

    test table_get-indices-astable-2.1 {
        Get empty indices
    } -body { test_table_get_indices_astable {} }

    test table_get-indices-astable-2.2 {
        Get first and last 
    } -body {
        test_table_get_indices_astable [list 0 [expr {[samplesize]-1}]]
    }

    test table_get-indices-astable-2.3 {
        Get ordered indices
    } -body { test_table_get_indices_astable {3 4 50 150} }

    test table_get-indices-astable-2.4 {
        Get reverse ordered indices
    } -body { test_table_get_indices_astable {100 65 30} }

    test table_get-indices-astable-2.5 {
        Get random ordered indices
    } -body { test_table_get_indices_astable {10 0 77 65 82} }

    test table_get-indices-astable-2.6 {
        Get indices with duplicates
    } -body { test_table_get_indices_astable  {10 0 77 65 82 77 10} }

    test table_get-indices-astable-3.0 {
        Get negative index
    } -body {
        test_table_get_indices_astable {0 -1}
    } -returnCodes error -result "*out of bounds*" -match glob

    test table_get-indices-astable-3.1 {
        Get out of bounds index
    } -body {
        test_table_get_indices_astable [list [samplesize]]
    } -returnCodes error -result "*out of bounds*" -match glob

    test table_get-indices-astable-4.0 {
        Get indices verify -tarray is default 
    } -body {
        tarray::table get -tarray [newtable {int any} {{0 a} {1 b}}]  {1 0}
    } -result [trep [list [crep int {1 0}] [crep any {b a}]]]


    # get -list indices

    test table_get-indices-aslist-1.0 {
        Get an empty index list from empty array
    } -body { tarray::table get -list [newtable {any boolean}] [indexcolumn {}] }

    test table_get-indices-aslist-1.1 {
        Get the first element in empty array
    } -body {
        tarray::table get -list [newtable {int wide} {}] [indexcolumn 0]
    } -returnCodes error -result "*index 0 out of bounds" -match glob

    test table_get-indices-aslist-2.0 {
        Get the first element
    } -body { test_table_get_indices_aslist {0} }

    test table_get-indices-aslist-2.1 {
        Get empty indices
    } -body { test_table_get_indices_aslist {} }

    test table_get-indices-aslist-2.2 {
        Get first and last 
    } -body {
        test_table_get_indices_aslist [list 0 [expr {[samplesize]-1}]]
    }

    test table_get-indices-aslist-2.3 {
        Get ordered indices
    } -body { test_table_get_indices_aslist {3 4 50 150} }

    test table_get-indices-aslist-2.4 {
        Get reverse ordered indices
    } -body { test_table_get_indices_aslist  {100 65 30} }

    test table_get-indices-aslist-2.5 {
        Get random ordered indices
    } -body { test_table_get_indices_aslist {10 0 77 65 82} }

    test table_get-indices-aslist-2.6 {
        Get indices with duplicates
    } -body { test_table_get_indices_aslist {10 0 77 65 82 77 10} }

    test table_get-indices-aslist-3.0 {
        Get negative index
    } -body {
        test_table_get_indices_aslist {0 -1}
    } -returnCodes error -result "*out of bounds*" -match glob

    test table_get-indices-aslist-3.1 {
        Get out of bounds index
    } -body {
        test_table_get_indices_aslist [list [samplesize]]
    } -returnCodes error -result "*out of bounds*" -match glob

    #
    # get -dict indices

    test table_get-indices-asdict-1.0 {
        Get an empty index list from empty array
    } -body { tarray::table get -dict [newtable {}] [indexcolumn {}] }

    test table_get-indices-asdict-1.1 {
        Get the first element in empty array
    } -body {
        tarray::table get -dict [newtable {}] [indexcolumn 0]
    } -returnCodes error -result "*index 0 out of bounds" -match glob

    test table_get-indices-asdict-2.0 {
        Get the first element
    } -body { test_table_get_indices_asdict {0} }

    test table_get-indices-asdict-2.1 {
        Get empty indices
    } -body { test_table_get_indices_asdict {} }

    test table_get-indices-asdict-2.2 {
        Get first and last 
    } -body { test_table_get_indices_asdict [list 0 [expr {[samplesize]-1}]] }

    test table_get-indices-asdict-2.3 {
        Get ordered indices
    } -body { test_table_get_indices_asdict  {3 4 50 150} }

    test table_get-indices-asdict-2.4 {
        Get reverse ordered indices
    } -body { test_table_get_indices_asdict {100 65 30} }

    test table_get-indices-asdict-2.5 {
        Get random ordered indices
    } -body { test_table_get_indices_asdict {10 0 77 65 82} }

    test table_get-indices-asdict-2.6 {
        Get indices with duplicates
    } -body { test_table_get_indices_asdict {10 0 77 65 82 77 10} }

    test table_get-indices-asdict-3.0 {
        Get negative index
    } -body {
        test_table_get_indices_asdict {0 -1}
    } -returnCodes error -result "*out of bounds*" -match glob

    test table_get-indices-asdict-3.1 {
        Get out of bounds index
    } -body {
        test_table_get_indices_asdict [list [samplesize]]
    } -returnCodes error -result "*out of bounds*" -match glob

    #################################################################

    # Verify -columns

    test table_get-columnsopt-1.0 {
        Verify getting all columns using names
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]        
    } -body {
        trequal [tarray::table get -columns {col0 col1 col2 col3} $tab {0 1 2 3 4}] $def $init
    } -result 1

    test table_get-columnsopt-1.1 {
        Verify getting all columns out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        trequal [tarray::table get -columns {2 col0 col1 3} $tab {3 1}] {col2 int col0 boolean col1 any col3 double} {{3 1 three 3.0} {1 1 one 1.0}}
    } -result 1

    test table_get-columnsopt-1.2 {
        Verify getting all columns out of order as list
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table get -list -columns {2 col0 col1 3} $tab {3 1}
    } -result {{3 1 three 3.0} {1 1 one 1.0}}

    test table_get-columnsopt-2.0 {
        Verify getting subset of columns
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        trequal [tarray::table get -columns {col0 2} $tab {3 1}] {col0 boolean col2 int} {{1 3} {1 1}}
    } -result 1

    test table_get-columnsopt-2.1 {
        Verify getting subset of columns out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        trequal [tarray::table get -columns {col3 1} $tab {4}] {col3 double col1 any} {{4.0 four}}
    } -result 1

    test table_get-columnsopt-2.2 {
        Verify getting subset of columns out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        llequal {double any} [tarray::table get -list -columns {col3 1} $tab {4}] {{4.0 four}}
    } -result 1

    test table_get-columnsopt-2.3 {
        Verify getting subset of columns out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table get -dict -columns {col3 1} $tab {4 0}
    } -result {4 {4.0 four} 0 {0.0 zero}}

    test table_get-columnsopt-3.0 {
        Verify getting non-existent column position
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table get -columns {col3 5} $tab {4}
    } -result "Column index '5' out of bounds." -returnCodes error

    test table_get-columnsopt-3.1 {
        Verify getting non-existent column position
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table get -columns {col3 col5} $tab {4}
    } -result "No column with name 'col5'." -returnCodes error

    test table_get-columnsopt-3.2 {
        Verify getting duplicate columns
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table get -columns {0 1 0} $tab {1 4}
    } -result "Column index '0' specified multiple times in column list." -returnCodes error

    test table_get-columnsopt-3.3 {
        Verify getting duplicate columns
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table get -columns {col2 col2} $tab {1}
    } -result "Column index '2' specified multiple times in column list." -returnCodes error

    test table_get-columnsopt-3.4 {
        Verify getting duplicate columns
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table get -columns {col2 col0 2} $tab {1 3}
    } -result "Column index '2' specified multiple times in column list." -returnCodes error

    test table_get-columnsopt-3.5 {
        Verify getting empty column list
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table get -columns {} $tab {1 3}
    } -result "A column map must have at least one column specified." -returnCodes error

    test table_get-columnsopt-3.6 {
        Verify getting negative column position
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table get -columns {-1} $tab {1 3}
    } -result "Column index '-1' out of bounds." -returnCodes error


}

::tcltest::cleanupTests
