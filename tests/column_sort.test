# column size tests

source testutil.tcl

namespace eval tarray::test {

    # args is any combination of -nocase, -increasing, -decreasing
    proc sort_verify_shared {type args} {
        set l [lshuffle [samplerange $type]]
        return [col_change_and_verify $type $l [lsort [lsort_cmp $type] {*}$args $l] [linsert $args 0 sort]]
    }

    # args is any combination of -nocase, -increasing, -decreasing
    proc sort_verify_unshared {type args} {
        set l [lshuffle [samplerange $type]]
        if {[clequal [tarray::column {*}[linsert $args 0 sort] [tarray::column create $type $l]] $type [lsort [lsort_cmp $type] {*}$args $l]]} {
            return 0
        } else {
            return 1
        }
    }

    # args is any combination of -nocase, -increasing, -decreasing
    proc sort_verify_indices {type args} {
        set l [lshuffle [samplerange $type]]
        if {[clequal [tarray::column {*}[linsert $args 0 sort -indices] [tarray::column create $type $l]] int [lsort [lsort_cmp $type] -indices {*}$args $l]]} {
            return 0
        } else {
            return 1
        }
    }

    # Verify that presorted tarrays are sorted correctly
    proc sort_verify_presorted {type presort_args args} {
        set l [lshuffle [samplerange $type]]
        set ta [tarray::column create $type $l]

        lassign [time {set sorted_ta [tarray::column sort {*}$presort_args $ta]}] unsorted_time

        lassign [time {set resorted_ta [tarray::column sort {*}$args $sorted_ta]}] presorted_time
        set lsort_op [lsort_cmp $type]
        set l [lsort $lsort_op {*}$args [lsort $lsort_op {*}$presort_args $l]]
        if {[clequal $resorted_ta $type $l]} {
            if {[llength $l] > 100} {
                # For Booleans not much difference in time */
                if {$type ne "boolean"} {
                    if {$unsorted_time < ($presorted_time * 5)} {
                        puts "Presorted time (type $type, length [llength $l]) $presorted_time not much smaller than unsorted time $unsorted_time"
                    }
                } else {
                    if {$unsorted_time < $presorted_time} {
                        puts "Presorted time (type $type, length [llength $l]) $presorted_time greater than unsorted time $unsorted_time"
                    }
                }
            }
            return 0
        } else {
            return 1
        }
    }

    # Verify that presorted tarrays are sorted correctly (indices)
    proc sort_verify_indices_presorted {type presort_args args} {
        set l [lsort [lsort_cmp $type] {*}$presort_args [samplerange $type]]
        set ta [tarray::column create $type $l]
        set sorted_ta [tarray::column sort {*}$presort_args $ta]

        set indices [tarray::column sort -indices {*}$args $sorted_ta]
        if {[clequal $indices int [lsort -indices [lsort_cmp $type] {*}$args $l]]} {
            return 0
        } else {
            #puts $indices
            #puts [lsort -indices [lsort_cmp $type] {*}$args $l]
            return 1
        }
    }


    foreach type {boolean any byte double int uint wide} {
        test column_sort-$type-1.0 {
            Sort empty column (unshared)
        } -body {
            tarray::column sort [newcolumn $type]
        } -result [crep $type {}] -match column

        test column_sort-$type-1.1 {
            Sort empty column (shared)
        } -body {
            col_change_and_verify $type {} {} sort
        } -result 0

        test column_sort-$type-1.2 {
            Sort empty column -indices (unshared)
        } -body {
            tarray::column sort -indices [newcolumn $type]
        } -result [crep int {}] -match column

        test column_sort-$type-1.3 {
            Sort empty column -indices (shared)
        } -body {
            set ta [newcolumn $type]
            tarray::column sort -indices $ta
        } -result [crep int {}] -match column

        test column_sort-$type-1.4 {
            Sort empty column -increasing (unshared)
        } -body {
            tarray::column sort -increasing [newcolumn $type]
        } -result [crep $type {}] -match column

        test column_sort-$type-1.5 {
            Sort empty column -decreasing (shared)
        } -body {
            col_change_and_verify $type {} {} {sort -decreasing}
        } -result 0

        test column_sort-$type-2.0 {
            Sort column (shared)
        } -body {
            sort_verify_shared $type
        } -result 0

        test column_sort-$type-2.1 {
            Sort column (unshared)
        } -body {
            sort_verify_unshared $type
        } -result 0

        test column_sort-$type-2.2 {
            Sort column -indices
        } -body {
            sort_verify_indices $type
        } -result 0

        test column_sort-$type-3.0 {
            Sort column (shared) -increasing
        } -body {
            sort_verify_shared $type -increasing
        } -result 0

        test column_sort-$type-3.1 {
            Sort column (unshared) -increasing
        } -body {
            sort_verify_unshared $type -increasing
        } -result 0

        test column_sort-$type-3.2 {
            Sort column -increasing -indices
        } -body {
            sort_verify_indices $type -increasing -indices
        } -result 0

        test column_sort-$type-4.0 {
            Sort column (shared) -decreasing
        } -body {
            sort_verify_shared $type -decreasing
        } -result 0

        test column_sort-$type-4.1 {
            Sort column (unshared) -decreasing
        } -body {
            sort_verify_unshared $type -decreasing
        } -result 0

        test column_sort-$type-4.2 {
            Sort column -decreasing -indices
        } -body {
            sort_verify_indices $type -decreasing -indices
        } -result 0

        test column_sort-$type-5.0 {
            Sort presorted column -increasing -increasing
        } -body {
            sort_verify_presorted $type -increasing -increasing
        } -result 0

        test column_sort-$type-5.1 {
            Sort presorted column -increasing -decreasing
        } -body {
            sort_verify_presorted $type -increasing -decreasing
        } -result 0

        test column_sort-$type-5.2 {
            Sort presorted column -decreasing -decreasing
        } -body {
            sort_verify_presorted $type -decreasing -decreasing
        } -result 0

        test column_sort-$type-5.3 {
            Sort presorted column -decreasing -increasing 
        } -body {
            sort_verify_presorted $type -decreasing -increasing
        } -result 0

        test column_sort-$type-5.4 {
            Sort presorted column -indices -increasing -increasing
        } -body {
            sort_verify_indices_presorted $type -increasing -increasing
        } -result 0

        test column_sort-$type-5.5 {
            Sort presorted column -indices -increasing -decreasing
        } -body {
            sort_verify_indices_presorted $type -increasing -decreasing
        } -result 0

        test column_sort-$type-5.6 {
            Sort presorted column -indices -decreasing -decreasing
        } -body {
            sort_verify_indices_presorted $type -decreasing -decreasing
        } -result 0

        test column_sort-$type-5.7 {
            Sort presorted column -indices -decreasing -increasing
        } -body {
            sort_verify_indices_presorted $type -decreasing -increasing
        } -result 0

        # The following specific test triggered a bug in timsort because
        # it was doing memcpy instead of memmove in overlapping buffers
        # (only triggered on Linux amd64 with gcc 4.4, Windows worked
        # fine)
        if {$type ne "any"} {
            test column_sort-$type-6.0 {
                Verify memcpy bug fixed
            } -body {
                tarray::column sort -decreasing [tarray::column create $type {25 16 30 5 28 27 9 13 23 26 2 29 3 11 17 7 0 21 19 24 4 8 22 12 10 18 15 20 14 6 1 31}]
            } -result [crep $type {31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0}] -match column
        }
    }

    #
    # -nocase tests

    # Although the remaining tests 2.0 onward include mixed case in sample
    # data, explicitly test just to make sure
    test column_sort-nocase-1.0 {
        Sort column
    } -body {
        tarray::column sort [tarray::column create any {abc Abc def dEg _}]
    } -result [crep any {Abc _ abc dEg def}] -match column

    test column_sort-nocase-1.1 {
        Sort column -nocase
    } -body {
        tarray::column sort -nocase [tarray::column create any {abc Abc def dEg _}]
    } -result [crep any {_ abc Abc def dEg}] -match column

    test column_sort-nocase-1.2 {
        Sort column -decreasing
    } -body {
        tarray::column sort -decreasing [tarray::column create any {abc Abc def dEg _}]
    } -result [crep any {def dEg abc _ Abc}] -match column

    test column_sort-nocase-1.3 {
        Sort column -decreasing
    } -body {
        tarray::column sort -nocase -decreasing [tarray::column create any {abc Abc def dEg _}]
    } -result [crep any {dEg def abc Abc _}] -match column

    test column_sort-nocase-1.4 {
        Sort column -increasing
    } -body {
        tarray::column sort -increasing [tarray::column create any {abc Abc def dEg _}]
    } -result [crep any {Abc _ abc dEg def}] -match column

    test column_sort-nocase-1.5 {
        Sort column -nocase -increasing
    } -body {
        tarray::column sort -nocase -increasing [tarray::column create any {abc Abc def dEg _}]
    } -result [crep any {_ abc Abc def dEg}] -match column

    test column_sort-nocase-1.6 {
        Sort column -decreasing -indices -nocase
    } -body {
        tarray::column sort -nocase -decreasing -indices [tarray::column create any {abc Abc def dEg _}]
    } -result [crep int {3 2 0 1 4}] -match column

    test column_sort-nocase-1.7 {
        Sort column -nocase -increasing -indices
    } -body {
        tarray::column sort -indices -nocase -increasing [tarray::column create any {abc Abc def dEg _}]
    } -result [crep int {4 0 1 2 3}] -match column

    test column_sort-nocase-2.0 {
        Sort column (shared)
    } -body {
        sort_verify_shared any -nocase
    } -result 0

    test column_sort-nocase-2.1 {
        Sort column (unshared)
    } -body {
        sort_verify_unshared any -nocase
    } -result 0

    test column_sort-nocase-2.2 {
        Sort column -indices
    } -body {
        sort_verify_indices any -nocase
    } -result 0

    test column_sort-nocase-3.0 {
        Sort column (shared) -increasing -nocase
    } -body {
        sort_verify_shared any -increasing -nocase
    } -result 0

    test column_sort-nocase-3.1 {
        Sort column (unshared) -increasing -nocase
    } -body {
        sort_verify_unshared any -increasing -nocase
    } -result 0

    test column_sort-nocase-3.2 {
        Sort column -increasing -indices -nocase
    } -body {
        sort_verify_indices any -increasing -indices -nocase
    } -result 0

    test column_sort-nocase-4.0 {
        Sort column (shared) -decreasing -nocase
    } -body {
        sort_verify_shared any -decreasing -nocase
    } -result 0

    test column_sort-nocase-4.1 {
        Sort column (unshared) -decreasing -nocase
    } -body {
        sort_verify_unshared any -decreasing -nocase
    } -result 0

    test column_sort-nocase-4.2 {
        Sort column -decreasing -indices -nocase
    } -body {
        sort_verify_indices any -decreasing -indices -nocase
    } -result 0

    test column_sort-nocase-5.0 {
        Sort presorted column -increasing -increasing -nocase
    } -body {
        sort_verify_presorted any  -increasing -increasing -nocase
    } -result 0

    test column_sort-nocase-5.1 {
        Sort presorted column -increasing -decreasing -nocase
    } -body {
        sort_verify_presorted any -increasing -decreasing -nocase
    } -result 0

    test column_sort-nocase-5.2 {
        Sort presorted column -decreasing -decreasing -nocase
    } -body {
        sort_verify_presorted any -decreasing -decreasing -nocase
    } -result 0

    test column_sort-nocase-5.3 {
        Sort presorted column -decreasing -increasing  -nocase
    } -body {
        sort_verify_presorted any -decreasing -increasing -nocase
    } -result 0

    test column_sort-nocase-5.4 {
        Sort presorted column -indices -increasing -increasing -nocase
    } -body {
        sort_verify_indices_presorted any -increasing -increasing -nocase
    } -result 0

    test column_sort-nocase-5.5 {
        Sort presorted column -indices -increasing -decreasing -nocase
    } -body {
        sort_verify_indices_presorted any -increasing -decreasing -nocase
    } -result 0

    test column_sort-nocase-5.6 {
        Sort presorted column -indices -decreasing -decreasing -nocase
    } -body {
        sort_verify_indices_presorted any -decreasing -decreasing -nocase
    } -result 0

    test column_sort-nocase-5.7 {
        Sort presorted column -indices -decreasing -increasing -nocase
    } -body {
        sort_verify_indices_presorted any -decreasing -increasing -nocase
    } -result 0


}

::tcltest::cleanupTests
