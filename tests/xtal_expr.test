# xtal expression tests

source testutil.tcl

namespace eval tarray::test {

    # Tests that an xtal basic expression yields the same result or error
    # as Tcl's expr command when all operands are constants
    proc testconstexpr {expr} {
        set ecode [catch {expr $expr} eresult]
        set xcode [catch {xtal::xtal $expr} xresult]
        if {$ecode != $xcode || $eresult != $xresult} {
            return "<$expr> failed"
        }
        # Verify constant folding works
        if {$xcode == 0} {
            if {[xtal::translate $expr] ne "return -level 0 $eresult\n"} {
                return "<$expr> constant folding failed"
            }
        }
        return
    }

    # Tests that an xtal basic expression yields the same result or error
    # as Tcl's expr command
    proc testexpr {xtal_expr values} {
        dict with values {}
        set expr [regsub -all {[_[:alpha:]]+} $xtal_expr \$\\0]
        set ecode [catch {expr $expr} eresult]
        set xcode [catch {xtal::xtal $xtal_expr} xresult]
        if {$ecode != $xcode || $eresult != $xresult} {
            return "<$expr> failed"
        }
        return
    }
    
    # Tests that an xtal basic assignment yields the same result or error
    # as Tcl's expr command
    proc testexprassign {xtal_expr values} {
        dict with values {}
        set expr [regsub -all {[_[:alpha:]]+} $xtal_expr \$\\0]
        set ecode [catch {expr $expr} eresult]
        set xcode [catch {xtal::xtal "x = $xtal_expr"} xresult]
        if {$xcode} {
            if {$ecode == 0 || $eresult != $xresult} {
                return "<$expr> failed"
            }
        } else {
            if {$ecode || $eresult != $xresult || $x != $eresult} {
                return "<$expr> failed"
            }
        }
        return
    }
    
    set testnum 0
    # TBD - floating point using exponent format
    set values {
        int_max 0x7fffffff int_min -2147483648
        zero 0 one 1 two 2 three 3 four 4 minusone -1 minustwo -2
        dzero 0.0 done_one 1.1 dtwo_two 2.2 dthree_three 3.3 dfour_four 4.4 dminusone_one -1.1 dminustwo_two -2.2
        mask_ones 0xffffffff mask_a 0xaaaaaaaa
        wide_int 0x100000000 wide_max 0x7fffffffffffffff wide_min -9223372036854775808 
    }

    ### Test unary ops
    set testnum 0
    foreach {expression desc} {
        one            "Simple value"
        
        -one           "Unary minus"
        "+ two"        "Unary plus"
        "- minusone"   "Unary minus of negative"
        +minusone      "Unary plus of negative"
        --two          "Unary minus minus"
        ++two          "Unary plus plus"
        --minustwo     "Unary minus minus of negative"
        "+ + minustwo" "Unary plus plus of negative"
        -+two          "Unary minus plus"
        +-two          "Unary plus minus"
        -+minustwo     "Unary minus plus of negative"
        " +- minustwo" "Unary plus minus of negative"
        ---two         "Unary minus minus minus"
        +++two         "Unary plus plus plus"
        -int_max       "Unary minus max int"
        -int_min       "Unary minus min int"

        !zero          "Boolean negate"
        "! one"        "Boolean negate"
        "! ! zero"     "Boolean double negate with spaces"
        !!two          "Boolean double negate of integer"
        !minusone      "Boolean double negate of negative number"
        !!!zero        "Boolean triple negate"
        !dzero         "Boolean negate of double"
        !!done_one     "Boolean double negate of double"
        
        ~zero          "Complement 0"
        "~ one"        "Complement 1"
        "~ ~ zero"     "Double complement"
        ~mask_ones     "Complement all 1's"
        ~mask_a        "Complement alternating 1's"
        ~minusone      "Complement negative number"
        ~dzero         "Complement double (fail)"

        -!zero         "Unary combination -!"
        !-one          "Unary combination !-"
        -!~mask_ones   "Unary combination -!~"
        -+!zero         "Unary combination -+!"
        
    } {
        test xtal-unop-1.$testnum "$desc - $expression" -body [list testexpr $expression $values]
        test xtal-unop-assign-1.$testnum "$desc - $expression" -body [list testexprassign $expression $values]
        set constexpr [string map $values $expression]
        test xtal-constunop-1.$testnum $constexpr -body [list testconstexpr $constexpr]
        incr testnum
    }

    #
    # Test binary operators
    set testnum 0
    foreach {expression desc} {
        oneOPone        "Binary OP"
        twoOPminusone   "Binary OP unary"
        twoOP-2         "Binary OP unary constant"
        "minusone OP - 2"   "Binary OP unary constant"
 
        "int_max OP 1"            "Binary OP int_max"
        "int_max  OP  -1"         "Binary OP int_max"
        "int_max OP int_min"      "Binary OP int_max"
        "int_max OP int_max"      "Binary OP int_max"
        "one OP zero"             "Binary OP with zero"
        "mask_a OP zero"          "Binary OP with zero"
        "mask_ones OP zero"       "Binary OP with zero"
        "mask_a OP one"           "Binary OP with zero"
        "mask_ones OP one"        "Binary OP with zero"

        done_oneOPdone_one        "Binary OP"
        dtwo_twoOPdminusone_one   "Binary OP unary"
        dtwo_twoOP-2              "Binary OP unary constant"
        "dminusone_one OP - 2"    "Binary OP unary constant"
        done_oneOP0               "Binary OP with zero"
        
        wide_intOPwide_int      "Binary OP"
        "wide_int OP wide_min"  "Binary OP unary"
        wide_maxOP-2            "Binary OP unary constant"
        "wide_min OP - + - 2"   "Binary OP unary constant"
        "-2 OP wide_max"        "Binary OP unary constant"
        wide_intOP0             "Binary OP with zero"
    } {
        foreach op {+ - * / & | ^ && || == != <= >= < >} {
            set expression [string map [list OP $op] $expression]
            set desc [string map [list OP $op] $desc]
            test xtal-binop-1.$testnum "$desc - $expression" -body [list testexpr $expression $values]
            test xtal-binop-assign-1.$testnum "$desc - $expression" -body [list testexprassign $expression $values]
            set constexpr [string map $values $expression]
            test xtal-constbinop-1.$testnum $constexpr -body [list testconstexpr $constexpr]
            incr testnum
        }
    }

    # TBD - test strings including glob and regexp and nocase

    # TBD - test invalid ops (eg. regexp with ints)


    
    #
    # Test operator associativity
    foreach {expression desc} {
        {four-two+two} "+- Left associativity"
        {four-two-two} "- Left associativity"
        {one+two*four} "+* Operator precedence"
        {one||zero&&zero} "Logical operator precedence"
    } {
        test xtal-assoc-1.$testnum "$desc - $expression" -body [list testexpr $expression $values]
        set constexpr [string map $values $expression]
        test xtal-constassoc-1.$testnum $constexpr -body [list testconstexpr $constexpr]
        incr testnum
    }
}

if {0} {
    namespace path [list tarray xtal]
    proc xtal::testconstexpr {expr desc} {
        set t [xtal $expr]
        set e [expr $expr]
        if {$t != $e} {
            puts stderr "$desc failed for <$expr>. $t != $e"
        }
    }
    catch {tp destroy}
    catch {tc destroy}
    if {1} {
        xtal::Parser create tp $::xtal::_use_oo_parser
        xtal::Compiler create tc $::xtal::_use_oo_parser
        set I [column create int {10 20 30 40 50}]
        set J [column create int {100 200 300 400 500}]
        set T [table create {i int s string} {{10 ten} {20 twenty} {30 thirty}}]
    }
    if {1} {
        catch {table slice $T $T};  # Caused crash due to shimmering, now should return error
        proc getI {} {return $::I}
        xtal::xtal {I[@@ < 30]}
        xtal::xtal {I.20}
        xtal::xtal {I. "10"}
        xtal::xtal {I[I < 30]}
        xtal::xtal {getI()[@@ > 30]}
        set x i
        xtal::xtal {T[T.i < 35]}
        xtal::xtal {T[T.$x < 45]}
        xtal::xtal {T.(i,s)[@@.i > 40]}
        xtal::xtal {K[0:] = I[0:]}
        xtal::xtal {K[0:1] = J[0:1]}
        xtal::xtal {K[2:4] = 99}
        xtal::xtal {K[1:] = 999}
        xtal::xtal {K[{3,4}] = I[{4,3}]}
        xtal::xtal {T.i[0:1] = I[3:4]}
        xtal::xtal {T.(s,i)}
        xtal::xtal {T.s. thirty}
        xtal::xtal {T.s. "thirty"}
        xtal::xtal {T.i[@@ < 40] = 33}
        xtal::xtal {T.s[T.i == 33] = "thirty-three"}
        set col s
        xtal::xtal {T.$col[0:1] = 'abc}
        xtal::xtal {T.$col[1:] = 'def}
        xtal::xtal {% I}
        xtal::xtal {% {1,2,3}}

        namespace eval xtal {
            testconstexpr {4-2+2} "+- Left associativity"
            testconstexpr {4-2-2} "- Left associativity"
            testconstexpr {1+2*3} "+* Operator precedence"
            testconstexpr {1||0&&0} "Logical operator precedence"
        }
        catch {C destroy}
        oo::class create C { method m {args} {puts [join $args ,]} }
        set o [C new]
        xtal::xtal {a = 'b ; b = 99; $a}
        xtal::xtal {$o.m('abc, 10)}
        xtal::xtal {$o.m(
                         'abci
                         ,
                         10
                         )}
        set d {a 1 b 2 c 3}
        xtal::xtal { d.b }
        set x c
        xtal::xtal {d.$x}
        set a 0 ; set b 1
        xtal::xtal { < expr {$a > $b} > }
        xtal::xtal {<expr {$a > $b}>}
        xtal::xtal { <
            expr {$a > $b}
            > }
        xtal::xtal {
            a = 1 ; b = 2
            <
            puts [expr {$a > $b}]
            >
        }
        xtal::xtal {
            <lappend l 99>
            a = b
        }
        
        xtal::xtal { a = <clock seconds> }
        xtal::xtal { a = <clock seconds>; }
        xtal::xtal { a = <clock seconds> ;}
        xtal::xtal { a = <clock seconds> ; c = a}
        xtal::xtal { a = <
            clock seconds> ; b = a
        }

        xtal::xtal { @table () }
        xtal::xtal { @table () {} }
        xtal::xtal { @table (i int) }
        xtal::xtal { @table (i int) {{2}}}
        xtal::xtal { @table (i int, s string) }
        xtal::xtal { @table (i int, s string ) {{2, 'two}, {3, 'three}} }
        xtal::xtal { @table (i
                             int,
                             s string
                             ) {
                                 {2, 'two},
                                 {3, 'three}
                             } }

        set "variable with spaces" "value of variable with spaces"
        xtal::xtal {
            puts($"variable with spaces")
            var = "variable with spaces"
            puts($var)
        }

        xtal::xtal {
            function fn () {puts( "Function fn")}
            function fn2 (a, b=5+6) {return a+b}
            fn()
            fn2( 1, 2)
            fn2 (10 )
        }
        fn
        fn2 1 2
        fn2 10
        xtal::xtal {
            try {
                a = 1
            } on error {puts('error)} finally {puts('finally)}
        }
        
        xtal::xtal {
            try {
                throw 'TSCRIPT, 'TEST, "Just a test"
            } on error res opts {
                puts(res)
                puts (opts)
            } finally {
                puts('finally)
            }
        }

        xtal::xtal {
            try {
                nosuchvar
            } trap {'TCL, 'XXX} {
                puts("Should not trigger")
            } trap {'TCL, 'LOOKUP} res opts {
                <puts "Result: $res">
                <puts "Opts: $opts">
            } finally {
                puts('finally)
            }
        }

        xtal::xtal {
            Rainfall = @double {
                11.0, 23.3, 18.4, 14.7, 70.3, 180.5, 210.2, 205.8, 126.4, 64.9, 33.1, 19.2
            }
            Emps = @table (
                           Name string,   Salary uint,   Age uint,   Location string
                           ) {
                               {'Sally,      70000,      32,       'Boston},
                               {'Tom,        65000,      36,       'Boston},
                               {'Dick,       80000,      40,       "New York"},
                               {'Harry,      45000,      37,       "New York"},
                               {'Amanda,     48000,      35,       'Seattle}
                           }
        }
    }
}

::tcltest::cleanupTests
