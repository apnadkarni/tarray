# table csv related commands

source [file join [file dirname [info script]] testutil.tcl]

if {![catch {package require tclcsv}]} {
    tcltest::testConstraint havecsv 1
}

namespace eval tarray::test {
    proc csvtest args {
        tailcall ::tcltest::test {*}$args -constraints havecsv
    }

    # We don't use tcltest::viewFile because it trims trailing \n which is
    # really bogus if you want to test that all lines are properly
    # terminated.
    proc catfile {path args} {
        set fd [open $path r]
        if {[llength $args]} {
            fconfigure $fd {*}$args
        }
        set content [read $fd]
        close $fd
        return $content
    }

    proc sample_table {} {
        return [tarray::table range [tarray::samples::get rainfall] 0 2]
    }

    proc sample_table_csv {args} {
        # Simplistic CSV assumes no special chars and default options
        set csv ""
        tarray::loop row [sample_table] {
            append csv [join $row ,] \n
        }
    }

    csvtest table_csvimport-1.0 {
        Import empty file
    } -body {
        tarray::table csvimport [tcltest::makeFile "" [pid].tmp]
    } -result {tarray_table {} {}}

    csvtest table_csvimport-1.0.1 {
        Import empty channel
    } -setup {
        set chan [open [tcltest::makeFile "" [pid].tmp]]
    } -body {
        tarray::table csvimport $chan
    } -cleanup {
        close $chan
    } -result {tarray_table {} {}}

    csvtest table_csvimport-1.1 {
        Default import
    } -body {
        tarray::table csvimport [tcltest::makeFile "0,1,2\n3,4,5" [pid].tmp]
    } -result {tarray_table {Col_1 Col_2 Col_3} {{tarray_column wide {0 3}} {tarray_column wide {1 4}} {tarray_column wide {2 5}}}}
    
    csvtest table_csvimport-1.1.1 {
        Default import from channel
    } -setup {
        set chan [open [tcltest::makeFile "0,1,2\n3,4,5" [pid].tmp]]
    } -cleanup {
        close $chan
    } -body {
        tarray::table csvimport $chan
    } -result {tarray_table {Col_1 Col_2 Col_3} {{tarray_column wide {0 3}} {tarray_column wide {1 4}} {tarray_column wide {2 5}}}}
    
    csvtest table_csvimport-2.0 {
        Import with -encoding
    } -body {
        # TBD - fix this test to use UTF-8 chars that do not map to system enc
        tarray::table csvimport -encoding utf-8 [tcltest::makeFile "0,1,2\n3,4,5" [pid].tmp]
    } -result {tarray_table {Col_1 Col_2 Col_3} {{tarray_column wide {0 3}} {tarray_column wide {1 4}} {tarray_column wide {2 5}}}}
    
    csvtest table_csvimport-2.0.1 {
        Import with -encoding
    } -setup {
        set chan [open [tcltest::makeFile "0,1,2\n3,4,5" [pid].tmp]]
    } -cleanup {
        close $chan
    } -body {
        # TBD - fix this test to use UTF-8 chars that do not map to system enc
        tarray::table csvimport -encoding utf-8 $chan
    } -result {tarray_table {Col_1 Col_2 Col_3} {{tarray_column wide {0 3}} {tarray_column wide {1 4}} {tarray_column wide {2 5}}}}
    
    csvtest table_csvimport-3.0 {
        Import with -sniff
    } -body {
        tarray::table csvimport -sniff [tcltest::makeFile "0,1\t2\t3\n4,5\t6\t7" [pid].tmp]
    } -result "tarray_table {Col_1 Col_2 Col_3} {{tarray_column string {0,1 4,5}} {tarray_column wide {2 6}} {tarray_column wide {3 7}}}"
    
    csvtest table_csvimport-3.0.1 {
        Import with -sniff
    } -setup {
        set chan [open [tcltest::makeFile "0,1\t2\t3\n4,5\t6\t7" [pid].tmp]]
    } -cleanup {
        close $chan
    } -body {
        tarray::table csvimport -sniff $chan
    } -result "tarray_table {Col_1 Col_2 Col_3} {{tarray_column string {0,1 4,5}} {tarray_column wide {2 6}} {tarray_column wide {3 7}}}"
    
    csvtest table_csvimport-4.0 {
        Import with -delimiter
    } -body {
        tarray::table csvimport -delimiter \t [tcltest::makeFile "0,1\t2\t3\n4,5\t6\t7" [pid].tmp]
    } -result "tarray_table {Col_1 Col_2 Col_3} {{tarray_column string {0,1 4,5}} {tarray_column wide {2 6}} {tarray_column wide {3 7}}}"
    
    csvtest table_csvimport-4.1 {
        Import with -delimiter overrides -sniff
    } -body {
        tarray::table csvimport -sniff -delimiter , [tcltest::makeFile "0,1\t2\t3\n4,5\t6\t7" [pid].tmp]
    } -result [list \
                   tarray_table \
                   {Col_1 Col_2} \
                   [list \
                        {tarray_column wide {0 4}} \
                        [list tarray_column string [list "1\t2\t3" "5\t6\t7"]]]]

    csvtest table_csvimport-5.0 {
        Verify file not left open after import from file
    } -body {
        set chans [chan names]
        tarray::table csvimport [tcltest::makeFile "0,1,2\n3,4,5" [pid].tmp]
        expr {$chans eq [chan names]}
    } -result 1

    csvtest table_csvimport-5.1 {
        Verify channel not closed after import from channel
    } -setup {
        set chan [open [tcltest::makeFile "0,1,2\n3,4,5" [pid].tmp]]
    } -body {
        tarray::table csvimport $chan
        close $chan;            # Will cause error if csvimport closed it
    } -result ""

    ################################################################
    
    csvtest table_csvexport-1.0 {
        Export empty table
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        file delete $csvpath;   # In case it exists
    } -body {
        tarray::table csvexport $csvpath [tarray::table create {}]
        catfile $csvpath
    } -cleanup {
        file delete $csvpath
    } -result ""

   csvtest table_csvexport-1.1 {
        Export empty table with headers
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        file delete $csvpath;   # In case it exists
    } -body {
        set t [tarray::table create {{ColA} int ColB string}]
        tarray::table csvexport -header [tarray::table cnames $t] $csvpath $t
        catfile $csvpath
    } -cleanup {
        file delete $csvpath
    } -result "ColA,ColB\n"
    
   csvtest table_csvexport-1.1.1 {
        Export empty table with headers to a channel
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        set chan [open $csvpath w]
    } -body {
        set t [tarray::table create {{ColA} int ColB string}]
        tarray::table csvexport -header [tarray::table cnames $t] $chan $t
        close $chan
        catfile $csvpath
    } -cleanup {
        file delete $csvpath
    } -result "ColA,ColB\n"

    csvtest table_csvexport-2.0 {
        Export table (default)
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        file delete $csvpath;   # In case it exists
    } -body {
        tarray::table csvexport $csvpath [sample_table]
        catfile $csvpath
    } -cleanup {
        file delete $csvpath
    } -result [sample_table_csv]

    csvtest table_csvexport-2.0.1 {
        Export table (default) to channel
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        set chan [open $csvpath w]
    } -body {
        tarray::table csvexport $chan [sample_table]
        close $chan
        catfile $csvpath
    } -cleanup {
        file delete $csvpath
    } -result [sample_table_csv]

    csvtest table_csvexport-2.1 {
        Export table -header
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        file delete $csvpath;   # In case it exists
    } -body {
        set tab [sample_table]
        tarray::table csvexport -header [tarray::table cnames $tab] $csvpath $tab
        catfile $csvpath
    } -cleanup {
        file delete $csvpath
    } -result "[join [tarray::table cnames [sample_table]] ,]\n[sample_table_csv]"
    
    csvtest table_csvexport-3.0 {
        Export table existing file (fail)
    } -setup {
        set csvpath [tcltest::makeFile "Old content" csvtest.csv]
    } -body {
        tarray::table csvexport $csvpath [sample_table]
    } -cleanup {
        file delete $csvpath
    } -result "File * exists. Use -force to overwrite." -match glob -returnCodes error

    csvtest table_csvexport-3.1 {
        Export table existing file -force
    } -setup {
        set csvpath [tcltest::makeFile "Old content" csvtest.csv]
    } -body {
        tarray::table csvexport -force $csvpath [sample_table]
        catfile $csvpath
    } -result "[sample_table_csv]"

    csvtest table_csvexport-4.0 {
        Export table existing file (fail)
    } -setup {
        set csvpath [tcltest::makeFile "Old content" csvtest.csv]
    } -body {
        tarray::table csvexport $csvpath [sample_table]
    } -cleanup {
        file delete $csvpath
    } -result "File * exists. Use -force to overwrite." -match glob -returnCodes error

    csvtest table_csvexport-4.1 {
        Export table non-existing file -append
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        file delete $csvpath;   # In case it exists
    } -body {
        tarray::table csvexport -append $csvpath [sample_table]
        catfile $csvpath
    } -cleanup {
        file delete $csvpath
    } -result [sample_table_csv]

    csvtest table_csvexport-4.2 {
        Export table existing file -append
    } -setup {
        set csvpath [tcltest::makeFile "Old content" csvtest.csv]
    } -body {
        tarray::table csvexport -append $csvpath [sample_table]
        catfile $csvpath
    } -cleanup {
        file delete $csvpath
    } -result "Old content\n[sample_table_csv]"

    csvtest table_csvexport-4.2.1 {
        Export table existing file -append to channel
    } -setup {
        set csvpath [tcltest::makeFile "Old content" csvtest.csv]
        set chan [open $csvpath a]
    } -body {
        tarray::table csvexport -append $chan [sample_table]
        close $chan
        catfile $csvpath
    } -cleanup {
        file delete $csvpath
    } -result "Old content\n[sample_table_csv]"

    csvtest table_csvexport-5.0 {
        Export table -translation lf
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        file delete $csvpath;   # In case it exists
    } -body {
        tarray::table csvexport -translation lf $csvpath [sample_table]
        catfile $csvpath -translation binary
    } -cleanup {
        file delete $csvpath
    } -result [sample_table_csv]

    csvtest table_csvexport-5.0.1 {
        Export table -translation lf to channel
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        set chan [open $csvpath w]
    } -body {
        tarray::table csvexport -translation lf $chan [sample_table]
        close $chan
        catfile $csvpath -translation binary
    } -cleanup {
        file delete $csvpath
    } -result [sample_table_csv]

    csvtest table_csvexport-5.1 {
        Export table -translation crlf
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        file delete $csvpath;   # In case it exists
    } -body {
        tarray::table csvexport -translation crlf $csvpath [sample_table]
        catfile $csvpath -translation binary
    } -cleanup {
        file delete $csvpath
    } -result [string map {\n \r\n} [sample_table_csv]]

    csvtest table_csvexport-6.0 {
        Export table -encoding
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        file delete $csvpath;   # In case it exists
        set tab [tarray::table create \
                     [list Column0 string Column1 int] \
                     [list [list "\xe2\xe8\u016b\u889f" 100]]]
    } -body {
        tarray::table csvexport -encoding utf-8 $csvpath $tab
        catfile $csvpath -encoding utf-8
    } -cleanup {
        file delete $csvpath
    } -result "\xe2\xe8\u016b\u889f,100\n"

    csvtest table_csvexport-7.0 {
        Export table -delimiter (pass option to tclcsv)
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        file delete $csvpath;   # In case it exists
    } -body {
        tarray::table csvexport -delimiter | $csvpath [sample_table]
        catfile $csvpath
    } -cleanup {
        file delete $csvpath
    } -result [string map {, |} [sample_table_csv]]

    csvtest table_csvexport-7.1 {
        Export table unknown option passed to tclcsv
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        file delete $csvpath;   # In case it exists
    } -body {
        tarray::table csvexport -badopt foo $csvpath [sample_table]
    } -cleanup {
        file delete $csvpath
    } -result "bad option \"-badopt\"*" -match glob -returnCodes error

    csvtest table_csvexport-8.0 {
        Export table using a dialect
    } -setup {
        set csvpath [file join [tcltest::temporaryDirectory] csvtest.csv]
        file delete $csvpath;   # In case it exists
    } -body {
        package require tclcsv
        tarray::table csvexport {*}[tclcsv::dialect excel write] $csvpath [sample_table]
        catfile $csvpath
    } -cleanup {
        file delete $csvpath
    } -result [sample_table_csv]

}

::tcltest::cleanupTests
