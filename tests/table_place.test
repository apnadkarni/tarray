# table place tests

source testutil.tcl

namespace eval tarray::test {

    proc tplacetest {types indexlist_or_indexarray pass_values_as_list args} {
        variable sample

        if {[catch {tarray::column size $indexlist_or_indexarray} n]} {
            # Not an column so assume a list
            set indexlist $indexlist_or_indexarray
            set n [llength $indexlist]
        } else {
            set indexlist [tarray::column range -list $indexlist_or_indexarray 0 end]
        }
        incr n -1
        if {[llength $args]} {
            set values [lindex $args 0]
        } else {
            set values [samplerows $types]
        }
        set changes [lrange [samplerows $types] end-$n end]
        set expected $values
        # We have to order indices else listset will fail with gaps
        set ordered {}
        foreach i $indexlist val $changes {
            lappend ordered [list $i $val]
        }
        foreach pos_and_val [lsort -integer -index 0 $ordered] {
            listset expected {*}$pos_and_val
        }
        if {$pass_values_as_list} {
            return [tab_change_and_verify $types $values $expected place $changes $indexlist_or_indexarray]
        } else {
            return [tab_change_and_verify $types $values $expected place [tarray::table create [col_def $types] $changes] $indexlist_or_indexarray]
        }
    }

    # Unshared object version of above
    proc tplacetest_u {types indexlist_or_indexarray pass_values_as_list args} {
        variable sample

        if {[catch {tarray::column size $indexlist_or_indexarray} n]} {
            # Not an column so assume a list
            set indexlist $indexlist_or_indexarray
            set n [llength $indexlist]
        } else {
            set indexlist [tarray::column range -list $indexlist_or_indexarray 0 end]
        }
        incr n -1
        if {[llength $args]} {
            set values [lindex $args 0]
        } else {
            set values [samplerows $types]
        }
        set changes [lrange [samplerows $types] end-$n end]
        set expected $values
        # We have to order indices else listset will fail with gaps
        set ordered {}
        foreach i $indexlist val $changes {
            lappend ordered [list $i $val]
        }
        foreach pos_and_val [lsort -integer -index 0 $ordered] {
            listset expected {*}$pos_and_val
        }
        if {$pass_values_as_list} {
            return [tab_change_and_verify_u $types $values $expected place $changes $indexlist_or_indexarray]
        } else {
            return [tab_change_and_verify_u $types $values $expected place [tarray::table create [col_def $types] $changes] $indexlist_or_indexarray]
        }
    }

    proc tplacetest_valuelist {type indexlist_or_indexarray args} {
        return [tplacetest $type $indexlist_or_indexarray 1 {*}$args]
    }

    # Unshared object version of above
    proc tplacetest_valuelist_u {type indexlist_or_indexarray args} {
        return [tplacetest_u $type $indexlist_or_indexarray 1 {*}$args]
    }

    proc tplacetest_valuetable {type indexlist_or_indexarray args} {
        return [tplacetest $type $indexlist_or_indexarray 0 {*}$args]
    }

    # Unshared object version of above
    proc tplacetest_valuetable_u {type indexlist_or_indexarray args} {
        return [tplacetest_u $type $indexlist_or_indexarray 0 {*}$args]
    }


    #
    # column place valuelist indexlist

    test table_place-list-indexlist-1.0 {
        Fill an empty table with a single element (shared)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist $type {0}
    } -result 0

    test table_place-list-indexlist-1.1 {
        Fill empty column with a single element (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist_u $type {0}
    } -result 0

    test table_place-list-indexlist-2.0 {
        Test storing of leading elements (shared tclobj)
    } -body {
        set type {uint wide boolean any}
        tplacetest_valuelist $type [indices 0 100]
    } -result 0 

    test table_place-list-indexlist-2.1 {
        Test storing of leading elements reverse order (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist $type [lsort -integer -decreasing [indices 0 50]]
    } -result 0 

    test table_place-list-indexlist-2.2 {
        Test storing of leading elements random order (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist_u $type {3 1 2 0} [samplerows $type 0 31]
    } -result 0

    test table_place-list-indexlist-2.3 {
        Test storing of trailing elements (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist $type {100 101 102 103} [samplerows $type 0 103]
    } -result 0 

    test table_place-list-indexlist-2.4 {
        Test storing of trailing elements reverse order (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist_u $type {128 127 126 125} [samplerows $type 0 128]
    } -result 0 

    test table_place-list-indexlist-2.5 {
        Test storing of trailing elements random order (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist_u $type {31 28 30 29} [samplerows $type 0 31]
    } -result 0

    test table_place-list-indexlist-2.6 {
        Test storing of middle elements (unshared tclobj)
    } -body {
        tplacetest_valuelist_u $type {2 31 64 100}
    } -result 0 

    test table_place-list-indexlist-2.7 {
        Test storing of middle elements reverse order (shared tclobj)
    } -body {
        set type {any}
        tplacetest_valuelist $type {128 127 1 0}
    } -result 0 

    test table_place-list-indexlist-2.8 {
        Test storing of middle elements reverse order (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist $type {128 127 1 0}
    } -result 0 

    test table_place-list-indexlist-2.9 {
        Test storing of middle elements random order (shared tclobj)
    } -body {
        set type {boolean}
        tplacetest_valuelist $type {60 16 100 15}
    } -result 0

    test table_place-list-indexlist-2.10 {
        Test storing of middle elements random order (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist $type {60 16 100 15}
    } -result 0

    test table_place-list-indexlist-2.11 {
        Test extending (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist_u $type {34 1 10 33 32} [samplerows $type 0 31]
    } -result 0

    test table_place-list-indexlist-2.12 {
        Test extending single element (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist $type {32} [samplerows $type 0 31]
    } -result 0

    test table_place-list-indexlist-3.0 {
        Test gap in indices
    } -body {
        set type {any string boolean byte double int uint wide}
        tarray::table place [sampletable $type 0 10] [samplerows $type 0 2] {12 13}
    } -result {*index 12 out of bounds*} -returnCodes error -match glob

    test table_place-list-indexlist-3.1 {
        Test negative index
    } -body {
        set type {any string boolean byte double int uint wide}
        tarray::table place [sampletable $type 0 10] [samplerows $type 0 2] {-1}
    } -result {*index -1 out of bounds*} -returnCodes error -match glob

    test table_place-list-indexlist-3.2 {
        Test use of index end
    } -body {
        tarray::table place [sampletable $type 0 10] [samplerows $type 0 2] {end}
    } -result {*expected integer*} -returnCodes error -match glob

    test table_place-list-indexlist-3.3 {
        Test invalid values
    } -body {
        set type {any string boolean byte double int uint wide}
        tarray::table place [sampletable $type 0 10] {{anyvalue anyvalue 1 256 0 0 0 0}} {0}
    } -result {Value '256' not valid for type byte.} -returnCodes error -match glob
    test table_place-list-indexlist-3.4 {
        Test invalid values (row of different widths)
    } -body {
        set type {string double int uint wide}
        tarray::table place [sampletable $type 0 10] {{anyvalue 1.0 0 0}} {0}
    } -result {*width 4 does not match**} -returnCodes error -match glob

    #
    # table place valuelist indices
        
    test table_place-list-indices-1.0 {
        Fill an empty table with a single element (shared)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist $type [indexcolumn 0]
    } -result 0
        
    test table_place-list-indices-1.1 {
        Fill empty column with a single element (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist_u $type [indexcolumn 0]
    } -result 0

    test table_place-list-indices-2.0 {
        Test storing of leading elements (shared tclobj)
    } -body {
        set type {uint wide boolean string}
        tplacetest_valuelist $type [indices 0 100]
    } -result 0 

    test table_place-list-indices-2.1 {
        Test storing of leading elements reverse order (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist $type [lsort -integer -decreasing [indices 0 50]]
    } -result 0 

    test table_place-list-indices-2.2 {
        Test storing of leading elements random order (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist_u $type [indexcolumn {3 1 2 0}] [samplerows $type 0 31]
    } -result 0

    test table_place-list-indices-2.3 {
        Test storing of trailing elements (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist $type [indexcolumn {100 101 102 103}] [samplerows $type 0 103]
    } -result 0 

    test table_place-list-indices-2.4 {
        Test storing of trailing elements reverse order (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist_u $type [indexcolumn {128 127 126 125}] [samplerows $type 0 128]
    } -result 0 

    test table_place-list-indices-2.5 {
        Test storing of trailing elements random order (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist_u $type [indexcolumn {31 28 30 29}] [samplerows $type 0 31]
    } -result 0

    test table_place-list-indices-2.6 {
        Test storing of middle elements (unshared tclobj)
    } -body {
        tplacetest_valuelist_u $type [indexcolumn {2 31 64 100}]
    } -result 0 

    test table_place-list-indices-2.7 {
        Test storing of middle elements reverse order (shared tclobj)
    } -body {
        set type {any}
        tplacetest_valuelist $type [indexcolumn {128 127 1 0}]
    } -result 0 

    test table_place-list-indices-2.8 {
        Test storing of middle elements reverse order (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist $type [indexcolumn {128 127 1 0}]
    } -result 0 

    test table_place-list-indices-2.9 {
        Test storing of middle elements random order (shared tclobj)
    } -body {
        set type {boolean}
        tplacetest_valuelist $type [indexcolumn {60 16 100 15}]
    } -result 0

    test table_place-list-indices-2.10 {
        Test storing of middle elements random order (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist $type [indexcolumn {60 16 100 15}]
    } -result 0

    test table_place-list-indices-2.11 {
        Test extending (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist_u $type [indexcolumn {34 1 10 33 32}] [samplerows $type 0 31]
    } -result 0

    test table_place-list-indices-2.12 {
        Test extending single element (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuelist $type [indexcolumn {32}] [samplerows $type 0 31]
    } -result 0

    test table_place-list-indices-3.0 {
        Test gap in indices
    } -body {
        set type {any string boolean byte double int uint wide}
        tarray::table place [sampletable $type 0 10] [samplerows $type 0 2] [indexcolumn {12 13}]
    } -result {*index 12 out of bounds*} -returnCodes error -match glob

    test table_place-list-indices-3.1 {
        Test negative index
    } -body {
        set type {any string boolean byte double int uint wide}
        tarray::table place [sampletable $type 0 10] [samplerows $type 0 2] {-1}
    } -result {*index -1 out of bounds*} -returnCodes error -match glob

    test table_place-list-indices-3.3 {
        Test invalid values
    } -body {
        set type {any string boolean byte double int uint wide}
        tarray::table place [sampletable $type 0 10] {{anyvalue stringvalue 1 256 0 0 0 0}} [indexcolumn {0}]
    } -result {Value '256' not valid for type byte.} -returnCodes error -match glob
    test table_place-list-indexlist-3.4 {
        Test invalid values (row of different widths)
    } -body {
        set type {any double int uint wide}
        tarray::table place [sampletable $type 0 10] {{anyvalue 1.0 0 0}} [indexcolumn 0]
    } -result {*width 4 does not match**} -returnCodes error -match glob

    #
    # table place COLUMN indexlist
    test table_place-column-indexlist-1.0 {
        Fill an empty table with a single element (shared)
    } -body {
        set type {uint}
        tplacetest_valuetable $type {0}
    } -result 0

    test table_place-column-indexlist-1.1 {
        Fill empty column with a single element (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable_u $type {0}
    } -result 0

    test table_place-column-indexlist-2.0 {
        Test storing of leading elements (shared tclobj)
    } -body {
        set type {uint wide boolean string}
        tplacetest_valuetable $type [indices 0 100]
    } -result 0 

    test table_place-column-indexlist-2.1 {
        Test storing of leading elements reverse order (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable $type [lsort -integer -decreasing [indices 0 50]]
    } -result 0 

    test table_place-column-indexlist-2.2 {
        Test storing of leading elements random order (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable_u $type {3 1 2 0} [samplerows $type 0 31]
    } -result 0

    test table_place-column-indexlist-2.3 {
        Test storing of trailing elements (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable $type {100 101 102 103} [samplerows $type 0 103]
    } -result 0 

    test table_place-column-indexlist-2.4 {
        Test storing of trailing elements reverse order (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable_u $type {128 127 126 125} [samplerows $type 0 128]
    } -result 0 

    test table_place-column-indexlist-2.5 {
        Test storing of trailing elements random order (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable_u $type {31 28 30 29} [samplerows $type 0 31]
    } -result 0

    test table_place-column-indexlist-2.6 {
        Test storing of middle elements (unshared tclobj)
    } -body {
        tplacetest_valuetable_u $type {2 31 64 100}
    } -result 0 

    test table_place-column-indexlist-2.7 {
        Test storing of middle elements reverse order (shared tclobj)
    } -body {
        set type {any}
        tplacetest_valuetable $type {128 127 1 0}
    } -result 0 

    test table_place-column-indexlist-2.8 {
        Test storing of middle elements reverse order (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable $type {128 127 1 0}
    } -result 0 

    test table_place-column-indexlist-2.9 {
        Test storing of middle elements random order (shared tclobj)
    } -body {
        set type {boolean}
        tplacetest_valuetable $type {60 16 100 15}
    } -result 0

    test table_place-column-indexlist-2.10 {
        Test storing of middle elements random order (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable $type {60 16 100 15}
    } -result 0

    test table_place-column-indexlist-2.11 {
        Test extending (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable_u $type {34 1 10 33 32} [samplerows $type 0 31]
    } -result 0

    test table_place-column-indexlist-2.12 {
        Test extending single element (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable $type {32} [samplerows $type 0 31]
    } -result 0

    test table_place-column-indexlist-3.0 {
        Test gap in indices
    } -body {
        set type {any string boolean byte double int uint wide}
        tarray::table place [sampletable $type 0 10] [sampletable $type 0 2] {12 13}
    } -result {*index 12 out of bounds*} -returnCodes error -match glob

    test table_place-column-indexlist-3.1 {
        Test negative index
    } -body {
        set type {any string boolean byte double int uint wide}
        tarray::table place [sampletable $type 0 10] [sampletable $type 0 2] {-1}
    } -result {*index -1 out of bounds*} -returnCodes error -match glob

    test table_place-column-indexlist-3.2 {
        Test use of index end
    } -body {
        set type {any string boolean byte double int uint wide}
        tarray::table place [sampletable $type 0 10] [sampletable $type 0 2] {end}
    } -result {*expected integer*} -returnCodes error -match glob

    test table_place-column-indexlist-3.3 {
        Test invalid values (table of different type)
    } -body {
        set type {any double int uint wide}
        tarray::table place [sampletable $type 0 10] [sampletable {int double uint wide byte}] {0}
    } -result {*types any and int are not compatible*} -returnCodes error -match glob

    test table_place-column-indexlist-3.4 {
        Test invalid values (table of different widths)
    } -body {
        set type {string double int uint wide}
        tarray::table place [sampletable $type 0 10] [sampletable {string double int uint}] {0}
    } -result {*width 4 does not match**} -returnCodes error -match glob

    test table_place-column-indices-1.0 {
        Fill an empty table with a single element (shared)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable $type [indexcolumn 0]
    } -result 0
        
    test table_place-column-indices-1.1 {
        Fill empty column with a single element (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable_u $type [indexcolumn 0]
    } -result 0

    test table_place-column-indices-2.0 {
        Test storing of leading elements (shared tclobj)
    } -body {
        set type {uint wide boolean any}
        tplacetest_valuetable $type [indices 0 100]
    } -result 0 

    test table_place-column-indices-2.1 {
        Test storing of leading elements reverse order (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable $type [lsort -integer -decreasing [indices 0 50]]
    } -result 0 

    test table_place-column-indices-2.2 {
        Test storing of leading elements random order (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable_u $type [indexcolumn {3 1 2 0}] [samplerows $type 0 31]
    } -result 0

    test table_place-column-indices-2.3 {
        Test storing of trailing elements (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable $type [indexcolumn {100 101 102 103}] [samplerows $type 0 103]
    } -result 0 

    test table_place-column-indices-2.4 {
        Test storing of trailing elements reverse order (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable_u $type [indexcolumn {128 127 126 125}] [samplerows $type 0 128]
    } -result 0 

    test table_place-column-indices-2.5 {
        Test storing of trailing elements random order (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable_u $type [indexcolumn {31 28 30 29}] [samplerows $type 0 31]
    } -result 0

    test table_place-column-indices-2.6 {
        Test storing of middle elements (unshared tclobj)
    } -body {
        tplacetest_valuetable_u $type [indexcolumn {2 31 64 100}]
    } -result 0 

    test table_place-column-indices-2.7 {
        Test storing of middle elements reverse order (shared tclobj)
    } -body {
        set type {any}
        tplacetest_valuetable $type [indexcolumn {128 127 1 0}]
    } -result 0 

    test table_place-column-indices-2.8 {
        Test storing of middle elements reverse order (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable $type [indexcolumn {128 127 1 0}]
    } -result 0 

    test table_place-column-indices-2.9 {
        Test storing of middle elements random order (shared tclobj)
    } -body {
        set type {boolean}
        tplacetest_valuetable $type [indexcolumn {60 16 100 15}]
    } -result 0

    test table_place-column-indices-2.10 {
        Test storing of middle elements random order (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable $type [indexcolumn {60 16 100 15}]
    } -result 0

    test table_place-column-indices-2.11 {
        Test extending (unshared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable_u $type [indexcolumn {34 1 10 33 32}] [samplerows $type 0 31]
    } -result 0

    test table_place-column-indices-2.12 {
        Test extending single element (shared tclobj)
    } -body {
        set type {any string boolean byte double int uint wide}
        tplacetest_valuetable $type [indexcolumn {32}] [samplerows $type 0 31]
    } -result 0

    test table_place-column-indices-3.0 {
        Test gap in indices
    } -body {
        set type {any string boolean byte double int uint wide}
        tarray::table place [sampletable $type 0 10] [sampletable $type 0 2] [indexcolumn 12 13]
    } -result {*index 12 out of bounds*} -returnCodes error -match glob

    test table_place-column-indices-3.1 {
        Test negative index
    } -body {
        set type {any string boolean byte double int uint wide}
        tarray::table place [sampletable $type 0 10] [sampletable $type 0 2] [indexcolumn -1]
    } -result {*index -1 out of bounds*} -returnCodes error -match glob

    test table_place-column-indices-3.2 {
        Test invalid values (table of different type)
    } -body {
        set type {string double int uint wide}
        tarray::table place [sampletable $type 0 10] [sampletable {int double uint wide byte}] [indexcolumn 0]
    } -result {*types string and int are not compatible*} -returnCodes error -match glob

    test table_place-column-indices-3.4 {
        Test invalid values (table of different widths)
    } -body {
        set type {any double int uint wide}
        tarray::table place [sampletable $type 0 10] [sampletable {any double int uint}] [indexcolumn 0]
    } -result {*width 4 does not match**} -returnCodes error -match glob

    #
    # Verify string rep regeneration

    test table_place-stringrep-1.0 {
        Verify string representation is updated on unshared object - bug 18
    } -body {
        tarray::table place {tarray_table {f0 f1 f2} {{tarray_column int {99}} {tarray_column int {99}} {tarray_column int {99}}}} {{0 1 2}} 1
    } -result {tarray_table {f0 f1 f2} {{tarray_column int {99 0}} {tarray_column int {99 1}} {tarray_column int {99 2}}}}

    #################################################################

    # Verify -columns

    test table_place-columnsopt-1.0 {
        Verify placing all columns using names
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set newrow {1 ninetynine 99 99.0}
        set tab [tarray::table create $def $init]
    } -body {
        set tab [tarray::table place -columns {col0 col1 col2 col3} $tab [list $newrow] 0]
        trequal $tab $def [lreplace $init 0 0 $newrow]
    } -result 1

    test table_place-columnsopt-1.1 {
        Verify placing range, all columns using names out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        set tab [tarray::table place -columns {1 col0 3 col2} $tab {{ninetynine 1 99.0 99} {hundred 0 100.0 100}}  {1 0}]
        trequal $tab $def [lreplace $init 0 1 {0 hundred 100 100.0} {1 ninetynine 99 99.0}]
    } -result 1

    test table_place-columnsopt-1.2 {
        Verify growing table, all columns using names out of order
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        set tab [tarray::table place -columns {1 col0 3 col2} $tab {{ninetynine 1 99.0 99} {hundred 0 100.0 100}} [tarray::column create int {6 5}]]
        trequal $tab $def [linsert $init end {0 hundred 100 100.0} {1 ninetynine 99 99.0}]
    } -result 1

    test table_place-columnsopt-1.3 {
        Verify placing empty table
    } -setup {
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def {}]
    } -body {
        set tab [tarray::table place -columns {1 col0 3 col2} $tab {{ninetynine 1 99.0 99} {hundred 0 100.0 100}} [tarray::column create int {0 1}]]
        trequal $tab $def [list {1 ninetynine 99 99.0} {0 hundred 100 100.0} ]
    } -result 1

    test table_place-columnsopt-1.4 {
        Verify placing empty table
    } -setup {
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def {}]
    } -body {
        set tab [tarray::table place -columns {1 col0 3 col2} $tab {{ninetynine 1 99.0 99} {hundred 0 100.0 100}} {1 0}]
        trequal $tab $def [list  {0 hundred 100 100.0} {1 ninetynine 99 99.0}]
    } -result 1

    test table_place-columnsopt-2.0 {
        Verify placing subset columns
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        set tab [tarray::table place -columns {col1 2} $tab {{ninetynine 99}} {4}]
        trequal $tab $def [lreplace $init end end {0 ninetynine 99 4.0}]
    } -result 1

    test table_place-columnsopt-2.1 {
        Verify placing subset columns unordered, discrete indices
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        set tab [tarray::table place -columns {3 col0} $tab {{99.0 0} {100.0 1}} {1 2}]
        trequal $tab $def [lreplace $init 1 2 {0 one 1 99.0} {1 two 2 100.0}]
    } -result 1

    test table_place-columnsopt-2.2 {
        Verify placing subset columns unordered, index column
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        set tab [tarray::table place -columns {3 col1} $tab {{99.0 ninetynine} {100.0 hundred}} [tarray::column create int {2 1}]]
        trequal $tab $def [lreplace $init 1 2 {1 hundred 1 100.0} {0 ninetynine 2 99.0}]
    } -result 1

    test table_place-columnsopt-2.3 {
        Verify placing subset columns unordered from table, discrete indices
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        set tab [tarray::table place -columns {3 col0} $tab [tarray::table create {f0 double f1 boolean} {{99.0 0} {100.0 1}}] {1 2}]
        trequal $tab $def [lreplace $init 1 2 {0 one 1 99.0} {1 two 2 100.0}]
    } -result 1

    test table_place-columnsopt-2.4 {
        Verify placing subset columns unordered, index column
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        set tab [tarray::table place -columns {3 col1} $tab [tarray::table create {fdbl double fany any} {{99.0 ninetynine} {100.0 hundred}}] [tarray::column create int {2 1}]]
        trequal $tab $def [lreplace $init 1 2 {1 hundred 1 100.0} {0 ninetynine 2 99.0}]
    } -result 1

    test table_place-columnsopt-3.0 {
        Verify placing non-existent column position
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table place -columns {col1 5} $tab {{ninetynine 99}} 4
    } -result "Column index '5' out of bounds." -returnCodes error

    test table_place-columnsopt-3.1 {
        Verify placing non-existent column name
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table place -columns {col5} $tab {{ninetynine 99}} [tarray::column create int {0 1}]
    } -result "No column with specified name 'col5'." -returnCodes error

    test table_place-columnsopt-3.2 {
        Verify placing duplicate column names
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table place -columns {col1 col1} $tab [tarray::table create {f0 any f1 any} {{ninetynine ninetynine}}] {0}
    } -result "Column index '1' specified multiple times in column list." -returnCodes error

    test table_place-columnsopt-3.3 {
        Verify placing duplicate column positions
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table place -columns {0 1 0} $tab {{0 astring 0}} 1
    } -result "Column index '0' specified multiple times in column list." -returnCodes error

    test table_place-columnsopt-3.4 {
        Verify placing duplicate column positions
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 string col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table place -columns {col2 col3 2} $tab {{0 0 0}} {0 1 2}
    } -result "Column index '2' specified multiple times in column list." -returnCodes error

    test table_place-columnsopt-3.5 {
        Verify insufficient data width
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table place -columns {col0 col1 col2 col3} $tab {{0 0 0}} 0
    } -result "Row or table width 3 does not match destination width 4." -returnCodes error

    test table_place-columnsopt-3.6 {
        Verify insufficient data width
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table place -columns {col0 col1 col2 col3} $tab [tarray::table create {f0 boolean f1 any f2 int} { {0 0 0} }] {0}
    } -result "Row or table width 3 does not match destination width 4." -returnCodes error

    test table_place-columnsopt-3.7 {
        Verify empty column list
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table place -columns {} $tab {{0 0 0 0}} 0
    } -result "A column map must have at least one column specified." -returnCodes error

    test table_place-columnsopt-3.8 {
        Verify growing table, subset columns 
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table place -columns {col0 3 col2} $tab {{1 99.0 99}} 5
    } -result "All columns in a table must be specified in a column map when extending the table." -returnCodes error

    test table_place-columnsopt-3.9 {
        Verify placing negative column position
    } -setup {
        set init { {0 zero 0 0.0} {1 one 1 1.0} {0 two 2 2.0} {1 three 3 3.0} {0 four 4 4.0} }
        set def {col0 boolean col1 any col2 int col3 double}
        set tab [tarray::table create $def $init]
    } -body {
        tarray::table place -columns {col1 -1} $tab {{ninetynine 99}} 0
    } -result "Column index '-1' out of bounds." -returnCodes error



}

::tcltest::cleanupTests
