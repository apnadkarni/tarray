# column math tests
source testutil.tcl

# NOTE:
# Even though many tests are boilerplate, do NOT wrap them inside
# another procedure for two reasons -
# - on error, tcltest prints body of test. If wrapped, this is the
#  string rep which includes the (very long) column representation
#  making the output unradable
# - There is unnecessary conversion to strings when running tests
# The following is an example of such a wrapper:
# proc mathtest {desc args} {
#     test [mathid] $desc -body [list verify_expr {*}$args] -result 1
# }

namespace eval tarray::test {
    namespace import ::tcl::mathop::*
    
    proc mathid {} {
        variable math_testnum
        return math-[incr math_testnum]
    }

    proc col_without_0 {type} {
        set col [largecolumn $type]
        tarray::column vfill col 1 [tarray::column search -all $col 0]
        return $col
    }
    
    proc col_with_0 {type} {
        set col [largecolumn $type]
        tarray::column vfill col 0 end
        return $col
    }
    
    proc col_const {type val count} {
        set col [tarray::column create $type {} $count]
        tarray::column vinsert col $val $count
        return $col
    }
    
    proc cast_equal {type col_val expr_val} {
        switch -exact -- $type {
            int  { set expr_val [expr {int($expr_val)}] }
            byte { set expr_val [expr {$expr_val & 0xff}] }
            uint { set expr_val [expr {wide($expr_val) & 0xffffffff}] }
            wide { set expr_val [expr {wide($expr_val)}] }
        }
        
        return [expr {$col_val == $expr_val}]
        
    }
    
    proc operand {type size} {
        variable operands
        if {![info exists operands($type,$size)]} {
            tarray::unsupported::crandom operands($type,$size) $type $size
        }
        return $operands($type,$size)
    }

    #NOTE : only call this for booleans if args are 0/1, not any numeric
    proc verify_expr {args} {
        if {[lindex $args 0] eq "math"} {
            set op [lindex $args 1]
            set params [lrange $args 2 end]
        } else {
            set op [lindex $args 0]
            set params [lrange $args 1 end]
        }
        set cresult [tarray::column {*}$args]
        set restype [lindex [tarray::types $cresult] 0]
        if {[llength $params] == 1} {
            # Note - for some operations behaviour with single argument
            # is different from that of expr or tcl::mathop
            if {$restype eq ""} {
                # Scalar
                if {[expr {$cresult == [lindex $params 0]}]} {
                    return ""
                } else {
                    return "$cresult != [lindex $params 0]"
                }
            } else {
                if {[cequal $cresult [lindex $params 0]]} {
                    return ""
                } else {
                    return "Columns are not equal"
                }
            }
        }
        # More than one arg
        if {[lindex [tarray::types $cresult] 0] eq ""} {
            # Scalar result
            set expr_result [tcl::mathop::$op {*}$params]
            if {[expr {$cresult == $expr_result}]} {
                return ""
            } else {
                return "$cresult != $expr_result"
            }
        }
        # Column result. Iterate over all elements 
        set csize [tarray::column size $cresult]
        set ctype [tarray::column type $cresult]
        for {set i 0} {$i < $csize} {incr i} {
            set operands {}
            foreach arg $params {
                if {[lindex [tarray::types $arg] 0] eq ""} {
                    lappend operands $arg
                } else {
                    lappend operands [tarray::column index $arg $i]
                }
            }
            set expr_result [tcl::mathop::$op {*}$operands]
            if {![cast_equal $ctype [tarray::column index $cresult $i] $expr_result]} {
                return "[tarray::column index $cresult $i] != $expr_result (operands=[join $operands ,])" 
            }
        }
        return ""
    }

    foreach op {+ - * / & | ^} {
        test [mathid]-arg0 "$op with no args" -body [list tarray::column math $op] -result "wrong # args: *" -match glob -returnCodes error
        
        foreach type {boolean byte int uint wide double} {
            if {($op in {& | ^} && $type eq "double") ||
                ($op ni {& | ^} && $type eq "boolean")} {
                test [mathid]-err "Unsupported $op, $type" -body [list tarray::column math $op [samplecolumn $type]] -result "Operation is invalid for type $type" -returnCodes error
                test [mathid]-err "Unsupported $op, $type with scalar" -body [list tarray::column math $op [samplecolumn $type] 1] -result "Operation is invalid for type $type" -returnCodes error
                continue
            }
            # Single arg tests
            test [mathid]-$type-arg1 "Single column math $op $type arg" -body {verify_expr math $op [samplecolumn $type]}
            test [mathid]-$type-arg1 "Single column $op $type arg" -body {verify_expr $op [samplecolumn $type]}
            test [mathid]-$type-arg1 "Single scalar math $op $type arg" -body {verify_expr math $op [samplevalue $type]}
            test [mathid]-$type-arg1 "Single scalar $op $type arg" -body {verify_expr $op [samplevalue $type]}

            # Two arg tests
            # Division is separated out because div by 0 is tested separately
            if {$op ne "/"} {
                test [mathid]-$type-arg2 "$type math $op scalar scalar" -body {verify_expr math $op [samplevalue $type] [samplevalue $type 10]}
                test [mathid]-$type-arg2 "$type $op scalar column" -body {verify_expr $op [samplevalue $type] [largespancolumn $type]}
                test [mathid]-$type-arg2 "$type math $op column scalar" -body {verify_expr math $op [samplecolumn $type] [samplevalue $type]}
                test [mathid]-$type-arg2 "$type $op column column" -body {verify_expr $op [largespancolumn $type] [operand $type [largesize]]}
            } else {
                test [mathid]-$type-arg2 "$type $op scalar scalar" -body {verify_expr $op [samplevalue $type] 2.3}
                test [mathid]-$type-arg2 "$type math $op scalar column" -body {verify_expr math $op 1000e1000 [col_without_0 $type]}
                test [mathid]-$type-arg2 "$type $op column scalar" -body {verify_expr $op [col_with_0 $type] 1.1e2 }
                test [mathid]-$type-arg2 "$type math $op column column" -body {verify_expr math $op [operand $type [largesize]] [col_without_0 $type] }
            }

            # Errors
            test [mathid]-$type-operand-err "Bad operand" -body {
                tarray::column math $op [samplecolumn $type] badoperand
            } -result "Invalid operand 'badoperand'." -returnCodes error
            if {$type ne "boolean"} {
                test [mathid]-$type-operand-err "Bad operand" -body {
                    tarray::column math $op [samplecolumn $type] true
                } -result "tarray types boolean and $type are not compatible for attempted operation." -returnCodes error
                test [mathid]-$type-operand-err "Bad operand" -body {
                    tarray::column math $op false [samplecolumn $type]
                } -result "tarray types $type and boolean are not compatible for attempted operation." -returnCodes error
            }
            test [mathid]-$type-badlen-err "Differing length columns $op, $type" -body {
                tarray::column math $op [samplecolumn $type] [largecolumn $type]
            } -result "Columns have differing lengths." -returnCodes error
        }

        # More than two args. This also tests type promotion
        if {$op ni {& | ^}} {
            # Tests for promotion to doubles
            test [mathid]-double-multiarg "double math $op args" -body {verify_expr math $op 1.1e2 -5.3e-2 2 0x200000000}
            test [mathid]-double-multiarg "double $op multi arg" -body {
                set col [tarray::column $op [newcolumn int {1 2 3}] [newcolumn wide {1 7 0x100000000}] 1.1]
            } -result [newcolumn double [list [$op 1.0 1.0 1.1] [$op 2.0 7.0 1.1] [$op 3.0 0x100000000 1.1]]] -match column
            test [mathid]-double-multiarg "double $op multi arg" -body {
                set col [tarray::column $op [newcolumn double {1 2 3}] [newcolumn wide {1 7 0x100000000}] 1]
            } -result [newcolumn double [list [$op 1.0 1.0 1.0] [$op 2.0 7.0 1.0] [$op 3.0 0x100000000 1.0]]] -match column
        }

        # Test promotion to wide
        test [mathid]-wide-multiarg "wide $op multi arg" -body {
            set col [tarray::column $op [newcolumn int {1 2 3}] [newcolumn uint {1 7 11}] 0x100000000]
        } -result [newcolumn wide [list [$op 1 1 0x100000000] [$op 2 7 0x100000000] [$op 3 11 0x100000000]]] -match column
         
        foreach type {boolean string any} {
            if {$type eq "boolean" && $op in {& | ^}} continue
            test [mathid]-err "Unsupported $op, $type" -body [list tarray::column math $op [samplecolumn $type]] -result "Operation is invalid for type $type" -returnCodes error
            test [mathid]-err "Unsupported $op, $type with scalar" -body [list tarray::column math $op [samplecolumn $type] 1] -result "Operation is invalid for type $type" -returnCodes error
        }
                                                                
    }
        
    # Integer division tests, e.g. -5/10 should be -1, not 0,
    # for consistency with expr. Unsigned types (byte, uint) not affected
    test [mathid]-intdiv "Scalar / -200 100" -body {verify_expr / -200 100}
    test [mathid]-intdiv "Scalar / -150 100" -body {verify_expr / -150 100}
    test [mathid]-intdiv "Scalar / -50 100" -body {verify_expr / -50 100}
    test [mathid]-intdiv "Scalar / 200 -100" -body {verify_expr / 200 -100}
    test [mathid]-intdiv "Scalar / 150 -100" -body {verify_expr / 150 -100}
    test [mathid]-intdiv "Scalar / 50 -100" -body {verify_expr / 50 -100}
    foreach type {int wide} {
        test [mathid]-intdiv "Column $type /  {-200,-100,-50} 100" -body [list verify_expr math / [tarray::column create $type {-200 -100 -50}] 100]
        test [mathid]-intdiv "Column $type /  {200,100,50} -100" -body [list verify_expr / [tarray::column create $type {200 100 50}] -100]
    }
    
    #
    # Divide by 0 tests
    foreach type {byte int uint wide} {
        test [mathid]-div0 "Scalar $type / 0" -body [list tarray::column math / [samplevalue $type] 0] -result "divide by zero" -returnCodes error
        test [mathid]-div0 "Scalar $type / 0" -body [list tarray::column math / 0 0] -result "divide by zero" -returnCodes error
        test [mathid]-div0 "Scalar $type / 0 / 1" -body [list tarray::column math / [samplevalue $type] 0 1] -result "divide by zero" -returnCodes error
        test [mathid]-div0 "Column $type / 0" -body [list tarray::column math / [largecolumn $type] 0] -result "divide by zero" -returnCodes error
        test [mathid]-div0 "Column $type / 0" -body [list tarray::column math / [col_with_0  $type] 0] -result "divide by zero" -returnCodes error
        test [mathid]-div0 "Scalar $type / 0 column" -body [list tarray::column math / [samplevalue $type] [col_with_0 $type]] -result "divide by zero" -returnCodes error
        test [mathid]-div0 "Scalar $type / 0 column" -body [list tarray::column math / 0 [col_with_0 $type]] -result "divide by zero" -returnCodes error
        test [mathid]-div0 "Column $type / 0 column" -body [list tarray::column math / [largecolumn $type] [col_with_0 $type]] -result "divide by zero" -returnCodes error
        test [mathid]-div0 "Column $type / 0 column" -body [list tarray::column math / [col_with_0 $type] [col_with_0 $type]] -result "divide by zero" -returnCodes error
        test [mathid]-div0 "Column $type / 0 column / column" -body [list tarray::column math / [largecolumn $type] [col_with_0 $type] [largecolumn $type]] -result "divide by zero" -returnCodes error
    }
    test [mathid]-div0 "Scalar double / 0" -body {verify_expr / 5 0.0}
    test [mathid]-div0 "Scalar double / 0" -body [list tarray::column math / 0.0 0.0] -result Inf
    test [mathid]-div0 "Scalar double 0.0/0.0" -body {verify_expr / [samplecolumn double] 0}
    test [mathid]-div0 "Column double / 0" -body {verify_expr / [samplecolumn double] 0}
    test [mathid]-div0 "Scalar double / 0 column" -body {verify_expr / [samplevalue double] [col_with_0 double]}
    test [mathid]-div0 "Column double / 0 column" -body {verify_expr / [largecolumn double] [col_with_0 double]}

        # Test special cases for booleans
        foreach type {byte int uint wide double} {
             test [mathid]-boolean-err "boolean column non-boolean column" -body {
                tarray::column math $op [samplecolumn boolean] [samplecolumn $type]
            } -result "tarray types $type and boolean are not compatible for attempted operation." -returnCodes error
             test [mathid]-boolean-err "boolean column non-boolean column" -body {
                tarray::column $op [samplecolumn $type] [samplecolumn boolean]
             } -result "tarray types boolean and $type are not compatible for attempted operation." -returnCodes error

            test [mathid]-boolean-$op-$type "boolean column $op $type scalar" -body {
                verify_expr $op [samplecolumn boolean] 1
            }

            # Multiple boolean and scalar args
        }
        
    foreach op {& | ^} {
        # Test special cases for booleans
        # Verify errors if column types do not match
        foreach type {byte int uint wide double} {
             test [mathid]-boolean-err "boolean column non-boolean column" -body {
                tarray::column math $op [samplecolumn boolean] [samplecolumn $type]
            } -result "tarray types $type and boolean are not compatible for attempted operation." -returnCodes error
             test [mathid]-boolean-err "boolean column non-boolean column" -body {
                tarray::column $op [samplecolumn $type] [samplecolumn boolean]
             } -result "tarray types boolean and $type are not compatible for attempted operation." -returnCodes error


        }

        # Test with scalars
        test [mathid]-boolean-$op "boolean column $op" -body {
            verify_expr $op [samplecolumn boolean] 1
        }
        test [mathid]-boolean-$op "boolean column $op" -body {
            verify_expr $op [samplecolumn boolean] 0
        }
        test [mathid]-boolean-$op "boolean column $op" -body {
            verify_expr $op 1 [samplecolumn boolean]
        }
        test [mathid]-boolean-$op "boolean column $op" -body {
            verify_expr $op 0 [samplecolumn boolean]
        }

        # Test with span columns
        test [mathid]-boolean-$op "boolean column $op" -body {
            verify_expr $op [samplespancolumn boolean] 1
        }
        test [mathid]-boolean-$op "boolean column $op" -body {
            verify_expr $op 0 [samplespancolumn boolean]
        }

        # Non-boolean scalars
        test [mathid]-boolean-$op "boolean column $op" -body {
            tarray::column math $op [samplecolumn boolean] 10.0
        } -match column -result [tarray::column math $op [samplecolumn boolean] 1]
        test [mathid]-boolean-$op "boolean column $op" -body {
            tarray::column math $op [samplecolumn boolean] 0.0
        } -match column -result [tarray::column math $op [samplecolumn boolean] 0]
        test [mathid]-boolean-$op "boolean column $op" -body {
            tarray::column math $op [samplecolumn boolean] true
        } -match column -result [tarray::column math $op [samplecolumn boolean] 1]
        test [mathid]-boolean-$op "boolean column $op" -body {
            tarray::column math $op false [samplecolumn boolean]
        } -match column -result [tarray::column math $op [samplecolumn boolean] false]

        for {set i 1} {$i < 128} {incr i} {
            test [mathid]-boolean-$op-range "boolean column range $op" -body {
                verify_expr $op [tarray::column range [samplecolumn boolean] $i [expr {499+$i}]] [samplecolumn boolean 0 499]
            }
        }
    }        
}

tcltest::cleanupTests

