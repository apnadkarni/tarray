# column delete tests

source testutil.tcl

namespace eval tarray::test {

    # Note two general types of tests - via a temp variable and directly
    # from the create return value. The difference is that in the
    # former case the value ref count is > 1, and the object needs to
    # be dup'ed while in the latter the ref count is 1 and the called
    # command can directly use it.
    # Also, when modifying a temp variable tests have to confirm that
    # the original is not modified

    #
    # column delete index

    foreach type {boolean string any byte double int uint wide} {

        test column_delete-index-$type-1.0 {
            Test deletion of first element (shared tclobj)
        } -body {
            tarray::unsupported::lrandom l $type 100000
            col_change_and_verify $type $l [lrange $l 1 end] delete 0 
        } -result 0

        test column_delete-index-$type-1.1 {
            Test deletion of first element (unshared tclobj)
        } -body {
            tarray::column delete [samplecolumn $type] 0
        } -result [crep $type [lrange $sample($type) 1 end]] -match column

        test column_delete-index-$type-2.0 {
            Test deletion of last element (shared tclobj)
        } -body {
            col_change_and_verify $type $sample($type) [lrange $sample($type) 0 end-1] delete [expr {[llength $sample($type)]-1}]
        } -result 0

        test column_delete-index-$type-2.1 {
            Test deletion of last element (unshared tclobj)
        } -body {
            tarray::column delete [samplecolumn $type] [expr {[llength $sample($type)]-1}]
        } -result [crep $type [lrange $sample($type) 0 end-1]] -match column

        test column_delete-index-$type-2.2 {
            Test deletion of last element (shared tclobj)
        } -body {
            col_change_and_verify $type $sample($type) [lrange $sample($type) 0 end-1] delete end
        } -result 0

        test column_delete-index-$type-2.3 {
            Test deletion of last element (unshared tclobj)
        } -body {
            tarray::column delete [largecolumn $type] end
        } -result [crep $type [lrange [largelist $type] 0 end-1]] -match column

        test column_delete-index-$type-3.0 {
            Test deletion of end element (shared tclobj)
        } -body {
            col_change_and_verify $type $sample($type) [lrange $sample($type) 0 end-1] delete end
        } -result 0

        test column_delete-index-$type-3.1 {
            Test deletion of end element (unshared tclobj)
        } -body {
            tarray::column delete [samplecolumn $type] end
        } -result [crep $type [lrange $sample($type) 0 end-1]] -match column

        test column_delete-index-$type-3.2 {
            Test deletion of end-1 element (shared tclobj)
        } -body {
            col_change_and_verify $type $sample($type) [lreplace $sample($type) end-1 end-1] delete end-1
        } -result 0

        test column_delete-index-$type-3.3 {
            Test deletion of end+1 element (unshared tclobj)
        } -body {
            tarray::column delete [samplecolumn $type] end+1
        } -result [crep $type $sample($type)] -match column

        set n -1
        foreach i {1 7 8 9 31 32 33 63 64 65 254} {
            test column_delete-index-$type-4.[incr n] {
                Test deletion of intermediate element (shared tclobj)
            } -body {
                col_change_and_verify $type $sample($type) [concat [lrange $sample($type) 0 $i-1] [lrange $sample($type) $i+1 end]] delete $i
            } -result 0

            test column_delete-index-$type-4.[incr n] {
                Test deletion of intermediate element (unshared tclobj)
            } -body {
                tarray::column delete [samplecolumn $type] $i
            } -result [crep $type [concat [lrange $sample($type) 0 $i-1] [lrange $sample($type) $i+1 end]]] -match column
        }

        test column_delete-index-$type-4.[incr n] {
            Test deletion of intermediate element (large shared tclobj)
        } -body {
            col_change_and_verify $type [largelist $type] [concat [lrange [largelist $type] 0 $i-1] [lrange [largelist $type] $i+1 end]] delete $i
        } -result 0

        test column_delete-index-$type-4.[incr n] {
            Test deletion of intermediate element (large unshared tclobj)
        } -body {
            tarray::column delete [largecolumn $type] $i
        } -result [crep $type [concat [lrange [largelist $type] 0 $i-1] [lrange [largelist $type] $i+1 end]]] -match column

        test column_delete-index-$type-5.0 {
            Test deletion of out-of-range index
        } -body {
            tarray::column delete [samplecolumn $type] [expr {[llength $sample($type)] + 10}]
        } -result [crep $type $sample($type)] -match column

        test column_delete-index-$type-5.1 {
            Test deletion of out-of-range index (+1)
        } -body {
            tarray::column delete [samplecolumn $type] [llength $sample($type)]
        } -result [crep $type $sample($type)] -match column

        test column_delete-index-$type-5.2 {
            Test deletion of negative index
        } -body {
            tarray::column delete [samplecolumn $type] -1
        } -result [crep $type $sample($type)] -match column

        test column_delete-index-$type-5.3 {
            Test deletion of out-of-range end+1 index
        } -body {
            tarray::column delete [samplecolumn $type] end+1
        } -result [crep $type $sample($type)] -match column

        test column_delete-index-$type-5.4 {
            Test deletion of invalid syntax index
        } -body {
            tarray::column delete [samplecolumn $type] nonintsyntax
        } -returnCodes error -match glob -result *

        test column_delete-index-$type-6.0 {
            Test deletion of element from single element column (shared)
        } -body {
            col_change_and_verify $type [list 100] {} delete 0
        } -result 0

        test column_delete-index-$type-6.1 {
            Test deletion of element from single element column (unshared)
        } -body {
            tarray::column delete [newcolumn $type [lrange $sample($type) 0 0]] end
        } -result [crep $type {}] -match column

        test column_delete-index-$type-6.0 {
            Test deletion of element from single element column (shared)
        } -body {
            col_change_and_verify $type [list 100] {} delete end
        } -result 0

        test column_delete-index-$type-7.0 {
            Test attempt to delete element from empty column (shared)
        } -body {
            col_change_and_verify $type {} {} delete 0
        } -result 0

        test column_delete-index-$type-7.1 {
            Test attempt to delete element from empty column (shared)
        } -body {
            col_change_and_verify $type {} {} delete end
        } -result 0

        test column_delete-index-$type-7.2 {
            Test deletion of invalid index from empty column (unshared)
        } -body {
            tarray::column delete [newcolumn $type {}] -1
        } -result [crep $type {}] -match column
    }

    #
    # column delete index list

    foreach type {boolean string any byte double int uint wide} {

        test column_delete-indexlist-$type-1.0 {
            Test deletion of leading elements (shared tclobj)
        } -body {
            col_change_and_verify $type [largelist $type] [lrange [largelist $type] 3 end] delete {0 1 2}
        } -result 0 

        test column_delete-indexlist-$type-1.1 {
            Test deletion of leading elements (unshared tclobj)
        } -body {
            tarray::column delete [samplecolumn $type] {0 1 2}
        } -result [crep $type [lrange $sample($type) 3 end]] -match column

        test column_delete-indexlist-$type-1.2 {
            Test deletion of leading elements (shared tclobj, out of order)
        } -body {
            col_change_and_verify $type $sample($type) [lrange $sample($type) 4 end] delete {0 2 1 3}
        } -result 0

        test column_delete-indexlist-$type-1.3 {
            Test deletion of leading elements (unshared tclobj, reverse order)
        } -body {
            tarray::column delete [largecolumn $type] {2 1 0}
        } -result [crep $type [lrange [largelist $type] 3 end]] -match column

        test column_delete-indexlist-$type-2.0 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set l [largelist $type]
            set i [llength $l]
            incr i -2
            col_change_and_verify $type $l [lrange $l 0 end-2] delete $i [incr i]
        } -result 0

        test column_delete-indexlist-$type-2.1 {
            Test deletion of trailing elements (unshared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -3
            tarray::column delete [samplecolumn $type] [list $i [incr i] [incr i]] 
        } -result [crep $type [lrange $sample($type) 0 end-3]] -match column

        test column_delete-indexlist-$type-2.2 {
            Test deletion of trailing elements (shared tclobj, out of order)
        } -body {
            set i [llength $sample($type)]
            set ta [samplecolumn $type]
            col_change_and_verify $type $sample($type) [lrange $sample($type) 0 end-3] delete [list [incr i -1] [incr i -2] [incr i]]
        } -result 0

        test column_delete-indexlist-$type-2.3 {
            Test deletion of trailing elements (unshared tclobj, reverse order)
        } -body {
            set i [llength $sample($type)]
            tarray::column delete [samplecolumn $type] [list [incr i -1] [incr i -1] [incr i -1]]
        } -result [crep $type [lrange $sample($type) 0 end-3]] -match column

        test column_delete-indexlist-$type-3.0 {
            Test deletion of intermediate (shared tclobj, ordered)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            col_change_and_verify $type $sample($type) $l2 delete [lsort -increasing -integer $indices]
        } -result 0

        test column_delete-indexlist-$type-3.1 {
            Test deletion of intermediate (unshared tclobj, reverse order)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 [largelist $type]
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            cequal [tarray::column delete [largecolumn $type] [lsort -decreasing -integer $indices]] [crep $type $l2]
        } -result 1

        test column_delete-indexlist-$type-3.2 {
            Test deletion of intermediate (shared tclobj, random order)
        } -body {
            # Note duplicate
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 [largelist $type]
            # Deletion must take place back to front. -unique to remove dups
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            col_change_and_verify $type [largelist $type] $l2 delete $indices
        } -result 0

        test column_delete-indexlist-$type-4.0 {
            Test deletion of out-of-range (unshared, increasing indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            cequal [tarray::column delete [samplecolumn $type] [lsort -increasing -integer $indices]] [crep $type $l2]
        } -result 1

        test column_delete-indexlist-$type-4.1 {
            Test deletion of out-of-range (unshared, reverse indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            cequal [tarray::column delete [samplecolumn $type] [lsort -decreasing -integer $indices]] [crep $type $l2]
        } -result 1

        test column_delete-indexlist-$type-4.2 {
            Test deletion of out-of-range (shared, random indices)
        } -body {
            # Note duplicate 33
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            cequal [tarray::column delete [samplecolumn $type] $indices] [crep $type $l2]
        } -result 1

        test column_delete-indexlist-$type-5.0 {
            Test deletion of invalid syntax indices
        } -body {
            set indices {1 notinteger 63}
            tarray::column delete [samplecolumn $type] $indices
        } -returnCodes error -match glob -result *

        test column_delete-indexlist-$type-5.1 {
            Test deletion of end keyword
        } -body {
            # Note "end" is invalid in a index list
            set indices {1 end 63}
            tarray::column delete [samplecolumn $type] $indices
        } -returnCodes error -match glob -result *

        test column_delete-indexlist-$type-6.0 {
            Test deletion of all indices from column (shared)
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set l [lrange $sample($type) 0 3]
            set ta [newcolumn $type $l]
            col_change_and_verify $type $l {} delete $indices
        } -result 0

        test column_delete-indexlist-$type-6.1 {
            Test deletion of all indices from column (shared)
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set l [lrange $sample($type) 0 3]
            set ta [newcolumn $type $l]
            col_change_and_verify $type $l {} delete [lsort -integer -decreasing $indices]
        } -result 0

        test column_delete-indexlist-$type-6.2 {
            Test deletion of all indices from column (shared)
        } -body {
            set l [lrange $sample($type) 0 3]
            set ta [newcolumn $type $l]
            col_change_and_verify $type $l {} delete {0 1 2 3}
        } -result 0

        test column_delete-indexlist-$type-6.3 {
            Test deletion of all indices from column (unshared, random order)
        } -body {
            set l [lrange $sample($type) 0 3]
            set ta [newcolumn $type $l]
            col_change_and_verify $type $l {} delete {1 0 3 2}
        } -result 0

        test column_delete-indexlist-$type-7.0 {
            Test attempt to delete element from empty column (shared)
        } -body {
            set ta [newcolumn $type {}]
            col_change_and_verify $type {} {} delete {0 1 2}
        } -result 0

        test column_delete-indexlist-$type-7.1 {
            Test attempt to delete element from empty column (unshared)
        } -body {
            tarray::column delete [newcolumn $type {}] {0 2 1}
        } -result [crep $type {}] -match column

        test column_delete-indexlist-$type-8.0 {
            Delete duplicate indices (shared)
        } -body {
            set ta [samplecolumn $type]
            col_change_and_verify $type $sample($type) [lrange $sample($type) 2 end] delete {0 0 1}
        } -result 0

        test column_delete-indexlist-$type-8.1 {
            Delete duplicate indices (unshared)
        } -body {
            tarray::column delete [samplecolumn $type] {4 4}
        } -result [crep $type [concat [lrange $sample($type) 0 3] [lrange $sample($type) 5 end]]] -match column
    }

    #
    # column delete indicesarray

    foreach type {boolean string any byte double int uint wide} {

        test column_delete-indices-$type-1.0 {
            Test deletion of leading elements (shared tclobj)
        } -body {
            col_change_and_verify $type $sample($type) [lrange $sample($type) 2 end] delete [indexcolumn  0 1]
        } -result 0

        test column_delete-indices-$type-1.1 {
            Test deletion of leading elements (unshared tclobj)
        } -body {
            tarray::column delete [largecolumn $type] [indexcolumn {0 1 2}]
        } -result [crep $type [lrange [largelist $type] 3 end]] -match column

        test column_delete-indices-$type-1.2 {
            Test deletion of leading elements (shared tclobj, out of order)
        } -body {
            col_change_and_verify $type $sample($type) [lrange $sample($type) 4 end] delete [indexcolumn {0 2 1 3}]
        } -result 0

        test column_delete-indices-$type-1.3 {
            Test deletion of leading elements (unshared tclobj, reverse order)
        } -body {
            tarray::column delete [largecolumn $type] [indexcolumn {2 1 0}]
        } -result [crep $type [lrange [largelist $type] 3 end]] -match column

        test column_delete-indices-$type-2.0 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -2
            set ta [samplecolumn $type]
            col_change_and_verify $type $sample($type) [lrange $sample($type) 0 end-2] delete [newcolumn int [list $i [incr i]]]
        } -result 0

        test column_delete-indices-$type-2.1 {
            Test deletion of trailing elements (unshared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -3
            tarray::column delete [samplecolumn $type] [newcolumn int [list $i [incr i] [incr i]] ]
        } -result [crep $type [lrange $sample($type) 0 end-3]] -match column

        test column_delete-indices-$type-2.2 {
            Test deletion of trailing elements (shared tclobj, out of order)
        } -body {
            set i [llength [largelist $type]]
            col_change_and_verify $type [largelist $type] [lrange [largelist $type] 0 end-3] delete [indexcolumn [incr i -1] [incr i -2] [incr i]]
        } -result 0

        test column_delete-indices-$type-2.3 {
            Test deletion of trailing elements (unshared tclobj, reverse order)
        } -body {
            set i [llength $sample($type)]
            tarray::column delete [samplecolumn $type] [indexcolumn [incr i -1] [incr i -1] [incr i -1]]
        } -result [crep $type [lrange $sample($type) 0 end-3]] -match column

        test column_delete-indices-$type-3.0 {
            Test deletion of intermediate (shared tclobj, ordered)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254 1023 1024 1025 32535 32536}
            set l2 [largelist $type]
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            # Explicitly order indices
            set indices [tarray::column sort [indexcolumn $indices]]
            col_change_and_verify $type [largelist $type] $l2 delete $indices
        } -result 0

        test column_delete-indices-$type-3.1 {
            Test deletion of intermediate (unshared tclobj, reverse order)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set indices [tarray::column sort -decreasing [indexcolumn $indices]]
            cequal [tarray::column delete [samplecolumn $type] $indices] [crep $type $l2]
        } -result 1

        test column_delete-indices-$type-3.2 {
            Test deletion of intermediate (shared tclobj, random order)
        } -body {
            # Note duplicate
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 $sample($type)
            # Deletion must take place back to front. -unique to remove dups
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            col_change_and_verify $type $sample($type) $l2 delete [indexcolumn $indices]
        } -result 0

        test column_delete-indices-$type-4.0 {
            Test deletion of out-of-range (unshared, increasing indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254 1024 2048 10000 32000 50000 65536}
            set l2 [largelist $type]
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength [largelist $type]]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            set indices [tarray::column sort -increasing [indexcolumn $indices]]
            cequal [tarray::column delete [largecolumn $type] $indices] [crep $type $l2]
        } -result 1

        test column_delete-indices-$type-4.1 {
            Test deletion of out-of-range (unshared, reverse indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            set indices [tarray::column sort -decreasing [indexcolumn $indices]]
            cequal [tarray::column delete [samplecolumn $type] $indices] [crep $type $l2]
        } -result 1

        test column_delete-indices-$type-4.2 {
            Test deletion of out-of-range (shared, random indices)
        } -body {
            # Note duplicate 33
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            cequal [tarray::column delete [samplecolumn $type] [indexcolumn $indices]] [crep $type $l2]
        } -result 1

        test column_delete-indices-$type-5.0 {
            Test deletion of invalid syntax indices
        } -body {
            set indices {1 notinteger 63}
            tarray::column delete [samplecolumn $type] $indices
        } -returnCodes error -match glob -result *

        test column_delete-indices-$type-5.1 {
            Test deletion of end keyword
        } -body {
            # Note "end" is invalid in a index list
            set indices {1 end 63}
            tarray::column delete [samplecolumn $type] [indexcolumn $indices]
        } -returnCodes error -match glob -result *

        test column_delete-indices-$type-6.0 {
            Test deletion of all indices from column (shared)
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set l [lrange $sample($type) 0 3]
            set ta [newcolumn $type $l]
            col_change_and_verify $type $l {} delete [indexcolumn $indices]
        } -result 0

        test column_delete-indices-$type-6.1 {
            Test deletion of all indices from column (shared)
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set l [lrange $sample($type) 0 3]
            set ta [newcolumn $type $l]
            col_change_and_verify $type $l {} delete [lsort -integer -decreasing $indices]
        } -result 0

        test column_delete-indices-$type-6.2 {
            Test deletion of all indices from column (shared)
        } -body {
            set l [lrange $sample($type) 0 3]
            set ta [newcolumn $type $l ]
            col_change_and_verify $type $l {} delete [indexcolumn {0 1 2 3}]
        } -result 0

        test column_delete-indices-$type-6.3 {
            Test deletion of all indices from column (unshared, random order)
        } -body {
            tarray::column delete [newcolumn $type [lrange $sample($type) 0 3]] [indexcolumn {1 0 3 2}]
        } -result [crep $type {}] -match column

        test column_delete-indices-$type-7.0 {
            Test attempt to delete element from empty column (shared)
        } -body {
            col_change_and_verify $type {} {} delete [indexcolumn {0 1 2}]
        } -result 0

        test column_delete-indices-$type-7.1 {
            Test attempt to delete element from empty column (unshared)
        } -body {
            tarray::column delete [newcolumn $type {}] [indexcolumn {0 2 1}]
        } -result [crep $type {}] -match column

        test column_delete-indices-$type-8.0 {
            Delete duplicate indices (shared)
        } -body {
            col_change_and_verify $type $sample($type)  [lrange $sample($type) 2 end] delete [indexcolumn {0 0 1}]
        } -result 0

        test column_delete-indices-$type-8.1 {
            Delete duplicate indices (unshared)
        } -body {
            tarray::column delete [samplecolumn $type] [indexcolumn {4 4}]
        } -result [crep $type [concat [lrange $sample($type) 0 3] [lrange $sample($type) 5 end]]] -match column
    }


    #
    # column delete range

    foreach type {boolean string any byte double int uint wide} {

        test column_delete-range-$type-1.0 {
            Test deletion of leading elements (shared tclobj)
        } -body {
            col_change_and_verify $type [largelist $type] [lrange [largelist $type] 2 end] delete 0 1
        } -result 0

        test column_delete-range-$type-1.1 {
            Test deletion of leading elements (unshared tclobj)
        } -body {
            tarray::column delete [samplecolumn $type] 0 63
        } -result [crep $type [lrange $sample($type) 64 end]] -match column

        test column_delete-range-$type-2.0 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -1
            col_change_and_verify $type $sample($type) [lrange $sample($type) 0 126] delete 127 $i
        } -result 0

        test column_delete-range-$type-2.1 {
            Test deletion of trailing elements (unshared tclobj, using end)
        } -body {
            tarray::column delete [largecolumn $type] 129 end
        } -result [crep $type [lrange [largelist $type] 0 128]] -match column

        test column_delete-range-$type-2.2 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -128
            col_change_and_verify $type $sample($type) [lrange $sample($type) 0 126] delete end-$i end
        } -result 0

        test column_delete-range-$type-2.3 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -128
            col_change_and_verify $type $sample($type) [lrange $sample($type) 0 126] delete end-$i end+5
        } -result 0

        test column_delete-range-$type-3.0 {
            Test deletion of intermediate (shared tclobj)
        } -body {
            col_change_and_verify $type $sample($type) [concat [lrange $sample($type) 0 62] [lrange $sample($type) 128 end]] delete 63 127
        } -result 0

        test column_delete-range-$type-3.1 {
            Test deletion of intermediate (unshared tclobj)
        } -body {
            tarray::column delete [samplecolumn $type] 64 128
        } -result [crep $type [concat [lrange $sample($type) 0 63] [lrange $sample($type) 129 end]]] -match column

        test column_delete-range-$type-4.0 {
            Test deletion of out-of-range (unshared)
        } -body {
            set i [llength $sample($type)]
            tarray::column delete [samplecolumn $type] $i [incr i 10]
        } -result [crep $type $sample($type)] -match column

        test column_delete-range-$type-4.1 {
            Test deletion of out-of-range (unshared, negative)
        } -body {
            tarray::column delete [samplecolumn $type] -4 2
        } -result [crep $type [lrange $sample($type) 3 end]] -match column

        test column_delete-range-$type-4.2 {
            Test deletion of out-of-range (unshared, partial)
        } -body {
            set i [llength $sample($type)]
            tarray::column delete [samplecolumn $type] 130 [incr i 100]
        } -result [crep $type [lrange $sample($type) 0 129]] -match column

        test column_delete-range-$type-4.3 {
            Test deletion of out-of-range (unshared, partial negative)
        } -body {
            tarray::column delete [samplecolumn $type] -10 0
        } -result [crep $type [lrange $sample($type) 1 end]] -match column

        test column_delete-range-$type-4.4 {
            Test deletion of reversed range limits
        } -body {
            tarray::column delete [samplecolumn $type] 60 40
        } -result [crep $type $sample($type)] -match column

        test column_delete-range-$type-4.5 {
            Test deletion of out-of-range (unshared)
        } -body {
            set i [llength $sample($type)]
            tarray::column delete [samplecolumn $type] end+1 end+10
        } -result [crep $type $sample($type)] -match column

        test column_delete-range-$type-5.0 {
            Test deletion of invalid syntax start index
        } -body {
            tarray::column delete [samplecolumn $type] foo 10
        } -returnCodes error -match glob -result *

        test column_delete-range-$type-5.1 {
            Test deletion of invalid syntax end index
        } -body {
            tarray::column delete [samplecolumn $type] 0 foo
        } -returnCodes error -match glob -result *

        test column_delete-range-$type-6.0 {
            Test deletion of all indices from column (shared)
        } -body {
            col_change_and_verify $type [largelist $type] {} delete 0 end
        } -result 0

        test column_delete-range-$type-6.2 {
            Test deletion of all indices from column (unshared, random order)
        } -body {
            set i [llength $sample($type)]
            tarray::column delete [newcolumn $type [lrange $sample($type) 0 3]] 0 [incr i -1]
        } -result [crep $type {}] -match column

        test column_delete-range-$type-7.0 {
            Test attempt to delete element from empty column (shared)
        } -body {
            col_change_and_verify $type {} {} delete 0 0
        } -result 0

        test column_delete-range-$type-7.1 {
            Test attempt to delete element from empty column (unshared)
        } -body {
            tarray::column delete [newcolumn $type {}] 0 end
        } -result [crep $type {}] -match column

        test column_delete-range-$type-7.2 {
            Test attempt to delete element from empty column (unshared)
        } -body {
            tarray::column delete [newcolumn $type {}] end end
        } -result [crep $type {}] -match column

        test column_delete-range-$type-8.0 {
            Delete single element range (shared, leading)
        } -body {
            col_change_and_verify $type $sample($type) [lrange $sample($type) 1 end] delete 0 0
        } -result 0

        test column_delete-range-$type-8.1 {
            Delete single element range (unshared, trailing)
        } -body {
            tarray::column delete [samplecolumn $type] end end
        } -result [crep $type [lrange $sample($type) 0 end-1]] -match column

        test column_delete-range-$type-8.1 {
            Delete single element range (unshared, random)
        } -body {
            tarray::column delete [samplecolumn $type] 32 32
        } -result [crep $type [concat [lrange $sample($type) 0 31] [lrange $sample($type) 33 end]]] -match column
    }

    ################################################################
    # Same tests as above but with span columns

    #
    # column delete index

    foreach type {boolean string any byte double int uint wide} {

        test column_delete-span-index-$type-1.0 {
            Test deletion of first element (shared tclobj)
        } -body {
            tarray::unsupported::lrandom l $type 100000
            spancol_change_and_verify $type $l [lrange $l 1 end] delete 0 
        } -result 0

        test column_delete-span-index-$type-1.1 {
            Test deletion of first element (unshared tclobj)
        } -body {
            tarray::column delete [samplespancolumn $type] 0
        } -result [crep $type [lrange $sample($type) 1 end]] -match column

        test column_delete-span-index-$type-2.0 {
            Test deletion of last element (shared tclobj)
        } -body {
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 0 end-1] delete [expr {[llength $sample($type)]-1}]
        } -result 0

        test column_delete-span-index-$type-2.1 {
            Test deletion of last element (unshared tclobj)
        } -body {
            tarray::column delete [samplespancolumn $type] [expr {[llength $sample($type)]-1}]
        } -result [crep $type [lrange $sample($type) 0 end-1]] -match column

        test column_delete-span-index-$type-2.2 {
            Test deletion of last element (shared tclobj)
        } -body {
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 0 end-1] delete end
        } -result 0

        test column_delete-span-index-$type-2.3 {
            Test deletion of last element (unshared tclobj)
        } -body {
            tarray::column delete [largespancolumn $type] end
        } -result [crep $type [lrange [largelist $type] 0 end-1]] -match column

        test column_delete-span-index-$type-3.0 {
            Test deletion of end element (shared tclobj)
        } -body {
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 0 end-1] delete end
        } -result 0

        test column_delete-span-index-$type-3.1 {
            Test deletion of end element (unshared tclobj)
        } -body {
            tarray::column delete [samplespancolumn $type] end
        } -result [crep $type [lrange $sample($type) 0 end-1]] -match column

        test column_delete-span-index-$type-3.2 {
            Test deletion of end-1 element (shared tclobj)
        } -body {
            spancol_change_and_verify $type $sample($type) [lreplace $sample($type) end-1 end-1] delete end-1
        } -result 0

        test column_delete-span-index-$type-3.3 {
            Test deletion of end+1 element (unshared tclobj)
        } -body {
            tarray::column delete [samplespancolumn $type] end+1
        } -result [crep $type $sample($type)] -match column

        set n -1
        foreach i {1 7 8 9 31 32 33 63 64 65 254} {
            test column_delete-span-index-$type-4.[incr n] {
                Test deletion of intermediate element (shared tclobj)
            } -body {
                spancol_change_and_verify $type $sample($type) [concat [lrange $sample($type) 0 $i-1] [lrange $sample($type) $i+1 end]] delete $i
            } -result 0

            test column_delete-span-index-$type-4.[incr n] {
                Test deletion of intermediate element (unshared tclobj)
            } -body {
                tarray::column delete [samplespancolumn $type] $i
            } -result [crep $type [concat [lrange $sample($type) 0 $i-1] [lrange $sample($type) $i+1 end]]] -match column
        }

        test column_delete-span-index-$type-4.[incr n] {
            Test deletion of intermediate element (large shared tclobj)
        } -body {
            spancol_change_and_verify $type [largelist $type] [concat [lrange [largelist $type] 0 $i-1] [lrange [largelist $type] $i+1 end]] delete $i
        } -result 0

        test column_delete-span-index-$type-4.[incr n] {
            Test deletion of intermediate element (large unshared tclobj)
        } -body {
            tarray::column delete [largespancolumn $type] $i
        } -result [crep $type [concat [lrange [largelist $type] 0 $i-1] [lrange [largelist $type] $i+1 end]]] -match column

        test column_delete-span-index-$type-5.0 {
            Test deletion of out-of-range index
        } -body {
            tarray::column delete [samplespancolumn $type] [expr {[llength $sample($type)] + 10}]
        } -result [crep $type $sample($type)] -match column

        test column_delete-span-index-$type-5.1 {
            Test deletion of out-of-range index (+1)
        } -body {
            tarray::column delete [samplespancolumn $type] [llength $sample($type)]
        } -result [crep $type $sample($type)] -match column

        test column_delete-span-index-$type-5.2 {
            Test deletion of negative index
        } -body {
            tarray::column delete [samplespancolumn $type] -1
        } -result [crep $type $sample($type)] -match column

        test column_delete-span-index-$type-5.3 {
            Test deletion of out-of-range end+1 index
        } -body {
            tarray::column delete [samplespancolumn $type] end+1
        } -result [crep $type $sample($type)] -match column

        test column_delete-span-index-$type-5.4 {
            Test deletion of invalid syntax index
        } -body {
            tarray::column delete [samplespancolumn $type] nonintsyntax
        } -returnCodes error -match glob -result *

        test column_delete-span-index-$type-6.0 {
            Test deletion of element from single element column (shared)
        } -body {
            spancol_change_and_verify $type [list 100] {} delete 0
        } -result 0

        test column_delete-span-index-$type-6.1 {
            Test deletion of element from single element column (unshared)
        } -body {
            tarray::column delete [newspancolumn $type [lrange $sample($type) 0 0]] end
        } -result [crep $type {}] -match column

        test column_delete-span-index-$type-6.0 {
            Test deletion of element from single element column (shared)
        } -body {
            spancol_change_and_verify $type [list 100] {} delete end
        } -result 0

        test column_delete-span-index-$type-7.0 {
            Test attempt to delete element from empty column (shared)
        } -body {
            spancol_change_and_verify $type {} {} delete 0
        } -result 0

        test column_delete-span-index-$type-7.1 {
            Test attempt to delete element from empty column (shared)
        } -body {
            spancol_change_and_verify $type {} {} delete end
        } -result 0

        test column_delete-span-index-$type-7.2 {
            Test deletion of invalid index from empty column (unshared)
        } -body {
            tarray::column delete [newspancolumn $type {}] -1
        } -result [crep $type {}] -match column
    }

    #
    # column delete index list

    foreach type {boolean string any byte double int uint wide} {

        test column_delete-span-indexlist-$type-1.0 {
            Test deletion of leading elements (shared tclobj)
        } -body {
            spancol_change_and_verify $type [largelist $type] [lrange [largelist $type] 3 end] delete {0 1 2}
        } -result 0 

        test column_delete-span-indexlist-$type-1.1 {
            Test deletion of leading elements (unshared tclobj)
        } -body {
            tarray::column delete [samplespancolumn $type] {0 1 2}
        } -result [crep $type [lrange $sample($type) 3 end]] -match column

        test column_delete-span-indexlist-$type-1.2 {
            Test deletion of leading elements (shared tclobj, out of order)
        } -body {
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 4 end] delete {0 2 1 3}
        } -result 0

        test column_delete-span-indexlist-$type-1.3 {
            Test deletion of leading elements (unshared tclobj, reverse order)
        } -body {
            tarray::column delete [largespancolumn $type] {2 1 0}
        } -result [crep $type [lrange [largelist $type] 3 end]] -match column

        test column_delete-span-indexlist-$type-2.0 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set l [largelist $type]
            set i [llength $l]
            incr i -2
            spancol_change_and_verify $type $l [lrange $l 0 end-2] delete $i [incr i]
        } -result 0

        test column_delete-span-indexlist-$type-2.1 {
            Test deletion of trailing elements (unshared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -3
            tarray::column delete [samplespancolumn $type] [list $i [incr i] [incr i]] 
        } -result [crep $type [lrange $sample($type) 0 end-3]] -match column

        test column_delete-span-indexlist-$type-2.2 {
            Test deletion of trailing elements (shared tclobj, out of order)
        } -body {
            set i [llength $sample($type)]
            set ta [samplespancolumn $type]
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 0 end-3] delete [list [incr i -1] [incr i -2] [incr i]]
        } -result 0

        test column_delete-span-indexlist-$type-2.3 {
            Test deletion of trailing elements (unshared tclobj, reverse order)
        } -body {
            set i [llength $sample($type)]
            tarray::column delete [samplespancolumn $type] [list [incr i -1] [incr i -1] [incr i -1]]
        } -result [crep $type [lrange $sample($type) 0 end-3]] -match column

        test column_delete-span-indexlist-$type-3.0 {
            Test deletion of intermediate (shared tclobj, ordered)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            spancol_change_and_verify $type $sample($type) $l2 delete [lsort -increasing -integer $indices]
        } -result 0

        test column_delete-span-indexlist-$type-3.1 {
            Test deletion of intermediate (unshared tclobj, reverse order)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 [largelist $type]
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            cequal [tarray::column delete [largespancolumn $type] [lsort -decreasing -integer $indices]] [crep $type $l2]
        } -result 1

        test column_delete-span-indexlist-$type-3.2 {
            Test deletion of intermediate (shared tclobj, random order)
        } -body {
            # Note duplicate
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 [largelist $type]
            # Deletion must take place back to front. -unique to remove dups
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            spancol_change_and_verify $type [largelist $type] $l2 delete $indices
        } -result 0

        test column_delete-span-indexlist-$type-4.0 {
            Test deletion of out-of-range (unshared, increasing indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            cequal [tarray::column delete [samplespancolumn $type] [lsort -increasing -integer $indices]] [crep $type $l2]
        } -result 1

        test column_delete-span-indexlist-$type-4.1 {
            Test deletion of out-of-range (unshared, reverse indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            cequal [tarray::column delete [samplespancolumn $type] [lsort -decreasing -integer $indices]] [crep $type $l2]
        } -result 1

        test column_delete-span-indexlist-$type-4.2 {
            Test deletion of out-of-range (shared, random indices)
        } -body {
            # Note duplicate 33
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            cequal [tarray::column delete [samplespancolumn $type] $indices] [crep $type $l2]
        } -result 1

        test column_delete-span-indexlist-$type-5.0 {
            Test deletion of invalid syntax indices
        } -body {
            set indices {1 notinteger 63}
            tarray::column delete [samplespancolumn $type] $indices
        } -returnCodes error -match glob -result *

        test column_delete-span-indexlist-$type-5.1 {
            Test deletion of end keyword
        } -body {
            # Note "end" is invalid in a index list
            set indices {1 end 63}
            tarray::column delete [samplespancolumn $type] $indices
        } -returnCodes error -match glob -result *

        test column_delete-span-indexlist-$type-6.0 {
            Test deletion of all indices from column (shared)
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set l [lrange $sample($type) 0 3]
            set ta [newspancolumn $type $l]
            spancol_change_and_verify $type $l {} delete $indices
        } -result 0

        test column_delete-span-indexlist-$type-6.1 {
            Test deletion of all indices from column (shared)
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set l [lrange $sample($type) 0 3]
            set ta [newspancolumn $type $l]
            spancol_change_and_verify $type $l {} delete [lsort -integer -decreasing $indices]
        } -result 0

        test column_delete-span-indexlist-$type-6.2 {
            Test deletion of all indices from column (shared)
        } -body {
            set l [lrange $sample($type) 0 3]
            set ta [newspancolumn $type $l]
            spancol_change_and_verify $type $l {} delete {0 1 2 3}
        } -result 0

        test column_delete-span-indexlist-$type-6.3 {
            Test deletion of all indices from column (unshared, random order)
        } -body {
            set l [lrange $sample($type) 0 3]
            set ta [newspancolumn $type $l]
            spancol_change_and_verify $type $l {} delete {1 0 3 2}
        } -result 0

        test column_delete-span-indexlist-$type-7.0 {
            Test attempt to delete element from empty column (shared)
        } -body {
            set ta [newspancolumn $type {}]
            spancol_change_and_verify $type {} {} delete {0 1 2}
        } -result 0

        test column_delete-span-indexlist-$type-7.1 {
            Test attempt to delete element from empty column (unshared)
        } -body {
            tarray::column delete [newspancolumn $type {}] {0 2 1}
        } -result [crep $type {}] -match column

        test column_delete-span-indexlist-$type-8.0 {
            Delete duplicate indices (shared)
        } -body {
            set ta [samplespancolumn $type]
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 2 end] delete {0 0 1}
        } -result 0

        test column_delete-span-indexlist-$type-8.1 {
            Delete duplicate indices (unshared)
        } -body {
            tarray::column delete [samplespancolumn $type] {4 4}
        } -result [crep $type [concat [lrange $sample($type) 0 3] [lrange $sample($type) 5 end]]] -match column
    }

    #
    # column delete indicesarray

    foreach type {boolean string any byte double int uint wide} {

        test column_delete-span-indices-$type-1.0 {
            Test deletion of leading elements (shared tclobj)
        } -body {
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 2 end] delete [indexcolumn  0 1]
        } -result 0

        test column_delete-span-indices-$type-1.1 {
            Test deletion of leading elements (unshared tclobj)
        } -body {
            tarray::column delete [largespancolumn $type] [indexcolumn {0 1 2}]
        } -result [crep $type [lrange [largelist $type] 3 end]] -match column

        test column_delete-span-indices-$type-1.2 {
            Test deletion of leading elements (shared tclobj, out of order)
        } -body {
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 4 end] delete [indexcolumn {0 2 1 3}]
        } -result 0

        test column_delete-span-indices-$type-1.3 {
            Test deletion of leading elements (unshared tclobj, reverse order)
        } -body {
            tarray::column delete [largespancolumn $type] [indexcolumn {2 1 0}]
        } -result [crep $type [lrange [largelist $type] 3 end]] -match column

        test column_delete-span-indices-$type-2.0 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -2
            set ta [samplespancolumn $type]
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 0 end-2] delete [newspancolumn int [list $i [incr i]]]
        } -result 0

        test column_delete-span-indices-$type-2.1 {
            Test deletion of trailing elements (unshared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -3
            tarray::column delete [samplespancolumn $type] [newspancolumn int [list $i [incr i] [incr i]] ]
        } -result [crep $type [lrange $sample($type) 0 end-3]] -match column

        test column_delete-span-indices-$type-2.2 {
            Test deletion of trailing elements (shared tclobj, out of order)
        } -body {
            set i [llength [largelist $type]]
            spancol_change_and_verify $type [largelist $type] [lrange [largelist $type] 0 end-3] delete [indexcolumn [incr i -1] [incr i -2] [incr i]]
        } -result 0

        test column_delete-span-indices-$type-2.3 {
            Test deletion of trailing elements (unshared tclobj, reverse order)
        } -body {
            set i [llength $sample($type)]
            tarray::column delete [samplespancolumn $type] [indexcolumn [incr i -1] [incr i -1] [incr i -1]]
        } -result [crep $type [lrange $sample($type) 0 end-3]] -match column

        test column_delete-span-indices-$type-3.0 {
            Test deletion of intermediate (shared tclobj, ordered)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254 1023 1024 1025 32535 32536}
            set l2 [largelist $type]
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            # Explicitly order indices
            set indices [tarray::column sort [indexcolumn $indices]]
            spancol_change_and_verify $type [largelist $type] $l2 delete $indices
        } -result 0

        test column_delete-span-indices-$type-3.1 {
            Test deletion of intermediate (unshared tclobj, reverse order)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set indices [tarray::column sort -decreasing [indexcolumn $indices]]
            cequal [tarray::column delete [samplespancolumn $type] $indices] [crep $type $l2]
        } -result 1

        test column_delete-span-indices-$type-3.2 {
            Test deletion of intermediate (shared tclobj, random order)
        } -body {
            # Note duplicate
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 $sample($type)
            # Deletion must take place back to front. -unique to remove dups
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            spancol_change_and_verify $type $sample($type) $l2 delete [indexcolumn $indices]
        } -result 0

        test column_delete-span-indices-$type-4.0 {
            Test deletion of out-of-range (unshared, increasing indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254 1024 2048 10000 32000 50000 65536}
            set l2 [largelist $type]
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength [largelist $type]]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            set indices [tarray::column sort -increasing [indexcolumn $indices]]
            cequal [tarray::column delete [largespancolumn $type] $indices] [crep $type $l2]
        } -result 1

        test column_delete-span-indices-$type-4.1 {
            Test deletion of out-of-range (unshared, reverse indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            set indices [tarray::column sort -decreasing [indexcolumn $indices]]
            cequal [tarray::column delete [samplespancolumn $type] $indices] [crep $type $l2]
        } -result 1

        test column_delete-span-indices-$type-4.2 {
            Test deletion of out-of-range (shared, random indices)
        } -body {
            # Note duplicate 33
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 $sample($type)
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $sample($type)]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            cequal [tarray::column delete [samplespancolumn $type] [indexcolumn $indices]] [crep $type $l2]
        } -result 1

        test column_delete-span-indices-$type-5.0 {
            Test deletion of invalid syntax indices
        } -body {
            set indices {1 notinteger 63}
            tarray::column delete [samplespancolumn $type] $indices
        } -returnCodes error -match glob -result *

        test column_delete-span-indices-$type-5.1 {
            Test deletion of end keyword
        } -body {
            # Note "end" is invalid in a index list
            set indices {1 end 63}
            tarray::column delete [samplespancolumn $type] [indexcolumn $indices]
        } -returnCodes error -match glob -result *

        test column_delete-span-indices-$type-6.0 {
            Test deletion of all indices from column (shared)
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set l [lrange $sample($type) 0 3]
            set ta [newspancolumn $type $l]
            spancol_change_and_verify $type $l {} delete [indexcolumn $indices]
        } -result 0

        test column_delete-span-indices-$type-6.1 {
            Test deletion of all indices from column (shared)
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set l [lrange $sample($type) 0 3]
            set ta [newspancolumn $type $l]
            spancol_change_and_verify $type $l {} delete [lsort -integer -decreasing $indices]
        } -result 0

        test column_delete-span-indices-$type-6.2 {
            Test deletion of all indices from column (shared)
        } -body {
            set l [lrange $sample($type) 0 3]
            set ta [newspancolumn $type $l ]
            spancol_change_and_verify $type $l {} delete [indexcolumn {0 1 2 3}]
        } -result 0

        test column_delete-span-indices-$type-6.3 {
            Test deletion of all indices from column (unshared, random order)
        } -body {
            tarray::column delete [newspancolumn $type [lrange $sample($type) 0 3]] [indexcolumn {1 0 3 2}]
        } -result [crep $type {}] -match column

        test column_delete-span-indices-$type-7.0 {
            Test attempt to delete element from empty column (shared)
        } -body {
            spancol_change_and_verify $type {} {} delete [indexcolumn {0 1 2}]
        } -result 0

        test column_delete-span-indices-$type-7.1 {
            Test attempt to delete element from empty column (unshared)
        } -body {
            tarray::column delete [newspancolumn $type {}] [indexcolumn {0 2 1}]
        } -result [crep $type {}] -match column

        test column_delete-span-indices-$type-8.0 {
            Delete duplicate indices (shared)
        } -body {
            spancol_change_and_verify $type $sample($type)  [lrange $sample($type) 2 end] delete [indexcolumn {0 0 1}]
        } -result 0

        test column_delete-span-indices-$type-8.1 {
            Delete duplicate indices (unshared)
        } -body {
            tarray::column delete [samplespancolumn $type] [indexcolumn {4 4}]
        } -result [crep $type [concat [lrange $sample($type) 0 3] [lrange $sample($type) 5 end]]] -match column
    }


    #
    # column delete range

    foreach type {boolean string any byte double int uint wide} {

        test column_delete-span-range-$type-1.0 {
            Test deletion of leading elements (shared tclobj)
        } -body {
            spancol_change_and_verify $type [largelist $type] [lrange [largelist $type] 2 end] delete 0 1
        } -result 0

        test column_delete-span-range-$type-1.1 {
            Test deletion of leading elements (unshared tclobj)
        } -body {
            tarray::column delete [samplespancolumn $type] 0 63
        } -result [crep $type [lrange $sample($type) 64 end]] -match column

        test column_delete-span-range-$type-2.0 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -1
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 0 126] delete 127 $i
        } -result 0

        test column_delete-span-range-$type-2.1 {
            Test deletion of trailing elements (unshared tclobj, using end)
        } -body {
            tarray::column delete [largespancolumn $type] 129 end
        } -result [crep $type [lrange [largelist $type] 0 128]] -match column

        test column_delete-span-range-$type-2.2 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -128
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 0 126] delete end-$i end
        } -result 0

        test column_delete-span-range-$type-2.3 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set i [llength $sample($type)]
            incr i -128
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 0 126] delete end-$i end+5
        } -result 0

        test column_delete-span-range-$type-3.0 {
            Test deletion of intermediate (shared tclobj)
        } -body {
            spancol_change_and_verify $type $sample($type) [concat [lrange $sample($type) 0 62] [lrange $sample($type) 128 end]] delete 63 127
        } -result 0

        test column_delete-span-range-$type-3.1 {
            Test deletion of intermediate (unshared tclobj)
        } -body {
            tarray::column delete [samplespancolumn $type] 64 128
        } -result [crep $type [concat [lrange $sample($type) 0 63] [lrange $sample($type) 129 end]]] -match column

        test column_delete-span-range-$type-4.0 {
            Test deletion of out-of-range (unshared)
        } -body {
            set i [llength $sample($type)]
            tarray::column delete [samplespancolumn $type] $i [incr i 10]
        } -result [crep $type $sample($type)] -match column

        test column_delete-span-range-$type-4.1 {
            Test deletion of out-of-range (unshared, negative)
        } -body {
            tarray::column delete [samplespancolumn $type] -4 2
        } -result [crep $type [lrange $sample($type) 3 end]] -match column

        test column_delete-span-range-$type-4.2 {
            Test deletion of out-of-range (unshared, partial)
        } -body {
            set i [llength $sample($type)]
            tarray::column delete [samplespancolumn $type] 130 [incr i 100]
        } -result [crep $type [lrange $sample($type) 0 129]] -match column

        test column_delete-span-range-$type-4.3 {
            Test deletion of out-of-range (unshared, partial negative)
        } -body {
            tarray::column delete [samplespancolumn $type] -10 0
        } -result [crep $type [lrange $sample($type) 1 end]] -match column

        test column_delete-span-range-$type-4.4 {
            Test deletion of reversed range limits
        } -body {
            tarray::column delete [samplespancolumn $type] 60 40
        } -result [crep $type $sample($type)] -match column

        test column_delete-span-range-$type-4.5 {
            Test deletion of out-of-range (unshared)
        } -body {
            set i [llength $sample($type)]
            tarray::column delete [samplespancolumn $type] end+1 end+10
        } -result [crep $type $sample($type)] -match column

        test column_delete-span-range-$type-5.0 {
            Test deletion of invalid syntax start index
        } -body {
            tarray::column delete [samplespancolumn $type] foo 10
        } -returnCodes error -match glob -result *

        test column_delete-span-range-$type-5.1 {
            Test deletion of invalid syntax end index
        } -body {
            tarray::column delete [samplespancolumn $type] 0 foo
        } -returnCodes error -match glob -result *

        test column_delete-span-range-$type-6.0 {
            Test deletion of all indices from column (shared)
        } -body {
            spancol_change_and_verify $type [largelist $type] {} delete 0 end
        } -result 0

        test column_delete-span-range-$type-6.2 {
            Test deletion of all indices from column (unshared, random order)
        } -body {
            set i [llength $sample($type)]
            tarray::column delete [newspancolumn $type [lrange $sample($type) 0 3]] 0 [incr i -1]
        } -result [crep $type {}] -match column

        test column_delete-span-range-$type-7.0 {
            Test attempt to delete element from empty column (shared)
        } -body {
            spancol_change_and_verify $type {} {} delete 0 0
        } -result 0

        test column_delete-span-range-$type-7.1 {
            Test attempt to delete element from empty column (unshared)
        } -body {
            tarray::column delete [newspancolumn $type {}] 0 end
        } -result [crep $type {}] -match column

        test column_delete-span-range-$type-7.2 {
            Test attempt to delete element from empty column (unshared)
        } -body {
            tarray::column delete [newspancolumn $type {}] end end
        } -result [crep $type {}] -match column

        test column_delete-span-range-$type-8.0 {
            Delete single element range (shared, leading)
        } -body {
            spancol_change_and_verify $type $sample($type) [lrange $sample($type) 1 end] delete 0 0
        } -result 0

        test column_delete-span-range-$type-8.1 {
            Delete single element range (unshared, trailing)
        } -body {
            tarray::column delete [samplespancolumn $type] end end
        } -result [crep $type [lrange $sample($type) 0 end-1]] -match column

        test column_delete-span-range-$type-8.1 {
            Delete single element range (unshared, random)
        } -body {
            tarray::column delete [samplespancolumn $type] 32 32
        } -result [crep $type [concat [lrange $sample($type) 0 31] [lrange $sample($type) 33 end]]] -match column
    }


}

::tcltest::cleanupTests
