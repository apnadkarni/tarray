# TBD - shared obj tests should check original object not modified
# TBD - tests that traces are triggered

source testutil.tcl

namespace eval tarray::test {
    namespace import ::tcltest::test

    # Note two general types of tests - via a temp variable and directly
    # from the create return value. The difference is that in the
    # former case the value ref count is > 1, and the object needs to
    # be dup'ed while in the latter the ref count is 1 and the called
    # command can directly use it

    ################################################################
    # tarray creation

    # Tests for creating empty tarrays
    foreach type {any boolean byte double int uint wide} {
        test column-create-$type-1.0 {
            Test creation of empty column
        } -body {
            tarray::column create $type
        } -result [rep $type {}]
        test column-create-$type-1.1 {
            Test creation of empty column with preallocation
        } -body {
            tarray::column create $type {} 1000
        } -result [rep $type {}]
    }

    #
    # Tests for creating various lengths with valid values in standard format
    foreach {type values} [array get good] {
        set num -1
        foreach value $values {
            test column-create-$type-2.[incr num] {
                Test creation of column with initializer
            } -body {
                tarray::column create $type $value
            } -result [rep $type $value] -match tarray
        }
    }

    #
    # Tests for invalid types
    foreach {type values} [array get bad] {
        set num -1
        foreach value $values {
            test column-create-$type-3.[incr num] {
                Test invalid values raise error in tarray creation
            } -body {
                tarray::column create $type [list $value]
            } -result * -match glob -returnCodes error
        }
    }
    
    ################################################################
    # Deletion of tarray elements

    #
    # column delete index

    foreach type {boolean any byte double int uint wide} {

        test column_delete-index-$type-1.0 {
            Test deletion of first element (shared tclobj)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta 0
        } -result [rep $type [lrange $known 1 end]] -match tarray

        test column_delete-index-$type-1.1 {
            Test deletion of first element (unshared tclobj)
        } -body {
            tarray::column delete [tarray::column create $type $known] 0
        } -result [rep $type [lrange $known 1 end]] -match tarray

        test column_delete-index-$type-2.0 {
            Test deletion of last element (shared tclobj)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta [expr {[llength $known]-1}]
        } -result [rep $type [lrange $known 0 end-1]] -match tarray

        test column_delete-index-$type-2.1 {
            Test deletion of last element (unshared tclobj)
        } -body {
            tarray::column delete [tarray::column create $type $known] [expr {[llength $known]-1}]
        } -result [rep $type [lrange $known 0 end-1]] -match tarray

        test column_delete-index-$type-3.0 {
            Test deletion of end element (shared tclobj)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta end
        } -result [rep $type [lrange $known 0 end-1]] -match tarray

        test column_delete-index-$type-3.1 {
            Test deletion of end element (unshared tclobj)
        } -body {
            tarray::column delete [tarray::column create $type $known] end
        } -result [rep $type [lrange $known 0 end-1]] -match tarray

        set n -1
        foreach i {1 7 8 9 31 32 33 63 64 65 254} {
            test column_delete-index-$type-4.[incr n] {
                Test deletion of intermediate element (shared tclobj)
            } -body {
                set ta [tarray::column create $type $known]
                tarray::column delete $ta $i
            } -result [rep $type [concat [lrange $known 0 $i-1] [lrange $known $i+1 end]]] -match tarray

            test column_delete-index-$type-4.[incr n] {
                Test deletion of intermediate element (unshared tclobj)
            } -body {
                tarray::column delete [tarray::column create $type $known] $i
            } -result [rep $type [concat [lrange $known 0 $i-1] [lrange $known $i+1 end]]] -match tarray
        }

        test column_delete-index-$type-5.0 {
            Test deletion of out-of-range index
        } -body {
            tarray::column delete [tarray::column create $type $known] [expr {[llength $known] + 10}]
        } -result [rep $type $known] -match tarray

        test column_delete-index-$type-5.1 {
            Test deletion of out-of-range index (+1)
        } -body {
            tarray::column delete [tarray::column create $type $known] [llength $known]
        } -result [rep $type $known] -match tarray

        test column_delete-index-$type-5.2 {
            Test deletion of negative index
        } -body {
            tarray::column delete [tarray::column create $type $known] -1
        } -result [rep $type $known] -match tarray

        test column_delete-index-$type-5.3 {
            Test deletion of invalid syntax index
        } -body {
            tarray::column delete [tarray::column create $type $known] nonintsyntax
        } -returnCodes error -match glob -result *

        test column_delete-index-$type-6.0 {
            Test deletion of element from single element column (shared)
        } -body {
            set ta [tarray::column create $type [lrange $known 0 0]]
            tarray::column delete $ta 0
        } -result [rep $type {}] -match tarray

        test column_delete-index-$type-6.1 {
            Test deletion of element from single element column (unshared)
        } -body {
            tarray::column delete [tarray::column create $type [lrange $known 0 0]] end
        } -result [rep $type {}] -match tarray

        test column_delete-index-$type-7.0 {
            Test attempt to delete element from empty column (shared)
        } -body {
            set ta [tarray::column create $type {}]
            tarray::column delete $ta 0
        } -result [rep $type {}] -match tarray

        test column_delete-index-$type-7.1 {
            Test deletion of invalid index from empty column (unshared)
        } -body {
            tarray::column delete [tarray::column create $type {}] -1
        } -result [rep $type {}] -match tarray
    }

    #
    # column delete index list

    foreach type {boolean any byte double int uint wide} {

        test column_delete-indexlist-$type-1.0 {
            Test deletion of leading elements (shared tclobj)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta {0 1}
        } -result [rep $type [lrange $known 2 end]] -match tarray

        test column_delete-indexlist-$type-1.1 {
            Test deletion of leading elements (unshared tclobj)
        } -body {
            tarray::column delete [tarray::column create $type $known] {0 1 2}
        } -result [rep $type [lrange $known 3 end]] -match tarray

        test column_delete-indexlist-$type-1.2 {
            Test deletion of leading elements (shared tclobj, out of order)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta {0 2 1 3}
        } -result [rep $type [lrange $known 4 end]] -match tarray

        test column_delete-indexlist-$type-1.3 {
            Test deletion of leading elements (unshared tclobj, reverse order)
        } -body {
            tarray::column delete [tarray::column create $type $known] {2 1 0}
        } -result [rep $type [lrange $known 3 end]] -match tarray

        test column_delete-indexlist-$type-2.0 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set i [llength $known]
            incr i -2
            set ta [tarray::column create $type $known]
            tarray::column delete $ta [list $i [incr i]]
        } -result [rep $type [lrange $known 0 end-2]] -match tarray

        test column_delete-indexlist-$type-2.1 {
            Test deletion of trailing elements (unshared tclobj)
        } -body {
            set i [llength $known]
            incr i -3
            tarray::column delete [tarray::column create $type $known] [list $i [incr i] [incr i]] 
        } -result [rep $type [lrange $known 0 end-3]] -match tarray

        test column_delete-indexlist-$type-2.2 {
            Test deletion of trailing elements (shared tclobj, out of order)
        } -body {
            set i [llength $known]
            set ta [tarray::column create $type $known]
            tarray::column delete $ta [list [incr i -1] [incr i -2] [incr i]]
        } -result [rep $type [lrange $known 0 end-3]] -match tarray

        test column_delete-indexlist-$type-2.3 {
            Test deletion of trailing elements (unshared tclobj, reverse order)
        } -body {
            set i [llength $known]
            tarray::column delete [tarray::column create $type $known] [list [incr i -1] [incr i -1] [incr i -1]]
        } -result [rep $type [lrange $known 0 end-3]] -match tarray

        test column_delete-indexlist-$type-3.0 {
            Test deletion of intermediate (shared tclobj, ordered)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $known
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set ta [tarray::column create $type $known]
            tarray_compare [tarray::column delete $ta [lsort -increasing -integer $indices]] [rep $type $l2]
        } -result 1

        test column_delete-indexlist-$type-3.1 {
            Test deletion of intermediate (unshared tclobj, reverse order)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $known
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            tarray_compare [tarray::column delete [tarray::column create $type $known] [lsort -decreasing -integer $indices]] [rep $type $l2]
        } -result 1

        test column_delete-indexlist-$type-3.2 {
            Test deletion of intermediate (shared tclobj, random order)
        } -body {
            # Note duplicate
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 $known
            # Deletion must take place back to front. -unique to remove dups
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set ta [tarray::column create $type $known]
            tarray_compare [tarray::column delete $ta $indices] [rep $type $l2]
        } -result 1


        test column_delete-indexlist-$type-4.0 {
            Test deletion of out-of-range (unshared, increasing indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $known
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $known]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            tarray_compare [tarray::column delete [tarray::column create $type $known] [lsort -increasing -integer $indices]] [rep $type $l2]
        } -result 1

        test column_delete-indexlist-$type-4.1 {
            Test deletion of out-of-range (unshared, reverse indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $known
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $known]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            tarray_compare [tarray::column delete [tarray::column create $type $known] [lsort -decreasing -integer $indices]] [rep $type $l2]
        } -result 1

        test column_delete-indexlist-$type-4.2 {
            Test deletion of out-of-range (shared, random indices)
        } -body {
            # Note duplicate 33
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 $known
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $known]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            tarray_compare [tarray::column delete [tarray::column create $type $known] $indices] [rep $type $l2]
        } -result 1

        test column_delete-indexlist-$type-5.0 {
            Test deletion of invalid syntax indices
        } -body {
            set indices {1 notinteger 63}
            tarray::column delete [tarray::column create $type $known] $indices
        } -returnCodes error -match glob -result *

        test column_delete-indexlist-$type-5.1 {
            Test deletion of end keyword
        } -body {
            # Note "end" is invalid in a index list
            set indices {1 end 63}
            tarray::column delete [tarray::column create $type $known] $indices
        } -returnCodes error -match glob -result *

        test column_delete-indexlist-$type-6.0 {
            Test deletion of all indices from column (shared)
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set ta [tarray::column create $type [lrange $known 0 3]]
            tarray::column delete $ta $indices
        } -result [rep $type {}] -match tarray

        test column_delete-indexlist-$type-6.1 {
            Test deletion of all indices from column (shared)
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set ta [tarray::column create $type [lrange $known 0 3]]
            tarray::column delete $ta [lsort -integer -decreasing $indices]
        } -result [rep $type {}] -match tarray

        test column_delete-indexlist-$type-6.2 {
            Test deletion of all indices from column (shared)
        } -body {
            set ta [tarray::column create $type [lrange $known 0 3]]
            tarray::column delete $ta {0 1 2 3}
        } -result [rep $type {}] -match tarray

        test column_delete-indexlist-$type-6.2 {
            Test deletion of all indices from column (unshared, random order)
        } -body {
            set ta [tarray::column create $type [lrange $known 0 3]]
            tarray::column delete $ta {1 0 3 2}
        } -result [rep $type {}] -match tarray

        test column_delete-indexlist-$type-7.0 {
            Test attempt to delete element from empty column (shared)
        } -body {
            set ta [tarray::column create $type {}]
            tarray::column delete $ta {0 1 2}
        } -result [rep $type {}] -match tarray

        test column_delete-indexlist-$type-7.1 {
            Test attempt to delete element from empty column (unshared)
        } -body {
            tarray::column delete [tarray::column create $type {}] {0 2 1}
        } -result [rep $type {}] -match tarray

        test column_delete-indexlist-$type-8.0 {
            Delete duplicate indices (shared)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta {0 0 1}
        } -result [rep $type [lrange $known 2 end]] -match tarray

        test column_delete-indexlist-$type-8.1 {
            Delete duplicate indices (unshared)
        } -body {
            tarray::column delete [tarray::column create $type $known] {4 4}
        } -result [rep $type [concat [lrange $known 0 3] [lrange $known 5 end]]] -match tarray
    }

    #
    # column delete indicesarray

    foreach type {boolean any byte double int uint wide} {

        test column_delete-indices-$type-1.0 {
            Test deletion of leading elements (shared tclobj)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta [tarray::column create int {0 1}]
        } -result [rep $type [lrange $known 2 end]] -match tarray

        test column_delete-indices-$type-1.1 {
            Test deletion of leading elements (unshared tclobj)
        } -body {
            tarray::column delete [tarray::column create $type $known] [tarray::column create int {0 1 2}]
        } -result [rep $type [lrange $known 3 end]] -match tarray

        test column_delete-indices-$type-1.2 {
            Test deletion of leading elements (shared tclobj, out of order)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta [tarray::column create int {0 2 1 3}]
        } -result [rep $type [lrange $known 4 end]] -match tarray

        test column_delete-indices-$type-1.3 {
            Test deletion of leading elements (unshared tclobj, reverse order)
        } -body {
            tarray::column delete [tarray::column create $type $known] [tarray::column create int {2 1 0}]
        } -result [rep $type [lrange $known 3 end]] -match tarray

        test column_delete-indices-$type-2.0 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set i [llength $known]
            incr i -2
            set ta [tarray::column create $type $known]
            tarray::column delete $ta [tarray::column create int [list $i [incr i]]]
        } -result [rep $type [lrange $known 0 end-2]] -match tarray

        test column_delete-indices-$type-2.1 {
            Test deletion of trailing elements (unshared tclobj)
        } -body {
            set i [llength $known]
            incr i -3
            tarray::column delete [tarray::column create $type $known] [tarray::column create int [list $i [incr i] [incr i]] ]
        } -result [rep $type [lrange $known 0 end-3]] -match tarray

        test column_delete-indices-$type-2.2 {
            Test deletion of trailing elements (shared tclobj, out of order)
        } -body {
            set i [llength $known]
            set ta [tarray::column create $type $known]
            tarray::column delete $ta [list [incr i -1] [incr i -2] [incr i]]
        } -result [rep $type [lrange $known 0 end-3]] -match tarray

        test column_delete-indices-$type-2.3 {
            Test deletion of trailing elements (unshared tclobj, reverse order)
        } -body {
            set i [llength $known]
            tarray::column delete [tarray::column create $type $known] [tarray::column create int [list [incr i -1] [incr i -1] [incr i -1]]]
        } -result [rep $type [lrange $known 0 end-3]] -match tarray

        test column_delete-indices-$type-3.0 {
            Test deletion of intermediate (shared tclobj, ordered)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $known
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set ta [tarray::column create $type $known]
            # Explicitly order indices
            set indices [tarray::column sort [tarray::column create int $indices]]
            tarray_compare [tarray::column delete $ta $indices] [rep $type $l2]
        } -result 1

        test column_delete-indices-$type-3.1 {
            Test deletion of intermediate (unshared tclobj, reverse order)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $known
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set indices [tarray::column sort -decreasing [tarray::column create int $indices]]
            tarray_compare [tarray::column delete [tarray::column create $type $known] $indices] [rep $type $l2]
        } -result 1

        test column_delete-indices-$type-3.2 {
            Test deletion of intermediate (shared tclobj, random order)
        } -body {
            # Note duplicate
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 $known
            # Deletion must take place back to front. -unique to remove dups
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set ta [tarray::column create $type $known]
            tarray_compare [tarray::column delete $ta [tarray::column create int $indices]] [rep $type $l2]
        } -result 1


        test column_delete-indices-$type-4.0 {
            Test deletion of out-of-range (unshared, increasing indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $known
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $known]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            set indices [tarray::column sort -increasing [tarray::column create int $indices]]
            tarray_compare [tarray::column delete [tarray::column create $type $known] $indices] [rep $type $l2]
        } -result 1

        test column_delete-indices-$type-4.1 {
            Test deletion of out-of-range (unshared, reverse indices)
        } -body {
            set indices {1 7 8 9 31 32 33 63 64 65 254}
            set l2 $known
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $known]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            set indices [tarray::column sort -decreasing [tarray::column create int $indices]]
            tarray_compare [tarray::column delete [tarray::column create $type $known] $indices] [rep $type $l2]
        } -result 1

        test column_delete-indices-$type-4.2 {
            Test deletion of out-of-range (shared, random indices)
        } -body {
            # Note duplicate 33
            set indices {1 254 64 33 7 65 8 33 9 31 32 63}
            set l2 $known
            # Deletion must take place back to front
            foreach i [lsort -integer -decreasing -unique $indices] {
                set l2 [lreplace $l2 $i $i]
            }
            set i [llength $known]
            set indices [linsert [linsert $indices 0 $i] 32 [incr i 10]]
            lappend indices -1
            tarray_compare [tarray::column delete [tarray::column create $type $known] $indices] [rep $type $l2]
        } -result 1

        test column_delete-indices-$type-5.0 {
            Test deletion of invalid syntax indices
        } -body {
            set indices {1 notinteger 63}
            tarray::column delete [tarray::column create $type $known] $indices
        } -returnCodes error -match glob -result *

        test column_delete-indices-$type-5.1 {
            Test deletion of end keyword
        } -body {
            # Note "end" is invalid in a index list
            set indices {1 end 63}
            tarray::column delete [tarray::column create $type $known] $indices
        } -returnCodes error -match glob -result *

        test column_delete-indices-$type-6.0 {
            Test deletion of all indices from column (shared)
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set ta [tarray::column create $type [lrange $known 0 3]]
            tarray::column delete $ta $indices
        } -result [rep $type {}] -match tarray

        test column_delete-indices-$type-6.1 {
            Test deletion of all indices from column (shared)
        } -body {
            set i -1
            set indices {}
            time {lappend indices [incr i]} 256
            set ta [tarray::column create $type [lrange $known 0 3]]
            tarray::column delete $ta [lsort -integer -decreasing $indices]
        } -result [rep $type {}] -match tarray

        test column_delete-indices-$type-6.2 {
            Test deletion of all indices from column (shared)
        } -body {
            set ta [tarray::column create $type [lrange $known 0 3]]
            tarray::column delete $ta {0 1 2 3}
        } -result [rep $type {}] -match tarray

        test column_delete-indices-$type-6.2 {
            Test deletion of all indices from column (unshared, random order)
        } -body {
            tarray::column delete [tarray::column create $type [lrange $known 0 3]] {1 0 3 2}
        } -result [rep $type {}] -match tarray

        test column_delete-indices-$type-7.0 {
            Test attempt to delete element from empty column (shared)
        } -body {
            set ta [tarray::column create $type {}]
            tarray::column delete $ta {0 1 2}
        } -result [rep $type {}] -match tarray

        test column_delete-indices-$type-7.1 {
            Test attempt to delete element from empty column (unshared)
        } -body {
            tarray::column delete [tarray::column create $type {}] {0 2 1}
        } -result [rep $type {}] -match tarray

        test column_delete-indices-$type-8.0 {
            Delete duplicate indices (shared)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta {0 0 1}
        } -result [rep $type [lrange $known 2 end]] -match tarray

        test column_delete-indices-$type-8.1 {
            Delete duplicate indices (unshared)
        } -body {
            tarray::column delete [tarray::column create $type $known] {4 4}
        } -result [rep $type [concat [lrange $known 0 3] [lrange $known 5 end]]] -match tarray
    }


    #
    # column delete range

    foreach type {boolean any byte double int uint wide} {

        test column_delete-range-$type-1.0 {
            Test deletion of leading elements (shared tclobj)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta 0 1
        } -result [rep $type [lrange $known 2 end]] -match tarray

        test column_delete-range-$type-1.1 {
            Test deletion of leading elements (unshared tclobj)
        } -body {
            tarray::column delete [tarray::column create $type $known] 0 63
        } -result [rep $type [lrange $known 64 end]] -match tarray

        test column_delete-range-$type-2.0 {
            Test deletion of trailing elements (shared tclobj)
        } -body {
            set i [llength $known]
            incr i -1
            set ta [tarray::column create $type $known]
            tarray::column delete $ta 127 $i
        } -result [rep $type [lrange $known 0 126]] -match tarray

        test column_delete-range-$type-2.1 {
            Test deletion of trailing elements (unshared tclobj, using end)
        } -body {
            tarray::column delete [tarray::column create $type $known] 129 end
        } -result [rep $type [lrange $known 0 128]] -match tarray

        test column_delete-range-$type-3.0 {
            Test deletion of intermediate (shared tclobj)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta 63 127
        } -result [rep $type [concat [lrange $known 0 62] [lrange $known 128 end]]] -match tarray

        test column_delete-range-$type-3.1 {
            Test deletion of intermediate (unshared tclobj)
        } -body {
            tarray::column delete [tarray::column create $type $known] 64 128
        } -result [rep $type [concat [lrange $known 0 63] [lrange $known 129 end]]] -match tarray

        test column_delete-range-$type-4.0 {
            Test deletion of out-of-range (unshared)
        } -body {
            set i [llength $known]
            tarray::column delete [tarray::column create $type $known] $i [incr i 10]
        } -result [rep $type $known] -match tarray

        test column_delete-range-$type-4.1 {
            Test deletion of out-of-range (unshared, negative)
        } -body {
            tarray::column delete [tarray::column create $type $known] -4 2
        } -result [rep $type [lrange $known 3 end]] -match tarray

        test column_delete-range-$type-4.2 {
            Test deletion of out-of-range (unshared, partial)
        } -body {
            set i [llength $known]
            tarray::column delete [tarray::column create $type $known] 130 [incr i 100]
        } -result [rep $type [lrange $known 0 129]] -match tarray

        test column_delete-range-$type-4.3 {
            Test deletion of out-of-range (unshared, partial negative)
        } -body {
            tarray::column delete [tarray::column create $type $known] -10 0
        } -result [rep $type [lrange $known 1 end]] -match tarray

        test column_delete-range-$type-4.4 {
            Test deletion of reversed range limits
        } -body {
            tarray::column delete [tarray::column create $type $known] 60 40
        } -result [rep $type $known] -match tarray

        test column_delete-range-$type-5.0 {
            Test deletion of invalid syntax start index
        } -body {
            tarray::column delete [tarray::column create $type $known] foo 10
        } -returnCodes error -match glob -result *

        test column_delete-range-$type-5.1 {
            Test deletion of invalid syntax end index
        } -body {
            tarray::column delete [tarray::column create $type $known] 0 foo
        } -returnCodes error -match glob -result *

        test column_delete-range-$type-6.0 {
            Test deletion of all indices from column (shared)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta 0 end
        } -result [rep $type {}] -match tarray

        test column_delete-range-$type-6.2 {
            Test deletion of all indices from column (unshared, random order)
        } -body {
            set i [llength $known]
            tarray::column delete [tarray::column create $type [lrange $known 0 3]] 0 [incr i -1]
        } -result [rep $type {}] -match tarray

        test column_delete-range-$type-7.0 {
            Test attempt to delete element from empty column (shared)
        } -body {
            set ta [tarray::column create $type {}]
            tarray::column delete $ta 0 0
        } -result [rep $type {}] -match tarray

        test column_delete-range-$type-7.1 {
            Test attempt to delete element from empty column (unshared)
        } -body {
            tarray::column delete [tarray::column create $type {}] 0 end
        } -result [rep $type {}] -match tarray

        test column_delete-range-$type-8.0 {
            Delete single element range (shared, leading)
        } -body {
            set ta [tarray::column create $type $known]
            tarray::column delete $ta 0 0
        } -result [rep $type [lrange $known 1 end]] -match tarray

        test column_delete-range-$type-8.1 {
            Delete single element range (unshared, trailing)
        } -body {
            tarray::column delete [tarray::column create $type $known] end end
        } -result [rep $type [lrange $known 0 end-1]] -match tarray

        test column_delete-range-$type-8.1 {
            Delete single element range (unshared, random)
        } -body {
            tarray::column delete [tarray::column create $type $known] 32 32
        } -result [rep $type [concat [lrange $known 0 31] [lrange $known 33 end]]] -match tarray
    }

    ::tcltest::cleanupTests
}
