text {
    ((= chap_column_ref "Column commands"))
    Version {taversion}
    include::header.ad[]

    ((author "Ashok P. Nadkarni"))
}


text {
    == Introduction

    The tarray extension implements typed arrays and associated
    commands `column` and ((^ chap_table_ref table)). This page provides
    reference documentation for commands related to typed columns. See
    the link:index.html[main contents] for guides and other reference
    documentation.

    === Installation and loading

    include::download.ad[]
    
} shell {
    package require tarray
    namespace import tarray::column
}

text {
    === Columns

    A typed array column contains elements of a single
    type, such as `int` or `string`, that is specified
    when it is created. The command `tarray::column` operates on
    typed columns including searching and sorting operations.

    Related to columns, are ((^ chap_table_ref tables))
    which are ordered sequences of typed columns.

} text {
    ((=== sect_column_types Types))

    include::types.ad[]

    ((=== sect_column_indices Indices))

    include::indices.ad[]
} text {
    == Command reference

    All commands are located in the `tarray` namespace.

    === Standard Options

    Commands returning values from columns support the standard options
    shown in ((^ tab_column_stdopts)).

    ((.Table tab_column_stdopts "Standard options"))
    [cols="20,80"]
    |===

    |`-list`
    |The values are returned as a Tcl list.

    |`-dict`
    |The values are returned as a dictionary keyed by the corresponding
     indices.

    |`-column`
    |The values are returned as a typed column. This is the default if none
     of the other options is specified.
    
    |===
} text {
    === Commands

    // Turn off section numbering for command definitions
    :!sectnums:

    ((cmddef column_bitand "column & _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math &"))`.

    ((cmddef column_and "column && _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math &&"))`.

    ((cmddef column_mul "column * _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math *"))`.

    ((cmddef column_plus "column + _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math +"))`.

    ((cmddef column_minus "column - _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math \\-"))`.

    ((cmddef column_div "column / _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math /"))`.

    ((cmddef column_bitor "column | _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math \|"))`.

    ((cmddef column_or "column || _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math \|\|"))`.

    ((cmddef column_bitxor "column ^ _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math \^"))`.

    ((cmddef column_xor "column ^^ _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math \^\^"))`.

    ((cmddef column_equalequal "column == _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math =\\="))`.

    ((cmddef column_notequal "column != _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math !\\="))`.

    ((cmddef column_lt "column < _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math <"))`.

    ((cmddef column_le "column \\<= _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math \\<\\="))`.

    ((cmddef column_gt "column > _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math >"))`.

    ((cmddef column_ge "column >= _OPERAND_ ?_OPERAND_...?"))
    Alias for `((^ column_math "column math >\\="))`.

    ((cmddef column_bitmap0 "column bitmap0 _COUNT_ ?_INDICES_?"))
    Returns a new boolean column of size _COUNT_ with all elements set to
    `0`. If argument _INDICES_ is specified, the elements at those
    position are set to `1`. 

    ((cmddef column_bitmap1 "column bitmap1 _COUNT_ ?_INDICES_?"))
    Returns a new boolean column of size _COUNT_ with all elements set to
    `1`. If argument _INDICES_ is specified, the elements at those
    position are set to `0`. 
    
    ((cmddef column_cast "column cast _COLUMN_ _COLTYPE_"))
    _DEPRECATED_. Returns a new column of type _COLTYPE_ containing elements
    of _COLUMN_ cast to _COLTYPE_. This command is deprecated. Use
    ((^ column_create "column create")) instead.

    ((cmddef column_count "column count ?-range _RANGE_? ?-among _INDICES_? ?-not? ?-nocase? ?_OPER_? _COLUMN_ _VALUE_"))

    Counts the number of matches for a value in the elements in a column.
    See the column search command for a description of the various options.
    Note that if the `-among` is specified and an index occurs multiple times
    in _INDICES_, it will be counted multiple times.
} text {
    ((cmddef column_create "column create _TYPE_ ?_INITIALIZER_? ?_INITSIZE_?"))

    Returns a typed array of the type _TYPE_ which must be one of one of valid
    types described in ((^ sect_column_types Types)).
    If _INITIALIZER_ is specified, it is the
    initial content of the typed array and can be either a column of any
    compatible type or
    a list containing elements of
    the appropriate type. For performance reasons, the _INITSIZE_ argument may
    be specified to indicate how many slots to preallocate for the array.
    This is only treated as a hint and actual size allocated may differ.
} text {
    ((cmddef column_delete "column delete _COLUMN_ _INDEX_"))

    ((cmddef column_delete_1 "column delete _COLUMN_ _INDEXLIST_"))

    ((cmddef column_delete_2 "column delete _COLUMN_ _LOW_ _HIGH_"))

    Returns a typed column with all specified elements deleted. Indices are
    specified in any of the forms described in ((^ sect_column_indices)) and may contain
    duplicates. Out-of-range indices are ignored.

    ((cmddef column_equal "column equal _COLA_ _COLB_"))

    Returns 1 if the specified columns have the same number of elements
    and corresponding elements of the two columns are equal. If the column
    types are not the same, comparison is done by converting numeric
    elements to strings if either column is non-numeric, conversion to
    doubles if either column is of type `double`, and conversion to
    wide integers otherwise. Note that this means, for example, that
    when comparing a column of type `int` to one of type `any` or `string`,
    the value `16` will not equate to the string `0x10`.

    The command will raise an error if either argument is not a column.
    
    Also see the related command ((^ column_identical "column identical"))
    which applies a stricter definition of equality.

    ((cmddef column_fill "column fill _COLUMN_ _VALUE_ _INDEX_"))

    ((cmddef column_fill_1 "column fill _COLUMN_ _VALUE_ _INDEXLIST_"))

    ((cmddef column_fill_2 "column fill _COLUMN_ _VALUE_ _LOW_ _HIGH_"))

    Returns a typed column with specified indices set to _VALUE_. Indices are
    specified in any of the forms described in ((^ sect_column_indices)) and must follow
    the rules described there. The index keyword `end` refers to the current
    last occupied position in the column. The size of the array will be
    extended if necessary provided the specified indices do not have gaps
    beyond the current column size.

    ((cmddef column_get "column get ?_OPTIONS_? _COLUMN_ _INDEXLIST_"))

    Returns the values from a typed column at the indices specified as 
    ((^ sect_column_indices "index list")). Any of the
    ((^ tab_column_stdopts)) may be specified with this
    command.

    ((cmddef column_groupby "column groupby _METHOD_ _COMPUTE_ _COLUMN_ ?_ARG ...?"))

    The command first places the elements of the column _COLUMN_
    into _buckets_  based on the _METHOD_ argument described
    later. It then computes a value for each bucket based on the
    _COMPUTE_ argument.
    The return value of the command is a table with two columns named
    `Bucket` and the title-ized version of `_COMPUTE_`, for example
    `Count` when `_COMPUTE_` is `count`. The elements
    of the `Bucket` column identify the bucket, while the second
    column contains the computed result for each bucket.

    If _COMPUTE_ is `count`, the bucket result is the
    number of values that fall into that bucket. The second column
    of the command result is then an integer column named `Count`
    containing the count for each bucket.

    If _COMPUTE_ is `sum`, the bucket result is the sum
    of all values falling into that bucket. The second result column
    the command result is a column named `Sum` containing the sum for
    each bucket. The column type is `wide` if _COLUMN_ is any
    integral type and `double` otherwise.

    If _COMPUTE_ is `indices`, the bucket result is an index column
    containing the indices of the elements whose values fall into that
    bucket. The second column of the command result is named `Indices`
    and of
    type `any`. Each element of this column is itself an integer
    column containing the indices for the corresponding bucket.

    Finally, if _COMPUTE_ is `values`, the bucket result is
    a column, of the same type as _COLUMN_, containing the actual
    values that fell into that bucket. The second column of
    command result, named `Values`, is a column of type `any`.
    Each element of this
    column is a column, of the same type as _COLUMN_, containing the
    values in the bucket.

    The grouping of _COLUMN_ values into buckets is based on the
    _METHOD_ argument which may be either `command` or
    `equalintervals`. In the former case, the syntax of the command is
} syntax {
    column groupby command _COMPUTE_ _COLUMN_ _CMDPREFIX_
} text {
    _CMDPREFIX_ is called for every element of _COLUMN_. Each
    invocation has two additional arguments appended -- the index of
    the element being passed and its value. The element is then
    placed into the bucket identified by the returned value from the
    invocation. If `_CMDPREFIX_` completes with a `break` control
    code, no further elements are processed. If it completes with a
    `continue` return code, that particular iteration is ignored and
    not included in the result. 

    The returned table's `Bucket` column is of type `any` and comprises
    of the return values of _CMDPREFIX_ which
    identify the buckets. The second column depends on
    the _COMPUTE_ argument as described earlier.

    The command syntax when _METHOD_ is `equalintervals` is
} syntax {
    column groupby equalintervals _COMPUTE_ _COLUMN_ _NINTERVALS_ ?options?
} text {
    In this case, each bucket is a interval of equal size
    (except for possibly the last in case of value range overflow).
    The command places the values of the column, which
    must be of numeric type, into these _NINTERVALS_ buckets.
    If no options are specified, the first
    bucket has a lower bound that is the minimum value in the
    column. The size of each bucket is the minimum size required so
    that the maximum value is included in a bucket.

    If the `-min` option is specified the associated value is used as
    the lower bound of the first bucket. If there happen to be any
    values in the column smaller than this, they are ignored in the
    returned result.

    Similarly, if the `-max` option is specified, any values greater than the
    associated option value are ignored.

    The `Bucket` column of the returned table is of the same type as _COLUMN_
    and contains _NINTERVALS_ elements each of which is the lower bound of
    the corresponding bucket. Again,
    the second column is based on the _COMPUTE_ argument as
    described earlier.

    ((cmddef column_identical "column identical _COLA_ _COLB_"))

    Returns 1 if both columns are of the same type, have the
    same number of elements
    and corresponding elements of the two columns are equal.

    The command will raise an error if either argument is not a column.
    
    Also see the related command ((^ column_equal "column equal"))
    which applies a looser definition of equality.

    ((cmddef column_index "column index _COLUMN_ _INDEX_"))

    Returns the value of the element at the position specified by _INDEX_
    which is a single ((^ sect_column_indices index)).

    ((cmddef column_inject "column inject _COLUMN_ _VALUES_ _FIRST_"))
    
    Inserts _VALUES_, a list of values or a column of the same type
    as _COLUMN_, at the position _FIRST_ and returns the resulting column.
    If _FIRST_ is `end`, the values are
    appended to the column. In all cases, the command may extend the array
    if necessary.
    
    ((cmddef column_insert "column insert _COLUMN_ _VALUE_ _FIRST_ ?_COUNT_?"))

    Inserts _COUNT_ (default 1) elements with value _VALUE_ at position
    _FIRST_ and returns the new column.
    In all cases, the command may extend the array if necessary.

    ((cmddef column_intersect3 "column intersect3 ?-nocase? _COLUMNA_ _COLUMNB_"))

    Returns a list of three columns, the first containing elements common to
    both _COLUMNA_ and _COLUMNB_, the second containing elements only present in
    _COLUMNA_ and the third containing elements only present in _COLUMNB_. Both
    columns must be of the same type. The elements in each returned column
    are in arbitrary order.

    The columns may contain duplicate elements. These are treated as
    distinct so for example if _COLUMNA_ contain 5 elements with value `A`,
    and _COLUMNB_ contains only 3 such elements, then the first column in the
    result will contain two `A` elements and the second column will contain
    three.

    Option `-nocase` only has effect if the column type is `any` or `string`.
    If specified, elements are compared in case-insensitive mode.

    ((cmddef column_lookup "column lookup _COLUMN_ ?_LOOKUPKEY_?"))

    The command returns the index of an element in _COLUMN_ that exactly
    matches _LOOKUPKEY_ or -1 if not found. If _LOOKUPKEY_ is not specified,
    command builds an internal dictionary (see below) and the return value
    is an empty string.

    _COLUMN_ must be a column of type `string`. Unlike the column search
    command, the returned index is not necessarily that of the first
    occurence in cases where _LOOKUPKEY_ occurs multiple times in the column.

    The command is usually much faster than column search because it is
    based on an internal dictionary that maps string values to their
    position indices in the column. This internal dictionary is either
    created when the command is called without the optional _LOOKUPKEY_
    argument, or is built in incremental fashion with each column lookup
    call.

    In the current implementation, this dictionary is maintained in a loose
    or lazy manner and internally does not always reflect the actual content
    of the column. However, the return value of the command is always
    accurate.
    
    ((cmddef column_loop "column loop _VAR_ _VALUES_ _SCRIPT_"))
    ((cmddef column_loop_indexed "column loop _INDEXVAR_ _VAR_ _VALUES_ _SCRIPT_"))
    See ((^ tarray_loop loop)).
    
    ((cmddef column_math "column math _OPERATION_ _OPERAND_ ?_OPERAND_...?"))

    Performs the specified mathematical operation _OPERATION_ on the
    given operands. The possible operations are shown in
    ((^ tab_column_math_ops)) below.

    The operands may be any combination of scalar numerical values
    and columns of appropriate types shown in the table.
    If multiple columns are specified, they may be of differing types.
    All columns must have the same number of elements.
    
    If every operand is a scalar, the return value is also a scalar
    numerical value computed in similar (but not identical) fashion to
    the Tcl `expr` command.

    For arithmetic operations,
    if at least one operand is a column, the return value is
    a column whose type depends on the type of the ''widest''
    operand. For example, if _any_ column or scalar is a double, the
    resulting column will be of type `double`. For this purpose,
    the type `double` is considered wider than type `wide`.
    The value of each element of the result column is computed
    by invoking the specified operation on the corresponding elements
    of the operand columns. Any scalar
    operands specified are treated as columns of the appropriate type
    and size all of whose elements are equal to that scalar value.
    For arithmetic operations, elements of `boolean` columns are
    treated as having integer values `0` and `1`.
    If the result type is double, all computation is done by
    is done by converting each operand (or element of an operand) to
    a double. Otherwise all computation is done using 64-bit integers
    and converted back to the result type. Columns of type `any`
    and `string` are not allowed for arithmetic operations.

    For logical operations like `&&` and comparisons like `==`,
    the returned column is always boolean. Columns of type `any`
    and `string` are not allowed.

    For relational operations, columns of any type are allowed and
    are type promoted for comparisons as for arithmetic operations
    with the difference that any non-numeric operand will result
    in string based comparisons.

    ((.Table tab_column_math_ops "Column math operators"))
    [cols="10,60,30", options="header"]
    |===
    |Operator
    |Description
    |Allowed column types
                                                            
    |`+`
    |Adds all specified operands.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`
    
    |`-`
    |Subtracts all remaining operands from the first operand.
    Note the behaviour when a single operand is specified is different
    from the behaviour of the Tcl `expr` or `tcl::mathop::-` commands.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`

    |`*`
    |Multiplies all specified operands.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`

    |`/`
    |Successively divides the first operand by each subsequent operand.
    Note the behaviour when a single operand is specified is different
    from the behaviour of the Tcl `expr` or `tcl::mathop::/` commands.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`

    |`&`
    |Performs a bitwise-and operation on all the operands.
    |`boolean`, `byte`, `int`, `uint`, `wide`

    |`&&`
    |Performs a logical-and operation on all the operands.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`

    |`\|`
    |Performs a bitwise-or operation on all the operands.
    |`boolean`, `byte`, `int`, `uint`, `wide`

    |`\|\|`
    |Performs a logical-or operation on all the operands.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`

    |`^`
    |Performs a bitwise-xor operation on all the operands.
    |`boolean`, `byte`, `int`, `uint`, `wide`

    |`^^`
    |Performs a logical-xor operation on all the operands.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`

    |`==`
    |Compares each operand against the next for equality.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`, `any`, `string`
    
    |`!=`
    |Compares each operand against the next for inequality. Unlike the
    other operators, this requires exactly two arguments.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`, `any`, `string`
    
    |`<`
    |Compares whether each operand is less than the next.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`, `any`, `string`
    
    |`<=`
    |Compares whether each operand is less than or equal to the next.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`, `any`, `string`
    
    |`>`
    |Compares whether each operand is greater than the next.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`, `any`, `string`
    
    |`>=`
    |Compares whether each operand is greater than or equal to the next.
    |`boolean`, `byte`, `int`, `uint`, `wide`, `double`, `any`, `string`
    
    |===

    [TIP]
    The above operations may also be invoked directly as
    `column + ...` instead of `column math + ...`.

    ((cmddef column_minmax "column minmax ?_OPTIONS_? _COLUMN_"))

    Searches the specified column for the minimum and maximum values,
    returning them as a pair. If `-indices` is specified, their indices are
    returned instead of their values. In case either value occurs at
    multiple indices in the column, the lowest index is returned.

    The option `-range` can be specified to limit the search to a subrange of
    the column. It takes a pair of indices, in the one of the forms
    described in ((^ sect_column_indices)), that inclusively specify the subrange. The
    second element of the pair may be omitted in which case it defaults to
    the last element in the column.

    The option `-nocase` may be specified to indicate case-insensitive
    comparisons. This is only effective if the column type is `any` or
    `string` and ignored for the others.

    ((cmddef column_place "column place _COLUMN_ _VALUES_ _INDICES_"))

    Returns a typed column with the specified values at the corresponding
    indices. _VALUES_ may be a list of values or a column of the same type.
    The number of values in _VALUES_ must not be less than the number of
    indices specified in _INDICES_. _INDICES_ must be a index list in the one of
    the forms described in ((^ sect_column_indices)) and may extend the column if the
    conditions listed there are satisfied.

    ((cmddef column_prettify "column prettify _COLUMN_ ?_options_?"))
    See ((^ tarray_prettify prettify)).
    
    ((cmddef column_print "column print _COLUMN_ ?_CHAN_? ?_options_?"))
    See ((^ tarray_print print)).
    
    ((cmddef column_put "column put _COLUMN_ _VALUES_ ?_FIRST_?"))

    Returns a typed column with the elements starting at index _FIRST_
    replaced by the corresponding elements of _VALUES_. _VALUES_ may be a list
    of values or a typed column of the same type. The command may extend the
    array if necessary. If _FIRST_ is not specified the elements are appended
    to the array. The command interprets `end` as the position after the
    last element in the array.

    ((cmddef column_random "column random _TYPE_ _COUNT_ ?_LOWERBOUND_? ?_UPPERBOUND_?"))
    Returns a new column of ((^ sect_column_types type)) _TYPE_ with
    _COUNT_ elements containing randomly generated values from a
    uniform distribution. For types `boolean`, `byte`, `int`, `uint`
    and `wide` the range of generated values corresponds to the entire
    domain range by default. For type `double` the values are generated
    in the range {startsb}0,1{endsb} by default. The optional
    _LOWERBOUND_ and _UPPERBOUND_ arguments may be supplied to modify
    the range from which values are sampled. These are ignored for
    _TYPE_ `boolean`.

    For use cases such as testing where you want the same reproducible
    "`random`" values to be produced, you can use the
    ((^` sect_commands_randseed randseed)) command to set or reset
    the seed values used for random number generation.

    ((cmddef column_range "column range ?_OPTIONS_? _COLUMN_ _LOW_ _HIGH_"))

    Returns the values from a typed column for indices in a specified range.
    Any of the ((^ tab_column_stdopts)) may be specified with this command.

    ((cmddef column_reverse "column reverse _COLUMN_"))

    Returns the typed column with order of elements reversed.

    ((cmddef column_search "column search ?-range _RANGE_? ?-among _INDICES_? ?-all? ?-bitmap? ?-inline? ?-not? ?-nocase? ?_OPER_? _COLUMN_ _VALUE_"))

    Searches the specified typed column for a matching value. By default,
    the search starts at index 0 and returns the index of the first match,
    returning -1 if no matching value is found.

    Options `-range` and `-among` modify which elements of the column are
    examined. The `-range` option limits the search to the range
    specified by _RANGE_ which either consists of two integer indices
    denoting the starting and ending elements of the range
    (inclusive), or a single integer index denoting the start of the
    range with the end defaulting to the last element of the
    column. The `-among` option specifies a list of indices to be
    examined. _INDICES_ is an
    ((^ sect_column_indices "index list or index column")). Indices are
    allowed to be specified multiple times in arbitrary
    order. Elements are examined and matches returned in that same
    order. Indices that fall outside the range (either explicitly
    specified through `-range` or defaulting to the entire column) are
    ignored. Thus if both `-range` and `-among` options are specified,
    only those positions that meet both criteria are examined.

    The command normally returns the index of the first succeeding
    match.  Note this is not necessarily the lowest matching index
    since `-among` may specify indices in any order. If the option
    `-all` is
    specified, the search does not stop at the first match but instead
    searches for all matching elements and
    returns a integer column containing the indices of all matched
    elements. The option `-bitmap` implies `-all`, but in this case the command
    returns a boolean column with the bits corresponding to
    each matching index set to 1. 

    If the `-inline` option is specified, the command returns the
    matched value(s) instead of their indices.

    _OPER_ specifies the comparison operator and must be one of those
    shown in ((^ tab_column_search_ops)).

    ((.Table tab_column_search_ops "Search comparison operators"))
    [cols="30,70"]
    |===

    |`-eq`
    |Matches when equal to value (default)

    |`-gt`
    |Matches when greater than _VALUE_. Not valid for `boolean` type.

    |`-lt`
    |Matches when less than _VALUE_. Not valid for `boolean` type.

    |`-pat`
    |Matches _VALUE_ using string match pattern rules. Only valid for types
     `any` and `string`.

    |`-re`
    |Matches _VALUE_ as a regular expression. Only valid for type `any`.

    |===

    The sense of the match can be inverted by specifying the `-not` option so
    for example specifying `-not` `-gt` will match all elements that are less
    than or equal to _VALUE_. For case insensitive matching, the `-nocase`
    option may be specified. This is ignored for all array types except
    types `any` and `string`.

    ((cmddef column_series "column series _STOP_"))
    ((cmddef column_series_2 "column series _STOP_ _STEP_"))
    ((cmddef column_series_3 "column series _START_ _STOP_ _STEP_"))
    Returns a column with values between _START_ (included)
    and _STOP_ (excluded) incremented by _STEP_. _START_ and _STEP_
    default to 0 and 1 respectively if unspecified. If _STEP_ is less
    than 0, _STOP_ must be less than _START_.

    The type of the returned column may be `int`, `wide` or `double`
    depending on the operands. For example, a _STEP_ of 1.0 would
    result in a column of type `double` whereas a _STEP_ of 1 would
    return a `int` or `wide` depending on the range of operands.
    
    ((cmddef column_shuffle "column shuffle _COLUMN_"))
    Returns a new column containing the elements of `_COLUMN_` in
    a new random order. Columns of type `boolean` are not supported.

    ((cmddef column_size "column size _COLUMN_"))

    Returns the number of elements in the typed column.

    ((cmddef column_sort "column sort ?-indices? ?-increasing? ?-decreasing? ?-nocase? ?-indirect _TARGETCOLUMN_? _COLUMN_"))

    Returns a sorted typed column. _COLUMN_ is the typed column to be sorted.
    The comparison is done in a column type-specific manner. Sorting is
    sorted in increasing order by default. The `-decreasing` option may be
    specified to change this.

    If the `-indices` option is specified, the command returns a typed array
    containing the indices of the sorted values instead of the values
    themselves.

    If `-nocase` is specified, the comparisons are done in case-insensitive
    manner. This option is only applicable when the column type is `any` or
    `string` and is ignored otherwise.

    Option `-indirect` may only be used when _COLUMN_ is of type `int`. In this
    case, the elements of _COLUMN_ are treated as indices into _TARGETCOLUMN_
    and are compared using the corresponding values from _TARGETCOLUMN_. This
    option is useful when sorting a column or multiple columns in a table
    using different criteria while keeping a stable order.

    ((cmddef column_sum "column sum _COLUMN_"))
    Returns the sum of all elements of the specified column which must
    be of a numeric type. For integer types, the sum is calculated as a
    64 bit integer even if the column has a smaller integer width. There is
    no detection of integer overflow.

    ((cmddef column_type "column type _COLUMN_"))

    Returns the ((^ sect_column_types type)) of the typed column.

    ((cmddef column_vdelete "column vdelete _COLUMNVAR_ _INDEX_"))

    ((cmddef column_vdelete_1 "column vdelete _COLUMNVAR_ _INDEXLIST_"))

    ((cmddef column_vdelete_2 "column vdelete _COLUMNVAR_ _LOW_ _HIGH_"))

    Deletes elements from the typed array column in variable _COLUMNVAR_. The
    new value is assigned back to the variable. The resulting value of the
    variable (which may differ because of traces) is returned as the result
    of the command. Indices are specified in any of the forms described in
    ((^ sect_column_indices)) and may contain duplicates. Out-of-range indices are ignored.

    ((cmddef column_vfill "column vfill _COLUMNVAR_ _VALUE_ _INDEX_"))

    ((cmddef column_vfill_1 "column vfill _COLUMNVAR_ _VALUE_ _INDEXLIST_"))

    ((cmddef column_vfill_2 "column vfill _COLUMNVAR_ _VALUE_ _LOW_ _HIGH_"))

    Set the elements of the typed column in variable _COLUMNVAR_ to _VALUE_. The
    new value is assigned back to the variable. The resulting value of the
    variable (which may differ because of traces) is returned as the result
    of the command.

    See fill for more information.

    ((cmddef column_vinject "column vinject _COLUMNVAR_ _VALUES_ _FIRST_"))

    Inserts _VALUES_, a list of values or a column of the same type
    as the column in variable _COLUMNVAR_, at the position _FIRST_
    and stores the result back in _COLUMNVAR_.
    If _FIRST_ is `end`, the values are
    appended to the column. In all cases, the command may extend the array
    if necessary.
    The resulting value of the variable
    (which may differ because of traces) is returned as the result of the
    command.

    ((cmddef column_vinsert "column vinsert _COLUMNVAR_ _VALUE_ _FIRST_ ?_COUNT_?"))
    Inserts _COUNT_ (default 1) elements with value _VALUE_ at position
    _FIRST_ in the column stored in variable _COLUMNVAR_.
    If _FIRST_ is `end`, the values are
    appended to the column. The new value is
    assigned back to the variable. The resulting value of the variable
    (which may differ because of traces) is returned as the result of the
    command. In all cases, the command may extend the array if necessary.

    ((cmddef column_vplace "column vplace _COLUMNVAR_ _VALUES_ _INDICES_"))

    Modifies a typed column stored in the variable _COLUMNVAR_ with the
    specified values at the corresponding indices. The new value is assigned
    back to the variable. The resulting value of the variable
    (which may differ because of traces)
    is returned as the result of the command.

    See the command column place for other details.

    ((cmddef column_vput "column vput _COLUMNVAR_ _VALUES_ _FIRST_"))

    Modifies a variable _COLUMNVAR_ containing a typed column. The elements of
    the column starting at index _FIRST_ are replaced by the corresponding
    elements of _VALUES_. If _FIRST_ is not specified the elements are appended
    to the array. The new value is assigned back to the variable. The
    resulting value of the variable (which may differ because of traces) is
    returned as the result of the command.

    See the command column put for other details.

    ((cmddef column_vreverse "column vreverse _COLUMNVAR_"))

    Reverses the order of elements in the typed column in variable
    _COLUMNVAR_. The new value is assigned back to the variable. The resulting
    value of the variable (which may differ because of traces) is returned
    as the result of the command.

    ((cmddef column_vshuffle "column vshuffle _COLUMNVAR_"))
    
    Shuffles the order of elements in the typed column in variable
    _COLUMNVAR_. The new value is assigned back to the variable. The resulting
    value of the variable (which may differ because of traces) is returned
    as the result of the command.

    ((cmddef column_vsort "column vsort ?-increasing? ?-decreasing? ?-nocase? ?-indirect _TARGETCOLUMN_? _COLUMNVAR_"))

    Sorts a typed column stored in variable. _COLUMNVAR_ is variable
    containing the typed column to be sorted. The sorted column is also
    returned as the command result. See the column sort command for a
    description of the options.

    ((cmddef column_width "column width _COLUMN_ ?_FORMAT_?"))

    Returns the maximum width of the specified column in terms
    of the number of characters required to print in the given format.
    If `_FORMAT_` is not specified, it defaults to `%s`. If the column
    is empty, the command returns `0` irrespective of `_FORMAT_`.
    
} text {
    // Turn section numbering on again
    :sectnums:
}
