text {
    ((= chap_xtal_shell "The Xtal shell"))
    include::header.ad[]

    ((author "Ashok P. Nadkarni"))
}


text {
    == Introduction

    This document describes the use of the Xtal language in interactive
    mode in Tcl shells. You can of course call the
    ((^ cmdref_xtal_xtal xtal::xtal)) command to invoke Xtal scripts
    in any standard Tcl interpreter with the `xtal` package loaded.
    However, using syntax like
} syntax {
    xtal { i = 1 }
} text {
    is inconvenient.

    Instead the Xtal shell provides a means where Xtal syntax can
    be used alongside Tcl without having to be wrapped within `xtal::xtal`
    commands. So for instance you can type both the following
    equivalent Xtal and Tcl commands in the Xtal shell:
} syntax {
    my_dict.key = "value"
    dict set my_dict key value
}

text {
    == Running the shell
    The Xtal shell is not a separate program but rather a plug-in
    that is compatible several Tcl shells.
    In all cases, the Xtal shell is started in the same fashion -
    by running the `xtal::shell` command after loading the `xtal`
    package.

}

text {
    The Xtal shell can be used within the `tclsh` command line shell.
    
    .Xtal shell in `tclsh`
    image::xtal_tclsh_shell.png[Xtal tclsh shell]

    It can also be used within the Wish console.

    .Xtal shell in the `wish` console
    image::xtal_wish_shell.png[Xtal wish shell]

    And finally, it is also compatible with the popular
    http://tkcon.sf.net[tkcon] enhanced Tk console.

    .Xtal shell in `tkcon`
    image::xtal_tkcon_shell.png[Xtal tkcon shell]
}

text {
    == Command execution
    
    The Xtal shell reads the command input and uses
    heuristics to make a determination as to whether it is Xtal
    or Tcl and executes it accordingly.

    When the command is added to the Tcl event history though, it is always
    added as a valid Tcl script, not Xtal. For example,
} syntax {
    x = 10
} text {
    would be added as
} syntax {
    xtal::xtal { x = 10 }
} text {
    This is to allow Tcl's `history` command, which obviously knows
    nothing about Xtal, to work correctly.

    You can use the ((^ tab_xtal_shell_opts "-lang option"))
    to the shell at any time to control which languages are accepted
    by the shell.
}

text {
    == Shell options

    The shell supports several options shown in
    ((^ tab_xtal_shell_opts)). These may be specified when
    the shell is started or changed when it is running, in
    both cases using the ((^ cmdref_xtal_shell xtal::shell)) command.

    ((.Table tab_xtal_shell_opts "Xtal shell options"))
    [cols="30,70"]
    |===

    |`-lang _LANGUAGE_`
    |Specifies the language for input commands. The default value `auto`
    results in the shell accepting both Tcl and Xtal syntax. If set
    it to `tcl` or `xtal`, the shell will only interpret
    input for that language.
    
    |`-prettify` `_BOOLEAN_`
    |If true (default), the Xtal shell tries to format the output
    of commands in a more user-friendly format. If false, command
    output is printed as a raw string as in the standard Tcl shell.
    See ((^ sect_xtal_shell_output)).
    
    |===

}

    
text {
    ((== sect_xtal_shell_output "Result formatting"))

    Unlike the standard Tcl shells, the Xtal shell does not print the
    raw string values but rather tries to present a more readable format
    as shown in the example below.

    .Xtal shell output
    image::xtal_shell_output.png[Xtal shell output]

    In the case of large tables or columns, the output will only include
    the first few and last few items separated by ellipsis.
    To see all items, you need to explicitly use the `tarray::print`
    command with the appropriate options.

    Similarly, to see the string format as in Tcl shells, use the
    `puts` command to explicitly print results.

    Alternatively, you can turn pretty-printing on and off with the
    ((^ sect_xtal_shell_options "-prettify option"))
    to the ((^ cmdref_xtal_shell shell)).
} 

text {
    == Bugs and caveats

    .Error traces
    Because Xtal is translated to Tcl for execution, the error stack
    reflects the translated Tcl code, not the original Xtal source for
    nested calls.

    .Disambiguation
    The heuristics for determining Xtal are a work-in-progress and
    may in some cases guess wrong. In such cases,
    you can explicitly wrap Xtal as
} syntax {
    xtal { _XTALSCRIPT_ }
} text {
    and Tcl as
} syntax {
    < _TCLSCRIPT_ >
} text {
    respectively.
} text {
    .Syntax confusion

    It is worth stressing the different syntax used by Xtal and Tcl,
    particularly with respect to variable referencing and list construction
    as illustrated by the following short sequence in an Xtal shell.
} fauxshell {
    % x = 1
    1
    % a = x                ;# (Xtal) Assigns content of variable x
    1
    % set a x              ;# (Tcl) Assigns string "x"
    x
    % set a $x             ;# (Tcl) Assigns content of variable x
    1
    % l = {a, x, 1}        ;# (Xtal) List construction
    1 1 1
    % set l {a, x, 1}      ;# (Tcl) Assigns string
    a, x, 1
    % set l [list $a $x 1] ;# (Tcl) List construction
    1 1 1
} text {
    It is easy to get tripped up by these differences.
}
    
    
