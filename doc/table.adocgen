text {
    ((= chap_table_ref "Table commands"))
    Version {taversion}
    include::header.ad[]

    ((author "Ashok P. Nadkarni"))
}

text {
    == Introduction

    The tarray extension implements typed arrays and associated commands
    ((^ chap_column_ref column)) and `table`.
    This page provides reference documentation for
    commands related to typed tables. See ((^ chap_intro)) for an overview and
    ((^ chap_guide)) for a programming guide.

    === Installation and loading

    include::download.ad[]
    
} shell {
    package require tarray
    namespace import tarray::table
}

text {
    === Tables

    A typed table is an ordered sequence of _typed columns_ of
    equal size. It can be viewed as an array of records where the record fields
    happen to use column-wise storage. The corresponding table command
    operates on typed tables.

    The columns in a table are defined with a name, type and order
    when the table is created. Commands that operate on tables allow
    columns to be specified using either the column name or its position.
} text {
    ((=== sect_table_types Types))

    include::types.ad[]

    ((=== sect_table_indices Indices))

    include::indices.ad[]
} text {
    == Command reference

    All commands are located in the `tarray` namespace.

    === Standard Options

    Many commands take one or more of the standard options shown
    in ((^ tab_table_stdopts)) below. The `-list`, `-dict` and `-table`
    options control the format of the returned values. The
    `-columns` option allows selection and ordering of specific columns
    from the table.

    ((.Table tab_table_stdopts "Standard options"))
    [cols="20,80"]
    |===

    |`-columns _COLUMNS_`
    |Selects a subset of columns from the table and their order. If this
    option is not specified, all columns in the table are selected as the
    target of the command and in the same order as in the table definition.
    If this option is specified, _COLUMNS_ is a list of column indexes and
    names. For commands that retrieve data, like table get, only data from
    the specified columns is retrieved and in the column order specified in
    _COLUMNS_. For commands that modify data, only data in the specified
    columns is modified. The input data values are taken in the same order
    as specified in _COLUMNS_. Note that when a command invocation that causes
    a table to grow specifies the `-columns` option, all columns must be
    included in _COLUMNS_ although they may be specified in any order
    depending on the order of the source data.

    |`-dict`
    |Specifies that the return values must be in the form of a dictionary
    keyed by the corresponding indices. The value of each key is a row which
    is a list each element of which is the value at that index in the
    corresponding column.

    |`-list`
    |Specifies that the return value must be in the form of a list of rows,
    one per index. Each row is itself a list, each element of which is the
    value at that index in the corresponding column.

    |`-table`
    |Specifies that the values are to be returned as a table. This is the
    default if neither `-list` nor `-dict` is specified.

    |===
} text {
    === Commands

    // Turn off section numbering
    :!sectnums:

    ((cmddef table_ctype "table ctype _TABLE_ _COLSPEC_"))

    Returns the type of a column in a table.

    ((cmddef table_cnames "table cnames _TABLE_"))

    Returns the list of column names for the table.
    
    ((cmddef table_column "table column _TABLE_ _COLSPEC_ ?_NEWCOL_?"))

    If argument _NEWCOL_ is not present, the command returns
    the table column specified by _COLSPEC_ which may be either the column
    name or its position. If _NEWCOL_ is specified, it must be a column
    of the same type and length as the table column specified by
    _COLSPEC_. The command then returns _TABLE_ with that table column
    replaced by _NEWCOL_.

    ((cmddef table_columns "table columns _TABLE_ ?_COLSPECS_?"))

    If argument _COLSPECS_ is not present, the command returns a list
    containing all the columns in the specified table. If _COLSPECS_ is
    specified, it must be a list of column names or positions. In this
    case the returned list only contains the corresponding columns.

    ((cmddef table_create "table create _DEFINITION_ _ROWVALUES_"))

    Returns a table containing a sequence of columns. _DEFINITION_ is a
    list of alternating column names and column types. A column name is an
    identifier for a column that can be used in lieu of a column index. The
    type for a column must be one of the valid types described in ((^ sect_table_types)).

    _ROWVALUES_ is the initial content of the table array specified as a
    nested list with each sublist being a row whose element types are
    compatible with the corresponding column types in _DEFINITION_.

    ((cmddef table_create2 "table create2 _COLNAMES_ _COLUMNS_"))

    Returns a table whose column names are specified by _COLNAMES_ and
    contents are given by `_COLUMNS_` which must be a list of tarray
    columns.

    ((cmddef table_csvexport "table csvexport ?options? _PATH_ _TABLE_"))

    Writes out the contents of _TABLE_ in CSV format to the file
    specified by _PATH_. If the file already exists, an error is
    raised unless either `-force _BOOLEAN_` or `-append _BOOLEAN_`
    options are specified with `_BOOLEAN_` being a boolean true value.
    In the former case, the file is
    overwritten while in the latter case the CSV data is appended to
    the end of the existing file content.
    
    The `-header` option may be used to write out a header row to the
    file. The option value should generally be a list of the same
    length as the number of columns in the table although that is not
    mandated.

    The command accepts the options `-encoding` and `-translation` with
    the same semantics as for the Tcl `fconfigure` command.

    Any additional options are passed on to the `tclcsv::csv_write`
    command and control the CSV dialect to be used.
    Refer to the
    https://tclcsv.magicsplat.com/index.html#tclcsv_csv_write[documentation]
    for that command for available options.

    ((cmddef table_csvimport "table csvimport ?options? _PATH_"))

    Returns a table containing the data from a CSV file. The CSV file
    is read using the `tclcsv` package. If the CSV file includes a header,
    it is used to form the column names for the table with characters
    that are illegal in column names replaced by underscores. If the
    file does not have a header, column names of the form `COL_N` are
    generated.
    
    The command accepts the options `-encoding` and `-translation` with
    the same semantics as for the Tcl
    `fconfigure` command.

    If the `-sniff` option is specified with an value of `true`,
    the `tclcsv::sniff` command is used to guess the format of the CSV
    file.

    Any additional options are passed on to the `tclcsv::reader`
    command.
    Refer to the
    https://tclcsv.magicsplat.com/index.html#tclcsv_csv_write[documentation]
    for that command for available options.
    Any options specified thus will override the values discovered
    via the `-sniff` option. 
    
    ((cmddef table_definition "table definition _TABLE_"))
    Returns the definition of the specified table in a form that can
    be passed to ((^ table_create "table create")).
    
    ((cmddef table_delete "table delete _TABLE_ _INDEX_"))

    ((cmddef table_delete_1 "table delete _TABLE_ _INDEXLIST_"))
    
    ((cmddef table_delete_2 "table delete _TABLE_ _LOW_ _HIGH_"))
    
    Returns a typed table with all specified rows deleted. The row indices
    are specified in any of the forms described in ((^ sect_table_indices)).

    ((cmddef table_equal "table equal _TABA_ _TABB_"))

    Returns 1 if the specified tables have the same number of columns
    and the ((^ column_equal "column equal"))
    command returns true for every corresponding
    pair of columns in the two tables. Note that the column types need
    not be the same. See the description of that command for details.

    The command will raise an error if either argument is not a table.
    
    Also see the related command ((^ table_identical "table identical"))
    which applies a stricter definition of equality.

    ((cmddef table_fill "table fill ?-columns _COLUMNS_? _TABLE_ _ROWVALUE_ _INDEX_"))

    ((cmddef table_fill_1 "table fill ?-columns _COLUMNS_? _TABLE_ _ROWVALUE_ _INDEXLIST_"))
    
    ((cmddef table_fill_2 "table fill ?-columns _COLUMNS_? _TABLE_ _ROWVALUE_ _LOW_ _HIGH_"))
    
    Returns a typed table with specified rows set to _ROWVALUE_. Each element
    from the list _ROWVALUE_ is assigned to the corresponding column of the
    table at the specified indices. Any additional elements in _ROWVALUE_ are
    ignored. An error is generated if any element of _ROWVALUE_ does not match
    the type of the corresponding column or if the _ROWVALUE_ width differs
    from the table width. Indices are specified in any of the forms
    described in ((^ sect_table_indices)). The size of the array will
    be extended if necessary. The index `end` refers to the last
    element of the table.

    The standard option ((^ tab_table_stdopts -columns)) may be specified to target specific
    columns of the table or to match the order of columns to the supplied
    data.

    ((cmddef table_get "table get ?_OPTIONS_? _TABLE_ _INDEXLIST_"))

    Returns the values from a table at the indices specified as
    a ((^ sect_table_indices "index list")).
    Any of the ((^ tab_table_stdopts "standard options"))
    may be specified with this command.

    ((cmddef table_identical "table identical _TABA_ _TABB_"))

    Returns 1 if the specified tables have the same column names
    and the ((^ column_identical "column identical"))
    command returns true for every corresponding
    pair of columns in the two tables. Note that the column types have
    to be the same. See the description of that command for details.

    The command will raise an error if either argument is not a table.
    
    Also see the related command ((^ table_equal "table equal"))
    which applies a looser definition of equality.

    ((cmddef table_index "table index _TABLE_ _INDEX_"))

    Returns the value of the row at the position specified by _INDEX_.
    
    ((cmddef table_inject "table inject ?-columns _COLUMNS_? _TABLE_ _ROWVALUES_ _FIRST_"))
    
    Inserts _ROWVALUES_, a list of rows or a compatible table
    as _TABLE_, at the position _FIRST_ and returns the resulting table.
    If _FIRST_ is `end`, the values are
    appended to the column. In all cases, the command may extend the table
    if necessary.
    
    The standard option ((^ tab_table_stdopts -columns)) may be specified to match the order of
    columns to the supplied data. Note that _COLUMNS_ must include all columns
    in the table as the command would not know what values to use for the
    unspecified columns.

    ((cmddef table_insert "table insert ?-columns _COLUMNS_? _TABLE_ _ROWVALUE_ _FIRST_ _COUNT_"))

    Inserts _COUNT_ rows with value _ROWVALUE_ at position
    _FIRST_ and returns the new table. The rows are inserted at the
    specified position. In all cases, the command may extend the array if
    necessary.

    The standard option ((^ tab_table_stdopts -columns)) may be specified to match the order of
    columns to the supplied data. Note that _COLUMNS_ must include all columns
    in the table as the command would not know what values to use for the
    unspecified columns.

    ((cmddef table_join "table join ?options? _TABLE0_ _TABLE1_"))

    Returns a new table containing a subset of rows from the cross product
    of _TABLE0_ and _TABLE1_ that satisfy a condition that the value
    of a specified column in _TABLE0_ matches that of a specified
    column in _TABLE1_.

    The `-on` option controls the columns of the two tables that are
    matched.  The option value must be a list of one or two elements.
    If the list has a single element, it must be
    a column name that is present in both tables.
    If two elements are present, they must be the name of a column in _TABLE0_
    and a column in _TABLE1_ respectively.
    If the `-on` option
    is not specified, the value defaults to column name that is common
    to both tables. If there are multiple such column names, the one
    with the lowest index position in _TABLE0_ is used.

    The columns being compared must be of the same type which must not
    be `boolean`.

    If the `-nocase` option is specified, the column elements are
    compared in case-insensitive fashion. Otherwise, the comparison is
    case-sensitive. The option is ignored for numeric columns.

    By default, the returned table will include all columns from both
    tables. If this is not required, the `-t0cols` and `-t1cols`
    options may be used to specify the columns to include. The option
    values are a list of column names from `_TABLE0_` and `_TABLE1_`
    respectively. 

    In case the two tables have column names in common, the returned
    table will add the suffix `_t1` to the corresponding
    columns from _TABLE1_ respectively. The caller can
    choose a different prefix to be used by specifying the `-t1suffix`.

    
    ((cmddef table_loop "table loop _VAR_ _TABLE_ _SCRIPT_"))
    ((cmddef table_loop_2 "table loop _INDEXVAR_ _VAR_ _TABLE_ _SCRIPT_"))
    See ((^ tarray_loop loop)).

    ((cmddef table_place "table place ?-columns _COLUMNS_? _TABLE_ _ROWVALUES_ _INDICES_"))

    Returns a table with the specified values at the corresponding indices.
    _ROWVALUES_ may be a list of row values or a compatible table. The number
    of rows in _ROWVALUES_ must not be less than the number of indices
    specified in _INDICES_ and the width of each row must be the same as
    the width of the table. _INDICES_ must be a index list in the one of the
    forms described in ((^ sect_table_indices)) and may extend the column
    if the condition listed there are satisfied.

    The standard option ((^ tab_table_stdopts -columns)) may be specified to target specific
    columns of the table or to match the order of columns to the supplied
    data.

    ((cmddef table_prettify "table prettify _TABLE_ ?_options_?"))
    See ((^ tarray_prettify prettify)).
    
    ((cmddef table_print "table print _TABLE_ ?_CHAN_? ?_options_?"))
    See ((^ tarray_print print)).
    
    ((cmddef table_put "table put ?-columns _COLUMNS_? _TABLE_ _ROWVALUES_ ?_FIRST_?"))

    Returns a table with the elements starting at index _FIRST_ replaced by
    the corresponding elements of _ROWVALUES_. _ROWVALUES_ may be a list of
    values or a table of the same type. The command may extend the array if
    necessary. If _FIRST_ is not specified the elements are appended.

    The standard option ((^ tab_table_stdopts -columns)) may be specified to target specific
    columns of the table or to match the order of columns to the supplied
    data.

    ((cmddef table_range "table range ?_OPTIONS_? _TABLE_ _LOW_ ?_HIGH_?"))

    Returns all values from a table in the specified 
    ((^ sect_table_indices "index range")) _LOW_ to _HIGH_.
    Any of the ((^ tab_table_stdopts "standard options"))
    may be specified with this command.

    ((cmddef table_reverse "table reverse _TABLE_"))

    Returns the table with order of elements reversed.
    
    ((cmddef table_size "table size _TABLE_"))

    Returns the number of rows in the table.
    
    ((cmddef table_slice "table slice _TABLE_ _COLUMNLIST_"))

    Returns a table containing only the specified columns from _TABLE_. The
    columns are specified by their positions or names as a list. A column
    must not be included more than once. The returned table contains columns
    in the same order as _COLUMNLIST_.

    ((cmddef table_sort "table sort ?options? _TABLE_ _COLSPEC_"))

    Sorts the specified table based on the values of the column specified
    by _COLSPEC_. The options `-increasing`, `-decreasing` and `-nocase`
    control the sort order as described for the
    ((^ column_sort "column sort")) command.

    If the `-indices` option is specified, the command returns the
    a integer column containing the indices of the table corresponding
    to the sorted elements.
    
    If `-indices` is not specified, the return value of the command is
    the sorted table. The format and content of the returned table is
    controlled by the `-columns`, `-table`, `-dict` and `-list`
    options as described in ((^ tab_table_stdopts)).
    

    ((cmddef table_vcolumn "table vcolumn _TABLEVAR_ _COLSPEC_ ?_NEWCOL_?"))

    Returns or sets a specified column in the table contained
    in the variable _TABLEVAR_.
    If argument _NEWCOL_ is not present, the command returns
    the table column specified by _COLSPEC_ which may be either the column
    name or its position. _TABLEVAR_ is not modified.

    If _NEWCOL_ is specified, it must be a column
    of the same type and length as the table column specified by
    _COLSPEC_. The command then replaces that column in _TABLEVAR_ with
    _NEWCOL_ and returns the variable's new value.

    ((cmddef table_vdelete "table vdelete _TABLEVAR_ _INDEX_"))

    ((cmddef table_vdelete_1 "table vdelete _TABLEVAR_ _INDEXLIST_"))
    
    ((cmddef table_vdelete_2 "table vdelete _TABLEVAR_ _LOW_ _HIGH_"))
    
    Deletes rows from the table in variable _TABLEVAR_. The new value is
    assigned back to the variable. The resulting value of the variable
    (which may differ because of traces) is returned as the result of the
    command. Indices are specified in any of the forms described in 
    ((^ sect_table_indices)).

    ((cmddef table_vfill "table vfill ?-columns _COLUMNS_? _TABLEVAR_ _ROWVALUE_ _INDEX_"))

    ((cmddef table_vfill_1 "table vfill ?-columns _COLUMNS_? _TABLEVAR_ _ROWVALUE_ _INDEXLIST_"))
    
    ((cmddef table_vfill_2 "table vfill ?-columns _COLUMNS_? _TABLEVAR_ _ROWVALUE_ _LOW_ _HIGH_"))
    
    Set the elements of the table in variable _TABLEVAR_ at the specified
    indices to _ROWVALUE_. The new value is assigned back to the variable. The
    resulting value of the variable (which may differ because of traces) is
    returned as the result of the command.

    The standard option ((^ tab_table_stdopts -columns)) may be specified to target specific
    columns of the table or to match the order of columns to the supplied
    data.

    See the ((^ table_fill "table fill")) command for more information.

    ((cmddef table_vinject "table vinject _TABLEVAR_ _ROWVALUES_ _FIRST_"))
    
    Inserts _ROWVALUES_, a list of rows or a compatible table as
    the table in variable _TABLEVAR_, at the position _FIRST_
    and stores the result back in _TABLEVAR_.
    If _FIRST_ is `end`, the values are
    appended to the column. In all cases, the command may extend the array
    if necessary.
    The resulting value of the variable
    (which may differ because of traces) is returned as the result of the
    command.
    
    The standard option ((^ tab_table_stdopts -columns)) may be specified to match the order of
    columns to the supplied data. Note that _COLUMNS_ must include all columns
    in the table as the command would not know what values to use for the
    unspecified columns.

    ((cmddef table_vinsert "table vinsert ?-columns _COLUMNS_? _TABLEVAR_ _ROWVALUE_ _FIRST_ _COUNT_"))

    Inserts _COUNT_ rows with value _ROWVALUE_ at position
    _FIRST_ in the table stored in variable _TABLEVAR_.
    The new value is
    assigned back to the variable. The resulting value of the variable
    (which may differ because of traces) is returned as the result of the
    command.

    The standard option ((^ tab_table_stdopts -columns)) may be specified to match the order of
    columns to the supplied data. Note that _COLUMNS_ must include all columns
    in the table as the command would not know what values to use for the
    unspecified columns.

    ((cmddef table_vplace "table vplace ?-columns _COLUMNS_? _TABLEVAR_ _ROWVALUES_ _INDICES_"))

    Modifies a table stored in the variable _TABLEVAR_ with the specified
    values at the corresponding indices. The new value is assigned back to
    the variable. The resulting value of the variable
    (which may differ because of traces) is returned as the result of
    the command.

    The standard option ((^ tab_table_stdopts -columns)) may be specified to target specific
    columns of the table or to match the order of columns to the supplied
    data.

    See the command ((^ table_place "table place")) for other details.

    ((cmddef table_vput "table vput ?-columns _COLUMNS_? _TABLEVAR_ _ROWVALUES_ _FIRST_"))

    Modifies a variable _TABLEVAR_ containing a typed column. The elements of
    the column starting at index _FIRST_ are replaced by the corresponding
    elements of _ROWVALUES_. If _FIRST_ is not specified the elements are
    appended to the array. The new value is assigned back to the variable.
    The resulting value of the variable (which may differ because of traces)
    is returned as the result of the command.

    The standard option ((^ tab_table_stdopts -columns))
    may be specified to target specific
    columns of the table or to match the order of columns to the supplied
    data.

    See the command ((^ table_put "table put")) for other details.

    ((cmddef table_vreverse "table vreverse _TABLEVAR_"))

    Reverses the order of elements in the table in variable _TABLEVAR_, stores
    it back in the variable. The result of the command is the resulting
    value stored in the variable.

    ((cmddef table_width "table width _TABLE_"))

    Returns the number of columns in the table.
    
} text {
    // Turn section numbering back on
    :sectnums:
}
