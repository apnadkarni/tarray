[comment {-*- tcl -*- doctools manpage}]
[manpage_begin "tarray" n ""]
[copyright "2012 Ashok P. Nadkarni"]
[moddesc "Typed Arrays"]
[titledesc "Commands related to typed arrays"]
[require Tcl 8.5]
[require tarray ?0.1?]
[description]

[section Introduction]

The TArray extension implements typed arrays and associated commands
[cmd column] and [cmd grid]. The primary motivation for this extension
is efficient memory utilization and speed of certain operations in
applications dealing with very large numbers of elements.
Typed arrays and grids do not really provide any additional
capabilities over Tcl's built-in commands, particularly `list` and
`dict` and the script libraries based on these. Their primary use is
in applications with large number of data items.

[para]
Also, for applications that do a lot of insertions and deletions, the
array based storage may not be directly suitable (although on modern processors
the point at which that happens is quite large). For such
applications, the package provides sufficient flexibility that more
suitable structures, such as B-Trees may be easily scripted on top
without a significant performance penalty.

[para]
The extension implements [sectref Columns columns],
which store arrays of values of a single type indexed by integers, and
[sectref Grids grids], which are arrays of columns. 

[section "Types"]
The extension supports the following element types for typed arrays:
[list_begin options]
[opt_def [option any]] Any Tcl value
[opt_def [option boolean]] A boolean value
[opt_def [option byte]] Unsigned 8-bit integer
[opt_def [option double]] Floating point value
[opt_def [option int]]| Signed 32-bit integer
[opt_def [option uint]] Unsigned 32-bit integer
[opt_def [option wide]] Signed 64-bit integer
[list_end]
The primary purpose of the type is to specify what values can be
stored in that column. This impacts the compactness of the internal
storage (really the primary purpose of the extension) as well certain
operations (like sort or search) invoked on the column. The type
[option any] allows any Tcl type. These are essentially treated as strings.
However, use of a column of this type by itself 
(i.e. not in conjunction with other columns) offers very little benefit
over a plain Tcl list.

[para]
Attempts to store values in typed array column that are not valid
for that column will result in an error being generated.

[section "Columns"] 
A typed array column contains elements of a single 
[sectref "Types" type]
that is specified when it is created. The command tarray can be used
to create and manipulate typed arrays including searching and sorting
operations.

[section "Grids"]
A typed grid is an ordered sequence of typed columns
of equal size. It can be viewed as an array of records where the
record fields happen to use column-wise storage. The corresponding
grid command operates on typed grids.

[section Indices]
An index into a typed column or grid can be specified as either an integer
or the keyword [const end] which specifies the last element in the
typed array. Unlike the built-in Tcl commands, index arithmetic of
the form [const end-2] is not supported.
[para]
Many commands also allow multiple indices to be specified. These may take one
of two forms - 
a [emph range] which includes all indices between a lower and an upper 
bound (inclusive), and
an [emph "index list"] which make be a list of integers, or a
[const int] [sectref Columns "typed column"]. This latter allows the
indices returned by commands such as [cmd "column search"] to be 
efficiently passed to other commands.
[para]
Note that keyword [const end] can be used to specify a single index or
as a range bound, but cannot be used in an index list.

[section "Standard Options"]
Many commands take standard options which are described here.
[para]
Commands returning values from typed columns and grids take the following
options that controls the format of the returned values.

[list_begin options]
[opt_def -dict]
The values are returned as a dictionary with keys being
the indices.
[opt_def -tarray] The values are returned as a typed column or grid as
appropriate. This is the default if none of the other options is specified.
[opt_def -list] The values are returned as a Tcl list.
[list_end]


[section Commands]

[list_begin definitions]

[call [cmd "column create"] [arg TYPE] [arg [opt INITIALIZER]] [arg [opt INITSIZE]]]
Returns a typed array of the type [arg TYPE] which must be one of one
of valid types described in [sectref "Types"]. If 
[arg INITIALIZER] is specified, it is the initial content of the typed array 
and must be a
list with elements of the appropriate type. For performance reasons,
the [arg INITSIZE] argument may be specified to indicate how many slots to
preallocate for the array. This is only treated as a hint and actual
size allocated may differ.

[call [cmd "column delete"] [arg TARRAYCOLUMN] [arg INDEX]]
[call [cmd "column delete"] [arg TARRAYCOLUMN] [arg INDEXLIST]]
[call [cmd "column delete"] [arg TARRAYCOLUMN] [arg LOW] [arg HIGH]]
Returns a typed column with all specified elements deleted. 
Indices are specified in any of the forms described in [sectref Indices].

[call [cmd "column fill"] [arg TARRAYCOLUMN] [arg VALUE] [arg INDEX]]
[call [cmd "column fill"] [arg TARRAYCOLUMN] [arg VALUE] [arg INDEXLIST]]
[call [cmd "column fill"] [arg TARRAYCOLUMN] [arg VALUE] [arg LOW] [arg HIGH]]
Returns a typed column with specified indices set to [arg VALUE].
Indices are specified in any of the forms described in [sectref Indices].
The size of the array will be extended if necessary. However, when
indices are specified as an [sectref Indices "index list"] cause
the array to be extended, the index list must include all indices
beyond the current array size without any gaps. For example, if
an array contains a thousand elements (the highest index thereby being 999),
the index list [const "1001 1000 1002"] is legal but [const "1001 1002"]
is not.

[call [cmd "column get"] [arg [opt "STANDARDOPTIONS"]] [arg TARRAYCOLUMN] [arg INDEXLIST]]
[call [cmd "column get"] [arg [opt "STANDARDOPTIONS"]] [arg TARRAYCOLUMN] [arg LOW] [arg [opt HIGH]]]
Returns the values from a typed column at the indices specified as
[sectref Indices "index list"] or [sectref Indices range].
The format
of the returned values is controlled by [arg STANDARDOPTIONS]
which may be any of the options controlling returned formats
as specified in [sectref "Standard Options"].

[call [cmd "column index"] [arg TARRAYCOLUMN] [arg INDEX]]
Returns the value of the element at the position specified by [arg INDEX]
which is a single [sectref Indices index].

[call [cmd "column place"] [arg TARRAYCOLUMN] [arg VALUEDICT]]
[call [cmd "column place"] [arg TARRAYCOLUMN] [arg INDICES] [arg VALUES]]
In the first form, [arg VALUEDICT] is a dictionary mapping
indices to the new values.
In the second case, [arg INDICES] must be a 
index list in the one of the forms described in [sectref Indices].
[arg VALUES] may be a list of values or a typed column in the same order.
In both cases, the modified typed column is returned. The command may extend
the array if necessary.
[para]
The command will generate an error if [arg TARRAYCOLUMN]
is not a typed column,  or if a value cannot be converted to 
the column's type or if an index is out of range.

[call [cmd "column put"] [arg TARRAYCOLUMN] [arg VALUES] [arg FIRST] [arg [opt LAST]]]
Returns a typed column with the elements starting at index [arg FIRST]
replaced by the corresponding elements of [arg VALUELIST].
[arg VALUES] may be a list of values or a typed column. Any existing
elements at those position are overwritten. The command may extend
the array if necessary.
[para]
If [arg LAST] is not specified, it is calculated based on the number of 
elements in [arg VALUES]. If it is specified, only elements at positions
between [arg FIRST] and [arg LAST] are replaced. If there are not enough
elements in [arg VALUES], they are repeated in circular fashion. If there
are extra elements in [arg VALUES], they are ignored.
[para]
The command will generate an error if [arg TARRAYCOLUMN]
is not a typed column,  or if a value cannot be converted to 
the column's type or if the specified starting index is out of range.

[call [cmd "column reverse"] [arg TARRAYCOLUMN]]
Returns the typed column with order of elements reversed.

[call [cmd "column search"] [opt "[option -start] [arg STARTINDEX]"] [opt [option -all]] [opt [option -inline]] [opt [option -not]] [opt [option -nocase]] [arg [opt OPER]] [arg TARRAYCOLUMN] [arg VALUE]]
Searches the specified typed column for a matching value. By default,
the search starts at index 0 and returns the index of the first match
found, returning -1 if no matching value is found. The other options
modify this behaviour. If the option [option -start] is specified, the search
starts at index [arg STARTINDEX] instead of 0. If [option -all]
is specified, the
search does not stop at the first match but instead returns a list
containing the indices of all matched elements. This may be an empty
list if no elements matched. If the [option -inline] option is specified, the
command returns the matched value(s) instead of their indices.
[para]
[arg OPER] specifies the comparison operator and must be one of the following:
[list_begin options]
[opt_def -eq] Matches when equal to value (default)
[opt_def -gt] Matches when greater than [arg VALUE]. 
Not valid for [const boolean] type.
[opt_def -lt] Matches when less than [arg VALUE].
Not valid for [const boolean] type.
[opt_def -pat] Matches [arg VALUE] using [cmd "string match"] pattern rules.
Only valid for type [const any].
[opt_def -re] Matches [arg VALUE] as a regular expression.
Only valid for type [const any].
[list_end]

The sense of the match can be inverted by specifying the [option -not] option
so for example specifying [option "-not -gt"] will match all elements that are
less than or equal to [arg VALUE]. For case insensitive matching, the
[option -nocase] option may be specified. This is ignored for all array types
except type [const any].


[call [cmd "column size"] [arg TARRAYCOLUMN]]
Returns the number of elements in the typed column.

[call [cmd "column sort"] [opt [option -indices]] [opt [option -increasing]] [opt [option -decreasing]] [arg TARRAYCOLUMN]]
Returns a sorted typed column. [arg TARRAYCOLUMN] is the typed column to
be sorted. The comparison is done in a column type-specific manner.
Sorting is sorted in increasing order by default.
The [option -decreasing] option may be specified to change this. If
the [option -indices] option is specified, the command returns a typed array
containing the indices of the sorted values instead of the values
themselves.

[call [cmd "column type"] [arg TARRAYCOLUMN]]
Returns the [sectref "Types" type] of the typed column.

[call [cmd "column vdelete"] [arg TCOLUMNVAR] [arg INDEX]]
[call [cmd "column velete"] [arg TCOLUMNVAR] [arg INDEXLIST]]
[call [cmd "column velete"] [arg TCOLUMNVAR] [arg LOW] [arg HIGH]]
Deletes elements from the typed array column in variable [arg TCOLUMNVAR].
The new value is assigned back to the variable and also returned as the
result of the command.
Indices are specified in any of the forms described in [sectref Indices].

[call [cmd "column vfill"] [arg TCOLUMNVAR] [arg VALUE] [arg INDEX]]
[call [cmd "column vfill"] [arg TCOLUMNVAR] [arg VALUE] [arg INDEXLIST]]
[call [cmd "column vfill"] [arg TCOLUMNVAR] [arg VALUE] [arg LOW] [arg HIGH]]
Set the elements of the typed column in variable [arg TCOLUMNVAR] to
[arg VALUE]. 
The new value is assigned back to the variable and also returned as the
result of the command.
[para]
See [cmd fill] for more information.

[list_end]


[keywords column grid]

[manpage_end]
