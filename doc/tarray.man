[comment {-*- tcl -*- doctools manpage}]
[manpage_begin "tarray" n ""]
[copyright "2012 Ashok P. Nadkarni"]
[moddesc "Typed Arrays"]
[titledesc "Commands related to typed arrays"]
[require Tcl 8.5]
[require tarray ?0.1?]
[description]


[section Introduction]

The TArray extension implements typed arrays and associated commands
[cmd column] and [cmd grid]. The primary motivation for this extension
is efficient memory utilization and speed of certain operations in
applications dealing with very large numbers of elements.
Typed arrays and grids do not really provide any additional
capabilities over Tcl's built-in commands, particularly `list` and
`dict` and the script libraries based on these. Their primary use is
in applications with large number of data items.

[para]
Also, for applications that do a lot of insertions and deletions, the
array based storage may not be directly suitable (although on modern processors
the point at which that happens is quite large). For such
applications, the package provides sufficient flexibility that more
suitable structures, such as B-Trees may be easily scripted on top
without a significant performance penalty.

[para]
The extension implements [sectref Columns columns],
which store arrays of values of a single type indexed by integers, and
[sectref Grids grids], which are arrays of columns. 

[section "Columns"] 
A typed array column contains elements of a single 
[sectref "Column Types" type]
that is specified when it is created. The command tarray can be used
to create and manipulate typed arrays including searching and sorting
operations.

[section "Column Types"]
The extension supports the following element types for typed arrays:
[list_begin options]
[opt_def [option any]] Any Tcl value
[opt_def [option boolean]] A boolean value
[opt_def [option byte]] Unsigned 8-bit integer
[opt_def [option double]] Floating point value
[opt_def [option int]]| Signed 32-bit integer
[opt_def [option uint]] Unsigned 32-bit integer
[opt_def [option wide]] Signed 64-bit integer
[list_end]
The primary purpose of the type is to specify what values can be
stored in that column. This impacts the compactness of the internal
storage (really the primary purpose of the extension) as well certain
operations (like sort or search) invoked on the column. The type
[option any] allows any Tcl type. These are essentially treated as strings.
However, use of a column of this type by itself 
(i.e. not in conjunction with other columns) offers very little benefit
over a plain Tcl list.

[para]
Attempts to store values in typed array column that are not valid
for that column will result in an error being generated.

[section "Grids"]
A typed grid is an ordered sequence of typed arrays of the equal size. It can be viewed as an array of records where the record fields happen to use column-wise storage. The corresponding grid command operates on typed tables.

[section Indices]
An index into a typed column or grid can be specified as either an integer
or the keyword [const end] which specifies the last element in the
typed array. Unlike the built-in Tcl commands, index arithmetic of
the form [const end-2] is not supported.
[para]
Many commands allow multiple indices to be specified. These may take one
of two forms. Some commands, like [cmd get], allow specification of a
[emph range] which includes all indices between a lower and an upper 
bound (inclusive). Other commands like [cmd pick] allow specification of
an [emph "index list"] which make be a list of integers, or a typed 
[const int] column.

[section "Standard Options"]
Many commands take standard options which are described here.
[para]
Commands returning values from typed columns and grids take the following
options that controls the format of the returned values.

[list_begin options]
[opt_def -dict]
The values are returned as a dictionary with keys being
the indices.
[opt_def -tarray] The values are returned as a typed column or grid as
appropriate. This is the default if none of the other options is specified.
[opt_def -list] The values are returned as a Tcl list.
[list_end]


[section Commands]

[list_begin definitions]

[call [cmd "column create"] [arg TYPE] [arg [opt INITIALIZER]] [arg [opt INITSIZE]]]
Returns a typed array of the type [arg TYPE] which must be one of one
of valid types described in [sectref "Column Types"]. If 
[arg INITIALIZER] is specified, it is the initial content of the typed array 
and must be a
list with elements of the appropriate type. For performance reasons,
the [arg INITSIZE] argument may be specified to indicate how many slots to
preallocate for the array. This is only treated as a hint and actual
size allocated may differ.

[call [cmd "column delete"] [arg TARRAYCOLUMN] [arg LOW] [arg [opt HIGH]]]
Returns a typed column with all elements between indices [arg LOW]
and [arg HIGH] deleted. [arg HIGH] defaults to [arg LOW] if unspecified.

[call [cmd "column fill"] [arg TARRAYCOLUMN] [arg VALUE] [arg LOW] [arg [opt HIGH]]]
Returns a typed column with 
all elements between indices [arg LOW] and [arg HIGH] set to [arg VALUE].
If unspecified, [arg HIGH] defaults to [arg LOW].
The indices may be specified as an integer or
the keyword [const end] signifying the last
element of the typed array. If [arg HIGH] is greater than the current size
of the typed array, it is extended and new elements are filled with
[arg VALUE]. The command will generate an error if [arg TARRAYCOLUMN]
is not a typed column,  or if [arg VALUE] cannot be converted to 
the column's type or if the specified indices are out of range.

[call [cmd "column get"] [arg [opt "STANDARDOPTION"]] [arg TARRAYCOLUMN] [arg LOW] [arg [opt HIGH]]]
Returns the value or values at a specific index or index range 
in a typed column. If [arg HIGH] is not specified, the value at the specified
index is returned. If [arg HIGH] is specified, the values between
indices [arg LOW] and [arg HIGH] are returned. In this case the format
of the returned values is controlled by [arg STANDARDOPTION]
which may be any of the options controlling returned formats
as specified in [sectref "Standard Options"].
[para]
[arg LOW] and [arg HIGH] may be specified in any of the
[sectref Indices].
It is an error if any index is invalid (e.g. negative or out of range).


[call [cmd "column pick"] [arg [opt "STANDARDOPTION"]] [arg TARRAYCOLUMN] [arg INDICES]]
Returns the values in a typed column at the
positions specified by [arg INDICES] which must be a 
index list in the one of the forms described in [sectref Indices].
It is an error if any of the indices are invalid.
[para]
The format of the returned values is controlled by [arg STANDARDOPTION]
which may be any of the options controlling returned formats
as specified in [sectref "Standard Options"].

[call [cmd "column place"] [arg TARRAYCOLUMN] [arg VALUEDICT]]
[call [cmd "column place"] [arg TARRAYCOLUMN] [arg INDICES] [arg VALUES]]
In the first form, [arg VALUEDICT] is a dictionary mapping
indices to the new values.
In the second case, [arg INDICES] must be a 
index list in the one of the forms described in [sectref Indices].
[arg VALUES] may be a list of values or a typed column in the same order.
In both cases, the modified typed column is returned. The command may extend
the array if necessary.
[para]
The command will generate an error if [arg TARRAYCOLUMN]
is not a typed column,  or if a value cannot be converted to 
the column's type or if an index is out of range.

[call [cmd "column put"] [arg TARRAYCOLUMN] [arg VALUES] [arg FIRST]]
Returns a typed column with the elements starting at index [arg FIRST]
replaced by the corresponding elements of [arg VALUELIST].
[arg VALUES] may be a list of values or a typed column. Any existing
elements at those position are overwritten. The command may extend
the array if necessary.
[para]
The command will generate an error if [arg TARRAYCOLUMN]
is not a typed column,  or if a value cannot be converted to 
the column's type or if the specified starting index is out of range.

[call [cmd "column search"] [opt "[option -start] [arg STARTINDEX]"] [opt [option -all]] [opt [option -inline]] [opt [option -not]] [opt [option -nocase]] [arg [opt OPER]] [arg TARRAYCOLUMN] [arg VALUE]]
Searches the specified typed column for a matching value. By default,
the search starts at index 0 and returns the index of the first match
found, returning -1 if no matching value is found. The other options
modify this behaviour. If the option [option -start] is specified, the search
starts at index [arg STARTINDEX] instead of 0. If [option -all]
is specified, the
search does not stop at the first match but instead returns a list
containing the indices of all matched elements. This may be an empty
list if no elements matched. If the [option -inline] option is specified, the
command returns the matched value(s) instead of their indices.
[para]
[arg OPER] specifies the comparison operator and must be one of the following:
[list_begin options]
[opt_def -eq] Matches when equal to value (default)
[opt_def -gt] Matches when greater than [arg VALUE]. 
Not valid for [const boolean] type.
[opt_def -lt] Matches when less than [arg VALUE].
Not valid for [const boolean] type.
[opt_def -pat] Matches [arg VALUE] using [cmd "string match"] pattern rules.
Only valid for type [const any].
[opt_def -re] Matches [arg VALUE] as a regular expression.
Only valid for type [const any].
[list_end]

The sense of the match can be inverted by specifying the [option -not] option
so for example specifying [option "-not -gt"] will match all elements that are
less than or equal to [arg VALUE]. For case insensitive matching, the
[option -nocase] option may be specified. This is ignored for all array types
except type [const any].


[call [cmd "column size"] [arg TARRAYCOLUMN]]
Returns the number of elements in the typed column.

[call [cmd "column sort"] [opt [option -indices]] [opt [option -increasing]] [opt [option -decreasing]] [arg TARRAYCOLUMN]]
Returns a sorted typed column. [arg TARRAYCOLUMN] is the typed column to
be sorted. The comparison is done in a column type-specific manner.
Sorting is sorted in increasing order by default.
The [option -decreasing] option may be specified to change this. If
the [option -indices] option is specified, the command returns a typed array
containing the indices of the sorted values instead of the values
themselves.

[call [cmd "column type"] [arg TARRAYCOLUMN]]
Returns the [sectref "Column Types" type] of the typed column.

[list_end]

[keywords column grid]

[manpage_end]
