text {
    ((= chap_tarray_ref "Tarray commands"))
    Version {taversion}
    include::header.ad[]

    ((author "Ashok P. Nadkarni"))
}


text {
    == Introduction

    The tarray extension implements typed arrays and associated
    commands ((^ chap_column_ref column))
    and ((^ chap_table_ref table)). This page only provides
    reference documentation for commands. See
    the link:index.html[main contents] for an introduction, programming guide
    and other reference documentation.

    === Installation and loading

    include::download.ad[]
    
} shell {
    package require tarray
}

text {
    == Command reference

    All commands are located in the `tarray` namespace.

    === Commands

    // Turn off section numbering for command definitions
    :!sectnums:
    
    ((cmddef tarray_column "column _SUBCOMMAND_ ..."))
    Operates on columns. See ((^ chap_column_ref)).
    
    ((cmddef tarray_loop "loop _VAR_ _VALUES_ _SCRIPT_"))
    ((cmddef tarray_loop_indexed "loop _INDEXVAR_ _VAR_ _VALUES_ _SCRIPT_"))
    In the first form, _SCRIPT_ is executed for each element
    in _VALUES_ with _VAR_ taking on the value of each element or row in
    _VALUES_ in turn. _VALUES_ may be a column, table or a Tcl list.

    The second form is similar but in addition _INDEXVAR_ is assigned
    the index of the element.
    
    ((cmddef tarray_prettify "prettify _VALUES_ ?_options_?"))
    Returns _VALUES_ as a more readable string format. _VALUES_ is
    expected to be a column or a table. If not, it is returned unchanged.

    The command takes the following options
    
    ((.Table tab_prettify_opts "Prettify options"))
    [cols="40,70", options="header"]
    |===
    |Option
    |Description

    |-full _BOOLEAN_
    |If true, the full table or column is formatted and returned.
    Otherwise, only the leading and trailing lines specified by
    the `-head` and `-tail` options are returned.
    For _VALUES_ that is not a column or table, the entire string
    is returned irrespective of this option.

    |-head _NELEMS_
    |Specifies the number of leading elements that are included in
    the returned string.
    Ignored if _VALUES_ is not a column or table. 
    
    |-tail _NELEMS_
    |Specifies the number of trailing elements that are included in
    the returned string.
    Ignored if _VALUES_ is not a column or table. 
    
    |===

    ((cmddef tarray_print "print _VALUES_ ?_CHANNEL_? ?_options_?"))
    Prints _VALUES_ to the specified channel in a readable string format.
    _CHANNEL_ defaults to `stdout` if unspecified. _VALUES_ is
    expected to be a column or a table. If not, it is output as
    by the Tcl `puts` command.
    See ((^ tab_prettify_opts)) for a list of valid options.

    ((cmddef tarray_randseed "randseed ?_SEED1_ _SEED2_?"))
    Sets the initial seed values for the random number generator (RNG).
    The optional `_SEED1_` and `_SEED2_` should be any 64-bit numbers.
    For normal use, this command need not be invoked as the
    RNG is automatically initialized internally using runtime
    data. 
    For use cases such as testing where you want reproducible
    "`random`" values to be produced, you can call the command
    with the same seed arguments before every run.

    When no arguments are specified, the RNG is reinitialized in
    the same manner as startup. This is generally useful to
    undo the effects of a previous call to `randseed` with
    specific seed values.
    
    ((cmddef tarray_rng_create "rng create _CMDNAME_ _TYPE_ ?_LOWERBOUND_? ?_HIGHERBOUND_?"))
    Returns a new random number generator (RNG) command object named
    `_CMDNAME_` that can be used to produce uniformly distributed
    random numbers of the specified type.
    For types `boolean`, `byte`, `int`, `uint`
    and `wide` the range of generated values corresponds to the entire
    domain range by default. For type `double` the values are generated
    in the range {startsb}0,1{endsb} by default. The optional
    _LOWERBOUND_ and _UPPERBOUND_ arguments may be supplied to modify
    the range from which values are sampled. These are ignored for
    _TYPE_ `boolean`.

    The returned RNG command object can be used to generate random numbers
    by calling its ((^` tarray_RNG_get get)) subcommand and its seed values
    set with the ((^` tarray_RNG_seed seed)) subcommand.

    ((cmddef tarray_rng_new "rng new _TYPE_ ?_LOWERBOUND_? ?_HIGHERBOUND_?"))
    Returns a new random number generator (RNG) command object that
    can be used to produce random numbers of the specified type.
    See ((^ tarray_rng_create)) for details. This command differs only
    in that the name of the returned command object is automatically
    generated.

    ((cmddef tarray_RNG_get "_RNG_ get ?_COUNT_?"))
    Returns `_COUNT_` random numbers. `_RNG_` is a random number generator
    created by the ((^` tarray_rng_create "rng create"))
    or ((^` tarray_rng_new "rng new")) commands. `_COUNT_` defaults
    to `1`.

    ((cmddef tarray_RNG_seed "_RNG_ seed _SEED1_ _SEED2_"))
    Sets the seed of the random number generator command object `_RNG_`
    created by the ((^` tarray_rng_create "rng create"))
    or ((^` tarray_rng_new "rng new")) commands.
    The `_SEED1_` and `_SEED2_` should be any 64-bit numbers.
    For normal use, this command need not be invoked as the
    RNG is automatically initialized internally using runtime
    data. For use cases such as testing where you want reproducible
    "`random`" values to be produced, you can set 
    the same seed arguments before every run.
    
    ((cmddef tarray_table "table _SUBCOMMAND_ ..."))
    Operates on tables. See ((^ chap_table_ref)).
}
