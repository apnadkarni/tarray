text {
    ((= chap_ui "Tk widgets"))
    Version {taversion}
    include::header.ad[]

    ((author "Ashok P. Nadkarni"))
}

text {
    == Introduction

    The `tarray_ui` package implements some Tk widgets that useful when
    working with typed arrays.

    The package currently implements two widgets,
    ((^ ui_tableview tableview)) and ((^ ui_csvimport csvimport)).

    The `tableview` widget displays data from a typed array
    ((^ chap_table_ref table)). It is written with a view to conserve
    memory when displaying tables with a large amount of data. At
    the same time it provides several standard features without requiring
    any additional programming on part of the developer.
    
    The `csvimport` widget reads CSV data from a file into a
    table. It displays various options to the user to control
    of settings related to CSV parsing and preview the results
    before importing the data into a table.
}

text {
    == Installation and loading

    include::download.ad[]
    
} tbd {
    package require tarray_ui
} script {
    source ../widgets/widgets.tcl
    namespace import tarray::table
    source ../tests/cities.tcl
    tarray_cities2 cities ../tests/cities15000.txt
} text {
    In addition to Tk and `tarray` itself,
    this package has dependencies on the following additional packages:

    * `snit` available as part of
    http://core.tcl.tk/tcllib/doc/trunk/embedded/index.html[tcllib].

    Individual widgets may have additional dependencies.
}

text {
    == Widgets

    === Widget reference
}
    
text {
    ((cmddef ui_tableview "tableview _WIDGET_ _TABLE_ ?_OPTIONS_?"))
    
    Creates a `tableview` widget that displays data from a
    ((^ chap_table_ref table)). It is written with a view to conserve
    memory when displaying tables with a large amount of data. At
    the same time it provides several standard features without requiring
    any additional programming on part of the developer.

    _WIDGET_ should be the Tk window path for the widget. This is also
    the return value of the command. _TABLE_ should be a tarray
    table containing the data to be displayed. The supported options
    for the command are shown in ((^ tab_ui_tableview_opts)).
    
    ((.Table tab_ui_tableview_opts "Tableview options"))
    [options="header"]
    [cols="20,80"]
    |===
    |Option
    |Description

    |`-colattrs _COLUMNATTRS_`
    |Specifies various attributes for each column, such as title label. See
    ((^ sect_ui_tableview_colattrs)).

    |`-formatter _COMMANDPREFIX_`
    |Specifies a command prefix to be invoked to format data for display.
    See ((^ sect_ui_tableview_formatter)).

    |`-showfilter _BOOLEAN_`
    |If specified as `true`, the widget displays controls for filtering the
    data. See ((^ sect_ui_tableview_filters)).

    |`-visuals _VISUALSTATES_`
    |Allows definition of states that control the visual aspects of
    displayed data such as fonts and colors.
    See ((^ sect_ui_tableview_formatter)).

    |`-xscrolldelay _DELAYSPEC_`
    |Controls rate of horizontal scrolling when the dragging the horizontal
    scrollbar slider with the mouse button pressed. _DELAYSPEC_ is a list
    of one or two integers in milliseconds. The first is the delay after
    the initial scroll and the second, which defaults to the same value
    as the first, is the delay for subsequent scrolls.
    
    |`-yscrolldelay _DELAYSPEC_`
    |Similar to the `-xscrolldelay` option except that it applies to
    vertical scrolling.
    
    |===
} text {
    ===== Features
    The widget is based on Tim Baker's `treectrl` widget which is
    available from http://tktreectrl.sf.net[SourceForge] and must
    be downloaded separately.
    The `treectrl` widget is very flexible in terms of its capabilities
    but at some cost in programming complexity.
    The `tableview` widget hides most of this complexity by limiting
    the widget to displaying data in table form. It maintains most
    of the useful `treectrl` features like drag and drop for resizing
    and repositioning table columns and also adds the following
    features.
    
    * Filtered views based on user-defined conditions

    * Visual keying of rows or cells based on their values

    * Sorting

    * Selection and clipboard handling
    
    * Automatic scrollbars

    * Tooltips
    
    Minimal programming is required to make use of these features.
    For example, the following call is sufficient to display a
    the contents of a variable `cities` containing a
    ((^ chap_table_ref table)) of geographical data.
} syntax {
    tarray::ui::tableview .top $cities -showfilter 1
    pack .cities -fill both -expand
} text {
    The corresponding table, sorted by name and filtered
    to only list cities in the eastern hemispere having a population
    of more than a million, is shown below.

    .A tableview window
    image::cities1.png[Tableview example]
}

text {
    ((===== sect_ui_tableview_colattrs "Column attributes"))

    Each display column in a `tableview` has attributes that are specified
    with the `-colattrs` option when the widget is created. The value passed
    with this option should be a dictionary keyed by the column name in the
    table. The corresponding value in the dictionary is itself a dictionary
    keyed by the attribute name. Defaults are used for missing column
    and attribute keys.

    Column attributes are shown in ((^ tab_ui_tableview_colattrs)).

    ((.Table tab_ui_tableview_colattrs "Tableview column attributes"))
    [options="header"]
    [cols="20,30,50"]
    |===
    |Attribute
    |Permitted values
    |Description

    |`Heading`
    |Any string
    |Specifies the column heading. If unspecified, defaults to the name
    of the column in the table being displayed.

    |`Justify`
    |`left`, `right`
    |Specifies whether the data in the column is left-justified or
    right-justified. If unspecified, justification depends on the
    data type of the table column. Numeric columns are right justified
    and others are left justified.
    
    |`Sortable`
    |Boolean
    |If true (default), clicking on the column header will sort the column,
    toggling between ascending and descending order. If false, clicking
    on the column heading will have no effect.
    
    |===
} tbd {
    Column attribute example
}

text {
    ((===== sect_ui_tableview_formatter "Formatting data and visuals"))

    By default, the widget displays table data in its "`natural`"
    string representation. In some cases the application may need to
    format it differently, for example, displaying an integer in
    hexadecimal form. Moreover, some values may need to be visually
    distinguished, negative values displayed in red for instance.

    Both these needs are met through the use of the `-formatter` and
    `-visuals` options to the `tableview` widget.

    .Visual states

    A _visual_ defines a named visual state as a combination of font, foreground
    and background colors.
    These states can be applied to table rows or cells to visually
    distinguish them.

    There are 7 such states, `visual1`..`visual7`,
    and the settings for each can be defined through the `-visuals` option.
    The value supplied for this option should be a dictionary keyed by
    the name of the visual state. The value associated with each defined
    state is itself a dictionary with the (optional) visual attribute
    keys shown in ((^ tab_ui_tableview_visual_attrs)).

    ((.Table tab_ui_tableview_visual_attrs "Tableview visual attributes"))
    [options="header"]
    [cols="20,80"]
    |===
    |Attribute
    |Description

    |`-bg _COLOR_`
    |Alias for `-background`.
    
    |`-background _COLOR_`
    |Specifies the background color to associate with the visual state.
    _COLOR_ can be specified in any form accepted by Tk.
    
    |`-fg _COLOR_`
    |Alias for `-foreground`.
    
    |`-font _FONT_`
    |Specifies the Tk font.

    |`-foreground _COLOR_`
    |Specifies the foreground color to associate with the visual state.
    _COLOR_ can be specified in any form accepted by Tk.
    
    |=== 

    The order in which visual states are passed in the `-visuals` option
    is important. When multiple visual states are applied to a row
    or cell, the visual states that appear earlier take priority over
    those that appear later in the case where both states include the
    same attribute.
    
    Once the visual states have been defined, they can be applied to any
    row or individual cell through the formatter callback. This is
    described next.
}

text {
    .Formatting data

    If the default string representation of data or its visual display
    is not suitable, an application can provide a callback via the
    `-formatter` configuration option that will be used to convert
    the data into a suitable form for display.
    The value passed for this option
    should be a command prefix which will be invoked with
    two additional arguments. The first is the index of the row being
    formatted in the table that was passed to the widget. The second
    is a dictionary keyed by column names and containing the corresponding
    table cell values.

    The return value from the invocation should be a list of one or two
    elements. The first element should be in the same form
    as the second argument passed to the callback, i.e. a dictionary
    indexed by column names. The dictionary values will be used
    as the display strings for the corresponding columns.

    The second element is optional and if present, specifies the visual
    states to be assigned to the row or individual cell. This should be
    a dictionary keyed by the column name. The corresponding value should
    be a list of visual states to assign to the cell in that column and row.
    If more than one state is specified, defined attributes in states appearing
    later in the list override those attributed for states earlier in the list.
    The dictionary may also contain the empty string as a special key whose
    value is again a list of visual states. This will apply to all columns
    in the entire row.

    [NOTE]
    The visual states associated with a cell is the union of the states
    associated with the row containing the cell and the states directly
    applied to the cell. When two states define the same attribute, the
    one that takes effect depends on the order in which the visual states
    were listed in the `-visuals` option as discussed earlier.

    .Example

    The small sample script below demonstrates the use of `-visuals` and
    `-formatter`. The `format_city` callback formats the latitude and
    longitude values to two decimal places. Additionally, it highlights
    all tropical cities in red, and population values above a hundred
    thousand are shown with white text on a red background.
} norun 1 uiscript {
    proc format_city {row_index row_values} {
        foreach col {latitude longitude} {
            dict set row_values $col [format %2.2f [dict get $row_values $col]]
        }
        set visuals {}
        set latitude [dict get $row_values latitude]
        if {$latitude < 23.5 && $latitude > -23.5} {
            dict set visuals "" visual2; # Set the visual for the entire row 
        } else {
            dict set visuals "" ""
        }
        if {[dict get $row_values population] > 100000} {
            dict set visuals population visual1; # Set the visual only for the population cell
        } else {
            dict set visuals population ""
        }
        return [list $row_values $visuals]
    }

    toplevel .cities
    tarray::ui::tableview .cities.tbl $cities -formatter format_city -visuals {
        visual1 {-bg red -fg white}
        visual2 {-fg red}
    }; # Note `visual1` which is applied to a column cell is listed before `visual2` so as to give it higher priority
    pack .cities.tbl -fill both -expand 1
} text {
    A view generated from the above script is shown below.

    image::cities_visual.png[Using visuals and formatting]
}


text {
    ((===== sect_ui_tableview_filters Filters))

    Filters are a mechanism that let the end-user restrict displayed data
    to table rows that match certain criteria. Filters are enabled
    by configuring the widget's `-showfilter` option as `true`.

    Enabling filters results in an additional header row being displayed under
    the heading for each column. Clicking in the filter header for a column
    will display an entry field where the user can type in an filter
    expression. Only those rows for which the cell for that column matches
    the expression will be displayed. When filters are defined for multiple
    columns, all have to match for a row to be displayed.

    The filter syntax is
} syntax {
    _CONDITION_ _VALUE_
} text {
    where _CONDITION_ is one of the conditions shown in
    ((^ tab_ui_tableview_filter_cond)) and _VALUE_ is the value to
    be compared against the column cell.

    ((.Table tab_ui_tableview_filter_cond "Filter conditions"))
    [options="header"]
    [cols="20,80"]
    |===
    |Condition
    |Description

    |==
    |equals VALUE
    
    |!=
    |does not equal VALUE
    
    |>
    |is greater than VALUE
    
    |>=
    |is greater than or equal to VALUE
    
    |<
    |is less than VALUE
    
    |<=
    |is less than or equal to VALUE
    
    |*
    |matches VALUE glob pattern (case-insensitive)
    
    |!*
    |does not match VALUE glob pattern (case-insensitive)
    
    |~
    |matches VALUE regexp (case-insensitive)
    
    |!~
    |does not match VALUE regexp (case-insensitive)
    
    |~^
    |matches VALUE regexp (case-sensitive)
    
    |!~^
    |does not match VALUE regexp (case-sensitive)\n
    
    |===

    If an operator is not specified, it defaults to `==` (equality).
} text {
    The standard entry editing keys are available when editing a filter entry.
    Additionally,
    [no-bullet]
    * kbd:[Tab] or kbd:[Enter] will save the filter,
    * kbd:[Escape] will revert the filter entry to its original value, and
    * kbd:[F1] will show a help dialog summarizing filter syntax.
}


text {
    ===== Selection and clipboard handling
    
    The `tableview` widget implements mouse bindings for selecting rows that
    follow the behaviour of the Tk `listbox` widget's extended select mode.
    See the documentation for `listbox` for details.

    The widget generates a `<<ListboxSelect>>` event when there is any
    change in the selection.

    When one or more rows are selected, the widget will copy the current
    selection to the clipboard when the `<<Copy>>` virtual event is received
    (for example, when kbd:[Ctrl-C] is pressed on Windows). The rows
    are copied as text with tabs separating cells and newlines separating the
    rows.
}

text {
    ===== Scrollbars

    The `tableview` widget has built-in horizontal and vertical
    scrollbars that appear as needed.  There is no need for
    applications to provide separate scrollbars.
}

tbd {
    Mouse bindings
}

tbd {
    [no-bullet]
    * kbd:[Ctrl-Home] moves the display to the top of the table
    * kbd:[Ctrl-C] copies the currently selected rows 
    keybindings - Ctrl-Home, Ctrl-C etc.
}

tbd {
    sorting using tarray because treectrl will sort using display text?
    Also does not have all the values
}

